
==================== FINAL INTERFACE ====================
2016-06-12 19:56:37.398119 UTC

interface main@main:Handlers [orphan module] 7103
  interface hash: 3278e96af20928fd1749535813ce7fcb
  ABI hash: 0bd0a05609e8ba774d2f49bb4bd5cf3c
  export-list hash: c5651c560e77c9d5e4b13db01044a7f9
  orphan hash: 30c6627648ebc49569cd2e91a676a172
  flag hash: eff5e623cf316ffe3f39252fffb87620
  sig of: Nothing
  used TH splices: True
  where
exports:
  Handlers.categs
  Handlers.estabs
  Handlers.formCategoria
  Handlers.formDia
  Handlers.formEstabelecimento
  Handlers.formFaixapreco
  Handlers.formLogin
  Handlers.formPessoa
  Handlers.formSubcategoria
  Handlers.getAboutR
  Handlers.getAdminR
  Handlers.getCadcategoriaR
  Handlers.getCaddiaR
  Handlers.getCadestabR
  Handlers.getCadfaixaprecoR
  Handlers.getCadpessoaR
  Handlers.getCadsubcategR
  Handlers.getErroR
  Handlers.getHomeR
  Handlers.getLoginR
  Handlers.getLogoutR
  Handlers.getPerfilR
  Handlers.listaClassificacao
  Handlers.listaDia
  Handlers.listaFaixapreco
  Handlers.listaSubcategoria
  Handlers.postCadcategoriaR
  Handlers.postCaddiaR
  Handlers.postCadestabR
  Handlers.postCadfaixaprecoR
  Handlers.postCadpessoaR
  Handlers.postCadsubcategR
  Handlers.postLoginR
module dependencies: Foundation Rotas
package dependencies: aeson-compat-0.3.2.0@aeson_9wJdCBL4bH5K4w9XiaFHb3
                      aeson-0.9.0.1@aeson_LJIBliiEkn4J9xnahdCeak
                      ansi-terminal-0.6.2.3@ansit_BDlVdfJGo3VHCIHxPTNjH1
                      appar-0.1.4@appar_0ov5bpGH3STIB4U7WU8MFi
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      attoparsec-0.13.0.1@attop_C6pUTDzrecbIO4LDYHwJUG
                      auto-update-0.1.3@autou_19qtEoqMgV6FQlA1CkY9Cg base-4.8.2.0
                      base64-bytestring-1.0.0.1@base6_AkCk8zInckjJsyQ4AIFHPN
                      base-compat-0.9.1@basec_3Zy8UsyHmBEEwbReR8x1KT
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      blaze-builder-0.4.0.1@blaze_4KI2nf4lf9oHEgXiILyTYj
                      blaze-markup-0.7.0.3@blaze_C7imNkL0ufD2cjmU64FP9k
                      blaze-html-0.8.1.1@blaze_Iq6GES6DAMS0745KzFL7i6
                      byteable-0.1.1@bytea_38yjJsjDRm9KusCn8Yo4aB
                      byteorder-1.0.4@byteo_6yQGE3rJo3bBqr3CFoBQ27
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      case-insensitive-1.2.0.6@casei_05l5iiwk2FiGu4DeOqOIxC
                      cereal-0.5.1.0@cerea_843xOxvPj94HAJ9SD4EJuq
                      cipher-aes-0.2.11@ciphe_8XNwNKI71EdCLNQ4WGdMQq
                      clientsession-0.9.1.1@clien_LuobzRZeZj55iOint27HgG
                      conduit-1.2.6.4@condu_1EneW8yRsjj18l2EfcgLyu
                      conduit-extra-1.1.13.1@condu_JrYHSonW303HUe4R7rhE0T
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      cookie-0.4.1.6@cooki_2Eb4iZo39x3Ihl7jVKbtZO
                      cprng-aes-0.6.1@cprng_FqpwhJtWO8g27pB5PJZtIq
                      crypto-random-0.0.9@crypt_7BiCOK9v78J36YeClUc9KE
                      crypto-cipher-types-0.0.9@crypt_AkbdiYWeXYI5D4jAOMIXve
                      crypto-api-0.13.2@crypt_Kp4uvZbywBzKttuHrlYBAx
                      css-text-0.1.2.1@csste_BKK1KtEb1sJ9s7LwxLpwLq
                      data-default-instances-base-0.0.1@datad_Bh5w1rt638k3gekgUnZ9Qe
                      data-default-0.5.3@datad_DLQPsKM7BNMFfKH45X8LEe
                      data-default-instances-dlist-0.0.1@datad_IV2dTGx3Pj09NowR0FWGzk
                      data-default-instances-containers-0.0.1@datad_IvTKAI579b047LLJfQOYbY
                      data-default-class-0.0.1@datad_K91y8NcZUJI9yaBI61rgdD
                      data-default-instances-old-locale-0.0.1@datad_LQTewb1b5hK22W4h2rIWVQ
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      directory-1.2.2.0@direc_0hFG6ZxK1nk4zsyOqbNHfm
                      dlist-0.7.1.2@dlist_AO7XAasbAeyL0XLKeq1Aui
                      easy-file-0.2.1@easyf_IjQ6MMskJyDEpOwcfCdF0G
                      email-validate-2.2.0@email_CQXkJx3ILx16knsHT8WvIg
                      entropy-0.3.7@entro_7gYJ61Ci0NNBp8LB4CGmrG
                      exceptions-0.8.2.1@excep_6lgwjdgwblY7rzh5s6SLd8
                      fast-logger-2.4.3@fastl_5D9PYpdXmW6J1zw1AtN1OL
                      filepath-1.4.0.0@filep_Ey7a1in9roBAE8bUFJ5R9m ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I
                      http2-1.4.5@http2_DiIK6FZsEORCMOaqj3QSEe
                      http-api-data-0.2.2@httpa_3kiLcpdXTUe4CYRpIoinpP
                      http-date-0.0.6.1@httpd_K48ICbZdR7j4Lbow4Laii0
                      http-types-0.9@httpt_1qktWOgbYARKyaY9syDTns integer-gmp-1.0.0.0
                      iproute-1.7.0@iprou_51qGM7UdLbAGjwdVd1zynT
                      lifted-base-0.2.3.6@lifte_DoOvgrTvmEtENHs0ypaZTR
                      memory-0.11@memor_0EiEBIg44i8KGjAeoKnPDs
                      mmorph-1.0.6@mmorp_42KUkOfzC6q3qCtAMiSHam
                      monad-logger-0.3.18@monad_5Adv9Hf1fONCeS01xDfKe7
                      monad-control-1.0.1.0@monad_7Tqv3C2ASZP4J7swGaIkqS
                      monad-loops-0.4.3@monad_LQiHRUYhFhYBU7nOOWDOrb
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk
                      network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ
                      network-uri-2.6.1.0@netwo_DarCcUHK1BCJHlIYOjXe67
                      old-locale-1.0.0.7@oldlo_7h2Gx6mVPJ5Gheca8j9Mpe
                      old-time-1.1.0.3@oldti_JVjJvknZJ0JKghfag2Jw2L
                      parsec-3.1.9@parse_7aUabKPjr5W6Al5Ge35AQl
                      path-pieces-0.2.1@pathp_4qW9xznk5mC6aJZVVgmWEO
                      persistent-template-2.1.6@persi_1951GfcGAw414vdjFbcV5g
                      persistent-2.2.4.1@persi_DNWQ1fABpkG7SIGjkPAoVL
                      persistent-postgresql-2.2.2@persi_EzrtUBM22f5BF3Kdnm31Oz
                      postgresql-libpq-0.9.1.1@postg_6f9D1As2FCe0fjZpXXvHvS
                      postgresql-simple-0.5.1.2@postg_9k9Uw6R9foNDbRYAVYjlMk
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      process-1.2.3.0@proce_52AgREEfSrnJLlkGV9YZZJ
                      psqueues-0.2.2.0@psque_Eu4cvucK9D300LguHeaq9c
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      resourcet-1.1.7.3@resou_0TYP6GHqv9b1qNv0xS98eJ
                      resource-pool-0.2.3.2@resou_BPzNUl5kJsI1qo7V284Tgq
                      safe-0.3.9@safe_Eus5OohxO2XHvdWxKAmhFS
                      scientific-0.3.4.6@scien_5s26qRhE5w04kI4pP1Rtwm
                      securemem-0.1.9@secur_ArobkR9k7uwJiSXmFUrDYT
                      semigroups-0.18.1@semig_EApcHsXPsrRKUkxxoKR3HO
                      shakespeare-2.0.8.1@shake_HPgllHDhOeNKeID3lIYZet
                      silently-1.2.5@silen_5nVdOe0bUXfLPEbxHJT4m4
                      simple-sendfile-0.2.21@simpl_1s4YZSsjn6TCbK7MVn1EXz
                      skein-1.0.9.4@skein_Gu4ZCUdyHoJKdYGOgDHOva
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      stm-chans-3.0.0.4@stmch_4ac5OLG4E0w1rpuIDCribD
                      streaming-commons-0.1.15.2@strea_0Pv1kz8leJoAmtjyRTUWHG
                      stringsearch-0.3.6.6@strin_CAOAc0sCfAC9gi7YClo2KY
                      tagged-0.8.3@tagge_5cptKNCoGdxJM6eqqNERxD
                      tagsoup-0.13.9@tagso_3I5x83DoCVBIz4INMBLU3R
                      template-haskell-2.10.0.0 text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      time-locale-compat-0.1.1.1@timel_Ciz7M1U3da73rRwCjRF3Np
                      transformers-base-0.4.4@trans_74WedXVmfaHHDJItmBRTVp
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      unix-2.7.1.0@unix_KZL8h98IqDM57kQSPo1mKx
                      unix-compat-0.4.1.4@unixc_Km8uiabmElX5mrb8D4Fywe
                      unix-time-0.3.6@unixt_4DXmhADld9WFju1Q636Hdx
                      unordered-containers-0.2.5.1@unord_Kh4ayEkEku2Hr3yyCwld2j
                      utf8-string-1.0.1.1@utf8s_L8eKHa7Iv9q7FVKUYW6u4b
                      uuid-types-1.0.3@uuidt_1jYi9RR4Gf08rGU1w6xxPr
                      vault-0.3.0.6@vault_8aId1RjvIBs9AcRd6Dlytd
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
                      wai-3.2.1@wai_9edbdKSIJ67EotPYC07Pm5
                      wai-extra-3.0.15@waiex_AN9r60wRxlQ1G94yF9jctQ
                      wai-logger-2.2.5@wailo_BCoAaxCAAhP8C9VccJCupp
                      warp-3.2.2@warp_BT83wEXGJqwEvMr1lKbIjl
                      word8-0.1.2@word8_6yKBsGbmsbLB2UCORShr75
                      xss-sanitize-0.3.5.6@xsssa_JdGY8fSYBM7LAdXrSOFQKS
                      yesod-core-1.4.20.1@yesod_9jLiWBvGPHW5LdxkUxjL88
                      yesod-form-1.4.7@yesod_CXBt2wmt7ex0o9Pu0X8jby
                      yesod-1.4.3@yesod_G3l0IvftpcQLS1fhy6ci93
                      yesod-persistent-1.4.0.4@yesod_KDWGSyKXKmE2mrTGkSySls
                      zlib-0.6.1.1@zlib_7LjT7TSHX8U3VTy3t378Vu
orphans: aeson-compat-0.3.2.0@aeson_9wJdCBL4bH5K4w9XiaFHb3:Data.Aeson.Compat
         aeson-0.9.0.1@aeson_LJIBliiEkn4J9xnahdCeak:Data.Aeson.Types.Generic
         aeson-0.9.0.1@aeson_LJIBliiEkn4J9xnahdCeak:Data.Aeson.Types.Instances
         attoparsec-0.13.0.1@attop_C6pUTDzrecbIO4LDYHwJUG:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.0.1@attop_C6pUTDzrecbIO4LDYHwJUG:Data.Attoparsec.Text.Internal
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         crypto-api-0.13.2@crypt_Kp4uvZbywBzKttuHrlYBAx:Crypto.Classes
         data-default-instances-base-0.0.1@datad_Bh5w1rt638k3gekgUnZ9Qe:Data.Default.Instances.Base
         data-default-instances-dlist-0.0.1@datad_IV2dTGx3Pj09NowR0FWGzk:Data.Default.Instances.DList
         data-default-instances-containers-0.0.1@datad_IvTKAI579b047LLJfQOYbY:Data.Default.Instances.Containers
         data-default-instances-old-locale-0.0.1@datad_LQTewb1b5hK22W4h2rIWVQ:Data.Default.Instances.OldLocale
         hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Generic
         network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ:Network.Socket
         network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ:Network.Socket.Types
         persistent-template-2.1.6@persi_1951GfcGAw414vdjFbcV5g:Database.Persist.TH
         persistent-2.2.4.1@persi_DNWQ1fABpkG7SIGjkPAoVL:Database.Persist.Sql.Orphan.PersistQuery
         persistent-2.2.4.1@persi_DNWQ1fABpkG7SIGjkPAoVL:Database.Persist.Sql.Orphan.PersistStore
         persistent-2.2.4.1@persi_DNWQ1fABpkG7SIGjkPAoVL:Database.Persist.Sql.Orphan.PersistUnique
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         unix-time-0.3.6@unixt_4DXmhADld9WFju1Q636Hdx:Data.UnixTime.Diff
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.0.1@attop_C6pUTDzrecbIO4LDYHwJUG:Data.Attoparsec.Internal.Types
                         base-4.8.2.0:Control.Applicative base-4.8.2.0:Data.Either
                         base-4.8.2.0:Data.Functor.Identity base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:Data.Void
                         base-4.8.2.0:GHC.Exts base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         dlist-0.7.1.2@dlist_AO7XAasbAeyL0XLKeq1Aui:Data.DList
                         email-validate-2.2.0@email_CQXkJx3ILx16knsHT8WvIg:Text.Email.Parser
                         iproute-1.7.0@iprou_51qGM7UdLbAGjwdVd1zynT:Data.IP.Addr
                         iproute-1.7.0@iprou_51qGM7UdLbAGjwdVd1zynT:Data.IP.Range
                         main@main:Foundation
                         monad-logger-0.3.18@monad_5Adv9Hf1fONCeS01xDfKe7:Control.Monad.Logger
                         monad-control-1.0.1.0@monad_7Tqv3C2ASZP4J7swGaIkqS:Control.Monad.Trans.Control
                         mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk:System.Random.MWC
                         network-uri-2.6.1.0@netwo_DarCcUHK1BCJHlIYOjXe67:Network.URI
                         persistent-2.2.4.1@persi_DNWQ1fABpkG7SIGjkPAoVL:Database.Persist.Class.PersistConfig
                         persistent-2.2.4.1@persi_DNWQ1fABpkG7SIGjkPAoVL:Database.Persist.Sql.Orphan.PersistStore
                         persistent-postgresql-2.2.2@persi_EzrtUBM22f5BF3Kdnm31Oz:Database.Persist.Postgresql
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         resourcet-1.1.7.3@resou_0TYP6GHqv9b1qNv0xS98eJ:Control.Monad.Trans.Resource.Internal
                         semigroups-0.18.1@semig_EApcHsXPsrRKUkxxoKR3HO:Data.List.NonEmpty
                         semigroups-0.18.1@semig_EApcHsXPsrRKUkxxoKR3HO:Data.Semigroup
                         shakespeare-2.0.8.1@shake_HPgllHDhOeNKeID3lIYZet:Text.Css
                         shakespeare-2.0.8.1@shake_HPgllHDhOeNKeID3lIYZet:Text.Shakespeare
                         tagged-0.8.3@tagge_5cptKNCoGdxJM6eqqNERxD:Data.Tagged
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
                         unordered-containers-0.2.5.1@unord_Kh4ayEkEku2Hr3yyCwld2j:Data.HashMap.Base
                         unordered-containers-0.2.5.1@unord_Kh4ayEkEku2Hr3yyCwld2j:Data.HashSet
                         uuid-types-1.0.3@uuidt_1jYi9RR4Gf08rGU1w6xxPr:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuidt_1jYi9RR4Gf08rGU1w6xxPr:Data.UUID.Types.Internal.Builder
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Storable
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
                         yesod-core-1.4.20.1@yesod_9jLiWBvGPHW5LdxkUxjL88:Yesod.Core.Class.Handler
                         yesod-core-1.4.20.1@yesod_9jLiWBvGPHW5LdxkUxjL88:Yesod.Core.Internal.LiteApp
                         yesod-core-1.4.20.1@yesod_9jLiWBvGPHW5LdxkUxjL88:Yesod.Core.Types
                         zlib-0.6.1.1@zlib_7LjT7TSHX8U3VTy3t378Vu:Codec.Compression.Zlib.Stream
import  -/  base-4.8.2.0:Control.Applicative a8ebf5ad4932b411ad7725da68be9801
import  -/  base-4.8.2.0:Data.Functor 5c701b0af1708f0192a25dfe14ce6274
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  blaze-markup-0.7.0.3@blaze_C7imNkL0ufD2cjmU64FP9k:Text.Blaze.Internal 2898da33690d2db163df0dc76596091c
import  -/  blaze-html-0.8.1.1@blaze_Iq6GES6DAMS0745KzFL7i6:Text.Blaze.Html 75b0386c9ee854906d7c6830574b4617
import  -/  Foundation db490551c5a5dc504f2272a13b834cc0
  exports: bfe93713e47f06eadf7786e383bb6a26
  AboutR 45557e2d71cdedccccd494c97945bace
  AdminR 4343bf4562c0fd8448f8ba00a9eae529
  Balada 1b4c030f384d44ec4de7ccbef44ec3a7
  CadcategoriaR 162421ec8f2267942f757de343074f0d
  CaddiaR 6b6430d77da15645ce9ca1ab4cf30374
  CadestabR a3b5eb78ef48bfde4e88b47a4babc1ac
  CadfaixaprecoR c472d20db5e32f4c301bf543df817e1a
  CadpessoaR 49d5b6c098c984aaeb34244edcfbb77c
  CadsubcategR 711427c57417da2fc8f26b79a543b848
  Categoria_estab 673db4a2d427458d9da433c83b2ac55e
  Categoria_estab 834a15368fbb626ca09959dc352a937d
  Categoria_estabNome_categoria d9a0f1d59a50087c2bff1846ec1fd697
  Classificacao_estabNome_classificacao 86df1cef10a8eff10cf9bb0056f653cb
  Dia_evento 61cb4e254e8049fd7e85884e7307f049
  Dia_evento 8e1ab49ddcb1a2d0647a019e207b55c7
  Dia_eventoDc_dia 38dd45443d983f18a74c8055cf9812fe
  ErroR d6b1bddc2e057df5813c196716165c38
  Estabelecimento 5808e2196543515f8e84abd60b759ff6
  Estabelecimento 0a616000469dae6930779c0f1673ad5e
  EstabelecimentoNome_estab d2520c0d91faf66c8df895a5930f8577
  Faixa_preco 1429deb8be98c5a887094606ea440373
  Faixa_preco 64f0f89676c78a44af12af205c42fddd
  Faixa_precoNome_faixa_preco 9b0ead10b826adb4ab30bc7b1ff6c010
  Form e79d1fac4727f407782b5f70f6bd5b7d
  Handler ff5683d6e46513b5bd99ab01653e2a86
  HomeR 78e830634c26b9bb717051d236f45e9e
  LoginR 033085026da9777d2218c901171381f6
  LogoutR 55eb1f4d2e53dbcc2f66a6deddf85929
  PerfilR 937c3ee81824614dff22b4df1d26b3c1
  Pessoas dacef15a07c0c6809a74a99cad3b6577
  Pessoas a76db50578ac8fef20d0adddf32ed566
  PessoasEmail 98b617fe424aa422aa679a9ab571c35a
  PessoasId b1d316a640966d02beac1c53109013aa
  PessoasSenha c97625643a5378684dbf7652efd6cf41
  Sub_categ_estab b71ddaa7865f126a7bb2b2ec0c9e07c6
  Sub_categ_estab 14a3968153a32d6230d0ee51c83affb9
  Sub_categ_estabNome_sub_categ 099e782a3e6767dd967d8ce79d845fca
  categoria_estabNome_categoria d7adf7fcced1cbe621c06e3347153b05
  classificacao_estabNome_classificacao 38a92694f7f12c5ba29d32bfc715e1cb
  dia_eventoDc_dia 6343de59ae5b9ea29ae1b8d676111232
  estabelecimentoNome_estab 346a9c8850597fabaa867057a20a6675
  faixa_precoNome_faixa_preco 3ebb266c93ca16b41f40cb93e7b96234
  pessoasLogin 8ce2ecc01b5b2c535c247c7b4b78e787
  pessoasNome 30ab85ca2d1ebd917b8b352e29bb6aa6
  sub_categ_estabNome_sub_categ bb88d0f529ca6b1635f6138b6fab56b6
import  -/  Rotas c80766cc5c2afec3c489bc99fe37eef3
  exports: 8be7a049d94b1767de4b5f80575e032b
  pRoutes 55103226a5034017cdbe6f3453fc9964
import  -/  monad-logger-0.3.18@monad_5Adv9Hf1fONCeS01xDfKe7:Control.Monad.Logger 81fdae6370cfcba4c707991affdd9335
import  -/  path-pieces-0.2.1@pathp_4qW9xznk5mC6aJZVVgmWEO:Web.PathPieces e7a246921fcfef213af85b6de92fc54c
import  -/  persistent-2.2.4.1@persi_DNWQ1fABpkG7SIGjkPAoVL:Database.Persist 180e79e34f196720918955b2b484cd93
import  -/  persistent-2.2.4.1@persi_DNWQ1fABpkG7SIGjkPAoVL:Database.Persist.Class.PersistEntity 5eb8f78ed08e3d1cc2eb03a542ee8ef5
import  -/  persistent-2.2.4.1@persi_DNWQ1fABpkG7SIGjkPAoVL:Database.Persist.Class.PersistQuery 2b12376c014d739fb931ca682ace638c
import  -/  persistent-2.2.4.1@persi_DNWQ1fABpkG7SIGjkPAoVL:Database.Persist.Class.PersistStore 19578d4a470dc95e7c983b258734668b
import  -/  persistent-2.2.4.1@persi_DNWQ1fABpkG7SIGjkPAoVL:Database.Persist.Sql.Orphan.PersistStore 0a06b59de39b78fb9c25f28885d3b285
import  -/  persistent-postgresql-2.2.2@persi_EzrtUBM22f5BF3Kdnm31Oz:Database.Persist.Postgresql e3cee4494ec0b41d091dfbfa53647399
import  -/  shakespeare-2.0.8.1@shake_HPgllHDhOeNKeID3lIYZet:Text.Cassius aa613b98fc667e8306c50662f383651f
import  -/  shakespeare-2.0.8.1@shake_HPgllHDhOeNKeID3lIYZet:Text.Lucius 6a7d45a36131f7c945150a1a68fb957a
import  -/  text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text 677c532e2dd56476a11a0a8a53880ce7
import  -/  text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Internal d9b6b9a9dd535595b612aea5738b7466
import  -/  wai-3.2.1@wai_9edbdKSIJ67EotPYC07Pm5:Network.Wai.Internal c94cac656eee982fa1e36c81ceaa3aaf
import  -/  yesod-core-1.4.20.1@yesod_9jLiWBvGPHW5LdxkUxjL88:Yesod.Core.Class.Dispatch 9efa014da7db9ea2643ef9b6013368bc
import  -/  yesod-core-1.4.20.1@yesod_9jLiWBvGPHW5LdxkUxjL88:Yesod.Core.Class.Yesod e0b32da768aac32a5b908402d95fa4b4
import  -/  yesod-core-1.4.20.1@yesod_9jLiWBvGPHW5LdxkUxjL88:Yesod.Core.Handler faf894fb8d5127174e21c5e5ba5d9c37
import  -/  yesod-core-1.4.20.1@yesod_9jLiWBvGPHW5LdxkUxjL88:Yesod.Core.Internal.Run bed196a7849a8cb603b99143837e8073
import  -/  yesod-core-1.4.20.1@yesod_9jLiWBvGPHW5LdxkUxjL88:Yesod.Core.Internal.TH 7f968c8685f147b669e9c01e96081c03
import  -/  yesod-core-1.4.20.1@yesod_9jLiWBvGPHW5LdxkUxjL88:Yesod.Core.Widget 34a12ed3ff9183516ec7108dc8a5f8fa
import  -/  yesod-form-1.4.7@yesod_CXBt2wmt7ex0o9Pu0X8jby:Yesod.Form.Fields 4207f45e7d180fd1d9653dc5888247fc
import  -/  yesod-form-1.4.7@yesod_CXBt2wmt7ex0o9Pu0X8jby:Yesod.Form.Functions b0a2f4186f9d70893c256ce5bcdb5ca6
import  -/  yesod-form-1.4.7@yesod_CXBt2wmt7ex0o9Pu0X8jby:Yesod.Form.Types ad7a892cf89b163d999574176db9d126
import  -/  yesod-1.4.3@yesod_G3l0IvftpcQLS1fhy6ci93:Yesod 5be136ed9273569748acb63f2bd39620
import  -/  yesod-persistent-1.4.0.4@yesod_KDWGSyKXKmE2mrTGkSySls:Yesod.Persist.Core 96ff1ce14becc4a26d0b20a36400367f
addDependentFile "/home/ubuntu/.stack/programs/x86_64-linux/ghc-7.10.3/lib/ghc-7.10.3/include/ghcversion.h"
addDependentFile ".stack-work/dist/x86_64-linux/Cabal-1.22.5.0/build/autogen/cabal_macros.h"
addDependentFile "/usr/include/stdc-predef.h"
addDependentFile "Hamlets/home.hamlet"
b9bb3efdcc2aee11ea6d45ddc7ebe9d0
  $fYesodDispatchBalada ::
    Yesod.Core.Class.Dispatch.YesodDispatch Foundation.Balada
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foundation.Balada
                  Foundation.$fYesodBalada
                  Handlers.$fYesodDispatchBalada_$cyesodDispatch -}
b25aae0261a9dc3b454fddde7a05e997
  $fYesodDispatchBalada_$cyesodDispatch ::
    Yesod.Core.Types.YesodRunnerEnv Foundation.Balada
    -> Network.Wai.Application
  {- Arity: 2,
     Strictness: <L,U(U,U,U,U,C(U(U,1*U(U,U,U))))><S(LLLLLLLSLLLLLLLL),1*U(U(U,U,U,U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Yesod.Core.Types.YesodRunnerEnv Foundation.Balada
                   w1 :: Network.Wai.Internal.Request ->
                 case w1 of ww { Network.Wai.Internal.Request ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ->
                 Handlers.$w$cyesodDispatch
                   w
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16 }) -}
beb235c07b391e1c7baf9fd8b5bec7b8
  $s$fApplicativeWidgetT ::
    GHC.Base.Applicative
      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)
                  Handlers.$s$fApplicativeWidgetT1
                  Handlers.$s$fApplicativeWidgetT_$s$fApplicativeWidgetT_$cpure
                  (Yesod.Core.Types.$fApplicativeWidgetT_$c<*>
                     @ Foundation.Balada
                     @ GHC.Types.IO
                     Handlers.$s$fApplicativeWidgetT1
                     GHC.Base.$fMonadIO)
                  Handlers.$s$fApplicativeWidgetT_$s$fApplicativeWidgetT_$c*>
                  Handlers.$s$fApplicativeWidgetT_$s$fApplicativeWidgetT_$c<* -}
f417aaa24704e35636596941040475f8
  $s$fApplicativeWidgetT1 ::
    GHC.Base.Functor
      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (Yesod.Core.Class.Yesod.$s$fFunctorWidgetT @ Foundation.Balada) -}
88af87aa758890058beb7322db2b7bbe
  $s$fApplicativeWidgetT_$s$fApplicativeWidgetT_$c*> ::
    Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO a
    -> Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO b
    -> Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO b
  {- Arity: 2, Strictness: <L,C(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a36
                   @ b
                   eta :: Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO a36
                   eta2 :: Yesod.Core.Types.WidgetT
                             Foundation.Balada GHC.Types.IO b ->
                 Yesod.Core.Types.$fApplicativeWidgetT_$c<*>
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   Handlers.$s$fApplicativeWidgetT1
                   GHC.Base.$fMonadIO
                   @ b
                   @ b
                   (Yesod.Core.Class.Yesod.$s$fFunctorWidgetT_$s$fFunctorWidgetT_$c<$
                      @ Foundation.Balada
                      @ (b -> b)
                      @ a36
                      (GHC.Base.id @ b)
                      eta)
                   eta2) -}
a228449eb2227a23da513820df91e4ea
  $s$fApplicativeWidgetT_$s$fApplicativeWidgetT_$c<* ::
    Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO a
    -> Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO b
    -> Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO a
  {- Arity: 2, Strictness: <L,C(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a36
                   @ b
                   eta :: Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO a36
                   eta2 :: Yesod.Core.Types.WidgetT
                             Foundation.Balada GHC.Types.IO b ->
                 Yesod.Core.Types.$fApplicativeWidgetT_$c<*>
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   Handlers.$s$fApplicativeWidgetT1
                   GHC.Base.$fMonadIO
                   @ b
                   @ a36
                   (Yesod.Core.Types.$fFunctorWidgetT_$cfmap
                      @ Foundation.Balada
                      @ GHC.Types.IO
                      GHC.Base.$fMonadIO
                      @ a36
                      @ (b -> a36)
                      (GHC.Base.const @ a36 @ b)
                      eta)
                   eta2) -}
5b44fe3bc266d261891058f875792e20
  $s$fApplicativeWidgetT_$s$fApplicativeWidgetT_$cpure ::
    a -> Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a36
                   a37 :: a36
                   eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (GHC.Base.returnIO
                    @ (a36,
                       Yesod.Core.Types.GWData
                         (Yesod.Routes.Class.Route Foundation.Balada))
                    (a37,
                     Yesod.Core.Types.$fApplicativeWidgetT_$cmempty
                       @ (Yesod.Routes.Class.Route Foundation.Balada)))
                   `cast`
                 (GHC.Types.NTCo:IO[0]
                      <(a36,
                        Yesod.Core.Types.GWData
                          (Yesod.Routes.Class.Route Foundation.Balada))>_R)
                   eta2)
                  `cast`
                (forall a36.
                 <a36>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0]
                                         <(a36,
                                           Yesod.Core.Types.GWData
                                             (Yesod.Routes.Class.Route Foundation.Balada))>_R))
                          (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                    <Foundation.Balada>_N <GHC.Types.IO>_N <a36>_N))) -}
93707b011b155aff2198cc0cd8c6f69e
  $s$fMonadBasebWidgetT ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO
      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.IO
                  @ (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)
                  GHC.Base.$fApplicativeIO
                  Handlers.$s$fMonadBasebWidgetT3
                  GHC.Base.$fMonadIO
                  Handlers.$s$fMonadBasebWidgetT1
                  (Yesod.Core.Types.$fMonadBasebWidgetT_$cliftBase
                     @ GHC.Types.IO
                     @ Foundation.Balada
                     @ GHC.Types.IO
                     GHC.Base.$fApplicativeIO
                     Handlers.$s$fMonadBasebWidgetT3
                     GHC.Base.$fMonadIO
                     Handlers.$s$fMonadBasebWidgetT1
                     Control.Monad.Base.$fMonadBaseIOIO) -}
f894b0f5bae44263764d30b965c52490
  $s$fMonadBasebWidgetT1 ::
    GHC.Base.Monad
      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Handlers.$s$fMonadBasebWidgetT_$s$fMonadWidgetT -}
9a9af91e874fd37a409a070afae75897
  $s$fMonadBasebWidgetT2 ::
    GHC.Base.String
    -> Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO a
  {- Arity: 1, Strictness: <B,U>b,
     Unfolding: InlineRule (1, True, True)
                (\ @ a36 eta :: [GHC.Types.Char] ->
                 GHC.Err.error
                   @ (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO a36)
                   eta) -}
f06d21fc6cb82479ae91ef9cf19ee477
  $s$fMonadBasebWidgetT3 ::
    GHC.Base.Applicative
      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Handlers.$s$fApplicativeWidgetT -}
ae8e431f1deb58f2c5e9d3209b17c89d
  $s$fMonadBasebWidgetT_$s$fMonadWidgetT ::
    GHC.Base.Monad
      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)
                  Handlers.$s$fMonadBasebWidgetT3
                  (Yesod.Core.Types.$fMonadWidgetT_$c>>=
                     @ Foundation.Balada
                     @ GHC.Types.IO
                     Handlers.$s$fMonadBasebWidgetT3
                     GHC.Base.$fMonadIO)
                  (Yesod.Core.Types.$fMonadWidgetT_$c>>
                     @ Foundation.Balada
                     @ GHC.Types.IO
                     Handlers.$s$fMonadBasebWidgetT3
                     GHC.Base.$fMonadIO)
                  Handlers.$s$fApplicativeWidgetT_$s$fApplicativeWidgetT_$cpure
                  Handlers.$s$fMonadBasebWidgetT2 -}
51e5a6ac650678df5396cbb4eba7febe
  $s$fMonadHandlerWidgetT ::
    Yesod.Core.Class.Handler.MonadHandler
      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)
                  Handlers.$s$fMonadHandlerWidgetT2
                  (Yesod.Core.Class.Handler.$fMonadHandlerWidgetT_$cliftHandlerT
                     @ Foundation.Balada
                     @ GHC.Types.IO
                     Handlers.$s$fMonadHandlerWidgetT2
                     Handlers.$s$fMonadHandlerWidgetT1) -}
6db210b16fde3311bea5dcc3b512b7ec
  $s$fMonadHandlerWidgetT1 ::
    Control.Monad.Trans.Resource.MonadResourceBase GHC.Types.IO
  {- Strictness: m,
     Unfolding: ((Control.Monad.Trans.Control.$fMonadBaseControlIOIO,
                  Control.Monad.Catch.$fMonadThrowIO,
                  Control.Monad.Base.$fMonadBaseIOIO,
                  Control.Monad.IO.Class.$fMonadIOIO,
                  GHC.Base.$fApplicativeIO)) -}
b33906218c70756cec002155923d1b8a
  $s$fMonadHandlerWidgetT2 ::
    Control.Monad.Trans.Resource.Internal.MonadResource
      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Handlers.$s$fMonadHandlerWidgetT_$s$fMonadResourceWidgetT -}
55e4c34041b3f03a50b0a8ba6f280653
  $s$fMonadHandlerWidgetT3 ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO
      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Handlers.$s$fMonadBasebWidgetT -}
a05b816339bc9fe0158337d5b12b7e5c
  $s$fMonadHandlerWidgetT4 ::
    Control.Monad.IO.Class.MonadIO
      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Handlers.$s$fMonadHandlerWidgetT_$s$fMonadIOWidgetT -}
266f3e6094db637e99ae9010f9561d69
  $s$fMonadHandlerWidgetT5 ::
    Control.Monad.Catch.MonadThrow
      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Handlers.$s$fMonadHandlerWidgetT_$s$fMonadThrowWidgetT -}
59ad0453cb06ff88d461f4fa9f553c9b
  $s$fMonadHandlerWidgetT_$s$fMonadIOWidgetT ::
    Control.Monad.IO.Class.MonadIO
      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)
                  Handlers.$s$fMonadBasebWidgetT1
                  (Yesod.Core.Types.$fMonadIOWidgetT_$cliftIO
                     @ Foundation.Balada
                     @ GHC.Types.IO
                     Handlers.$s$fMonadBasebWidgetT1
                     Control.Monad.IO.Class.$fMonadIOIO) -}
ab4fd4bf999dba2de0c72398543564fd
  $s$fMonadHandlerWidgetT_$s$fMonadResourceWidgetT ::
    Control.Monad.Trans.Resource.Internal.MonadResource
      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)
                  Handlers.$s$fMonadHandlerWidgetT5
                  Handlers.$s$fMonadHandlerWidgetT4
                  Handlers.$s$fMonadBasebWidgetT3
                  Handlers.$s$fMonadHandlerWidgetT3
                  (Yesod.Core.Types.$fMonadResourceWidgetT_$cliftResourceT
                     @ Foundation.Balada
                     @ GHC.Types.IO
                     Handlers.$s$fMonadHandlerWidgetT5
                     Handlers.$s$fMonadHandlerWidgetT4
                     Handlers.$s$fMonadBasebWidgetT3
                     Handlers.$s$fMonadHandlerWidgetT3
                     GHC.Base.$fApplicativeIO
                     Control.Monad.IO.Class.$fMonadIOIO
                     Control.Monad.Base.$fMonadBaseIOIO
                     Control.Monad.Catch.$fMonadThrowIO) -}
b99202ad0b02b7ab93a8ec0d33a55c51
  $s$fMonadHandlerWidgetT_$s$fMonadThrowWidgetT ::
    Control.Monad.Catch.MonadThrow
      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)
                  Handlers.$s$fMonadBasebWidgetT1
                  (Yesod.Core.Types.$fMonadThrowWidgetT_$cthrowM
                     @ Foundation.Balada
                     @ GHC.Types.IO
                     Handlers.$s$fMonadBasebWidgetT1
                     Control.Monad.Catch.$fMonadThrowIO) -}
0d5e7ef0492d9ce2f2fb300b51588208
  $w$cyesodDispatch ::
    Yesod.Core.Types.YesodRunnerEnv Foundation.Balada
    -> Network.HTTP.Types.Method.Method
    -> Network.HTTP.Types.Version.HttpVersion
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Network.HTTP.Types.Header.RequestHeaders
    -> GHC.Types.Bool
    -> Network.Socket.Types.SockAddr
    -> [Data.Text.Internal.Text]
    -> Network.HTTP.Types.URI.Query
    -> GHC.Types.IO Data.ByteString.Internal.ByteString
    -> Data.Vault.Lazy.Vault
    -> Network.Wai.Internal.RequestBodyLength
    -> GHC.Base.Maybe Data.ByteString.Internal.ByteString
    -> GHC.Base.Maybe Data.ByteString.Internal.ByteString
    -> GHC.Base.Maybe Data.ByteString.Internal.ByteString
    -> GHC.Base.Maybe Data.ByteString.Internal.ByteString
    -> (Network.Wai.Internal.Response
        -> GHC.Types.IO Network.Wai.Internal.ResponseReceived)
    -> GHC.Types.IO Network.Wai.Internal.ResponseReceived
  {- Arity: 17,
     Strictness: <L,U(U,U,U,U,C(U(U,1*U(U,U,U))))><L,U(U,U,U,U)><L,U><L,U><L,U><L,U><L,U><L,U><S,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
3af30a48c30dce9fcba8abc2f8e80590
  categs ::
    (Yesod.Persist.Core.YesodPersist site,
     Yesod.Persist.Core.YesodPersistBackend site
     ~ Database.Persist.Sql.Types.SqlBackend) =>
    Yesod.Core.Types.HandlerT
      site
      GHC.Types.IO
      (Yesod.Form.Fields.OptionList
         (Database.Persist.Class.PersistEntity.Key
            Foundation.Categoria_estab))
  {- Arity: 2, Strictness: <L,1*U(A,1*C1(U))><L,1*H>,
     Unfolding: (\ @ site
                   $dYesodPersist :: Yesod.Persist.Core.YesodPersist site
                   cobox :: Yesod.Persist.Core.YesodPersistBackend site
                            ~ Database.Persist.Sql.Types.SqlBackend ->
                 let {
                   ds :: Yesod.Core.Types.HandlerT
                           site
                           GHC.Types.IO
                           [Database.Persist.Class.PersistEntity.Entity
                              Foundation.Categoria_estab]
                   = Yesod.Persist.Core.runDB
                       @ site
                       $dYesodPersist
                       @ [Database.Persist.Class.PersistEntity.Entity
                            Foundation.Categoria_estab]
                       (case cobox of cobox1 { GHC.Types.Eq# cobox2 ->
                        (Handlers.categs10 @ site)
                          `cast`
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  (Sub cobox2)
                                  <Yesod.Core.Types.HandlerT site GHC.Types.IO>_R
                                  <[Database.Persist.Class.PersistEntity.Entity
                                      Foundation.Categoria_estab]>_N)) })
                 } in
                 (\ r :: Yesod.Core.Types.HandlerData
                           site (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case (ds
                          `cast`
                        (Yesod.Core.Types.NTCo:HandlerT[0]
                             <site>_N
                             <GHC.Types.IO>_N
                             <[Database.Persist.Class.PersistEntity.Entity
                                 Foundation.Categoria_estab]>_N)
                          r)
                         `cast`
                       (GHC.Types.NTCo:IO[0]
                            <[Database.Persist.Class.PersistEntity.Entity
                                Foundation.Categoria_estab]>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  ((Yesod.Form.Fields.optionsPairs
                      @ Data.Text.Internal.Text
                      @ (Database.Persist.Class.PersistEntity.Key
                           Foundation.Categoria_estab)
                      @ (Yesod.Core.Types.HandlerT site GHC.Types.IO)
                      (Handlers.categs2 @ site)
                      (Text.Shakespeare.I18N.$fIsStringSomeMessage_$crenderMessage
                         @ site)
                        `cast`
                      (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                                (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                     <site>_N <GHC.Types.IO>_N)
                                <Data.Text.Internal.Text>_N))
                      (GHC.Base.map
                         @ (Database.Persist.Class.PersistEntity.Entity
                              Foundation.Categoria_estab)
                         @ (Data.Text.Internal.Text,
                            Database.Persist.Class.PersistEntity.Key
                              Foundation.Categoria_estab)
                         Handlers.categs1
                         ipv1))
                     `cast`
                   (Yesod.Core.Types.NTCo:HandlerT[0]
                        <site>_N
                        <GHC.Types.IO>_N
                        <Yesod.Form.Fields.OptionList
                           (Database.Persist.Class.PersistEntity.Key
                              Foundation.Categoria_estab)>_N)
                     r)
                    `cast`
                  (GHC.Types.NTCo:IO[0]
                       <Yesod.Form.Fields.OptionList
                          (Database.Persist.Class.PersistEntity.Key
                             Foundation.Categoria_estab)>_R)
                    ipv })
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          site (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <Yesod.Form.Fields.OptionList
                                        (Database.Persist.Class.PersistEntity.Key
                                           Foundation.Categoria_estab)>_R))
                      (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                <site>_N
                                <GHC.Types.IO>_N
                                <Yesod.Form.Fields.OptionList
                                   (Database.Persist.Class.PersistEntity.Key
                                      Foundation.Categoria_estab)>_N)))) -}
35050844d1890e88d147e91313ed34ec
  categs1 ::
    Database.Persist.Class.PersistEntity.Entity
      Foundation.Categoria_estab
    -> (Data.Text.Internal.Text,
        Database.Persist.Class.PersistEntity.Key
          Foundation.Categoria_estab)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ ent :: Database.Persist.Class.PersistEntity.Entity
                            Foundation.Categoria_estab ->
                 (case ent of wild { Database.Persist.Class.PersistEntity.Entity $dPersistEntity ds1 ds2 ->
                  case ds2 of wild1 { Foundation.Categoria_estab ds4 -> ds4 } },
                  Database.Persist.Class.PersistEntity.entityKey
                    @ Foundation.Categoria_estab
                    ent)) -}
4b783c7a6dd6f2b5a1c26599d7920ccd
  categs10 ::
    Database.Persist.Sql.Types.SqlBackend
    -> Yesod.Core.Types.HandlerT
         site
         GHC.Types.IO
         [Database.Persist.Class.PersistEntity.Entity
            Foundation.Categoria_estab]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ site r1 :: Database.Persist.Sql.Types.SqlBackend ->
                 let {
                   ds :: Yesod.Core.Types.HandlerT
                           site
                           GHC.Types.IO
                           (Data.Acquire.Internal.Acquire
                              (Data.Conduit.Internal.Conduit.Source
                                 GHC.Types.IO
                                 (Database.Persist.Class.PersistEntity.Entity
                                    Foundation.Categoria_estab)))
                   = (Handlers.categs_m1 @ site)
                       `cast`
                     (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                          <Database.Persist.Sql.Types.SqlBackend>_R
                          <Yesod.Core.Types.HandlerT site GHC.Types.IO>_R
                          <Data.Acquire.Internal.Acquire
                             (Data.Conduit.Internal.Conduit.Source
                                GHC.Types.IO
                                (Database.Persist.Class.PersistEntity.Entity
                                   Foundation.Categoria_estab))>_N)
                       r1
                 } in
                 (\ r :: Yesod.Core.Types.HandlerData
                           site (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case (ds
                          `cast`
                        (Yesod.Core.Types.NTCo:HandlerT[0]
                             <site>_N
                             <GHC.Types.IO>_N
                             <Data.Acquire.Internal.Acquire
                                (Data.Conduit.Internal.Conduit.Source
                                   GHC.Types.IO
                                   (Database.Persist.Class.PersistEntity.Entity
                                      Foundation.Categoria_estab))>_N)
                          r)
                         `cast`
                       (GHC.Types.NTCo:IO[0]
                            <Data.Acquire.Internal.Acquire
                               (Data.Conduit.Internal.Conduit.Source
                                  GHC.Types.IO
                                  (Database.Persist.Class.PersistEntity.Entity
                                     Foundation.Categoria_estab))>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  (Data.Acquire.Internal.with
                     @ (Data.Conduit.Internal.Conduit.Source
                          GHC.Types.IO
                          (Database.Persist.Class.PersistEntity.Entity
                             Foundation.Categoria_estab))
                     @ GHC.Types.IO
                     @ [Database.Persist.Class.PersistEntity.Entity
                          Foundation.Categoria_estab]
                     Control.Monad.Trans.Control.$fMonadBaseControlIOIO
                     ipv1
                     (Database.Persist.Class.PersistQuery.selectList1
                        @ Foundation.Categoria_estab)
                       `cast`
                     (<Data.Conduit.Internal.Conduit.Source
                         GHC.Types.IO
                         (Database.Persist.Class.PersistEntity.Entity
                            Foundation.Categoria_estab)>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0]
                                    <[Database.Persist.Class.PersistEntity.Entity
                                        Foundation.Categoria_estab]>_R)))
                    `cast`
                  (GHC.Types.NTCo:IO[0]
                       <[Database.Persist.Class.PersistEntity.Entity
                           Foundation.Categoria_estab]>_R)
                    ipv })
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          site (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <[Database.Persist.Class.PersistEntity.Entity
                                         Foundation.Categoria_estab]>_R))
                      (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                <site>_N
                                <GHC.Types.IO>_N
                                <[Database.Persist.Class.PersistEntity.Entity
                                    Foundation.Categoria_estab]>_N)))) -}
43c7c7cdbd465ab7212929ac6e87428c
  categs11 ::
    [Database.Persist.Class.PersistEntity.SelectOpt
       Foundation.Categoria_estab]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Database.Persist.Class.PersistEntity.SelectOpt
                        Foundation.Categoria_estab)
                   Handlers.categs12
                   (GHC.Types.[]
                      @ (Database.Persist.Class.PersistEntity.SelectOpt
                           Foundation.Categoria_estab))) -}
2e2e4febb6e670c65242d4f73ef80668
  categs12 ::
    Database.Persist.Class.PersistEntity.SelectOpt
      Foundation.Categoria_estab
  {- HasNoCafRefs,
     Unfolding: (Database.Persist.Class.PersistEntity.Asc
                   @ Foundation.Categoria_estab
                   @ Data.Text.Internal.Text
                   Handlers.categs13
                     `cast`
                   (Sub (Sym (Foundation.TFCo:R:EntityFieldCategoria_estabtyp[0])) <Data.Text.Internal.Text>_N)) -}
5bfa8c19377e5997fc259f98c3ed6e55
  categs13 ::
    Foundation.R:EntityFieldCategoria_estabtyp Data.Text.Internal.Text
  {- HasNoCafRefs,
     Unfolding: (Foundation.Categoria_estabNome_categoria
                   @ Data.Text.Internal.Text
                   @~ <Data.Text.Internal.Text>_N) -}
39cfc7e0a9fd0a9850c315f8c665cc5a
  categs14 ::
    [Database.Persist.Class.PersistEntity.Filter
       Foundation.Categoria_estab]
    -> [Database.Persist.Class.PersistEntity.SelectOpt
          Foundation.Categoria_estab]
    -> Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT site GHC.Types.IO)
         (Data.Acquire.Internal.Acquire
            (Data.Conduit.Internal.Conduit.Source
               GHC.Types.IO
               (Database.Persist.Class.PersistEntity.Entity
                  Foundation.Categoria_estab)))
  {- Unfolding: (\ @ site ->
                 Database.Persist.Sql.Orphan.PersistQuery.$w$cselectSourceRes
                   @ Foundation.Categoria_estab
                   @ (Yesod.Core.Types.HandlerT site GHC.Types.IO)
                   @ GHC.Types.IO
                   Foundation.$fPersistEntityCategoria_estab
                   (Handlers.categs8 @ site)
                   Control.Monad.IO.Class.$fMonadIOIO) -}
5c907e5b0cd42627cb2498da019da482
  categs2 ::
    Yesod.Core.Class.Handler.MonadHandler
      (Yesod.Core.Types.HandlerT site GHC.Types.IO)
  {- Unfolding: (\ @ site ->
                 Yesod.Core.Class.Handler.$fMonadHandlerHandlerT
                   @ site
                   @ GHC.Types.IO
                   (Handlers.categs4 @ site)
                   (Handlers.categs3 @ site)) -}
f30c5775dc23aace39aeded1e5b46d9a
  categs3 ::
    Control.Monad.Trans.Resource.MonadResourceBase GHC.Types.IO
  {- Strictness: m,
     Unfolding: (\ @ site ->
                 (Control.Monad.Trans.Control.$fMonadBaseControlIOIO,
                  Control.Monad.Catch.$fMonadThrowIO,
                  Control.Monad.Base.$fMonadBaseIOIO,
                  Control.Monad.IO.Class.$fMonadIOIO,
                  GHC.Base.$fApplicativeIO)) -}
fae0e786913dd4c8a4262d308f498f1c
  categs4 ::
    Control.Monad.Trans.Resource.Internal.MonadResource
      (Yesod.Core.Types.HandlerT site GHC.Types.IO)
  {- Unfolding: (\ @ site ->
                 Yesod.Core.Types.$fMonadResourceHandlerT
                   @ site
                   @ GHC.Types.IO
                   (Handlers.categs9 @ site)
                   (Handlers.categs8 @ site)
                   (Handlers.categs7 @ site)
                   (Handlers.categs5 @ site)
                   Control.Monad.IO.Class.$fMonadIOIO
                   Control.Monad.Base.$fMonadBaseIOIO
                   Control.Monad.Catch.$fMonadThrowIO) -}
419ff53226c384d70f67a26c114b704a
  categs5 ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO (Yesod.Core.Types.HandlerT site GHC.Types.IO)
  {- Unfolding: (\ @ site ->
                 Yesod.Core.Types.$fMonadBasebHandlerT
                   @ GHC.Types.IO
                   @ site
                   @ GHC.Types.IO
                   GHC.Base.$fApplicativeIO
                   (Handlers.categs7 @ site)
                   GHC.Base.$fMonadIO
                   (Handlers.categs6 @ site)
                   Control.Monad.Base.$fMonadBaseIOIO) -}
00489cd8ca622a3acd8ae1e340811e1e
  categs6 ::
    GHC.Base.Monad (Yesod.Core.Types.HandlerT site GHC.Types.IO)
  {- Unfolding: (\ @ site ->
                 Yesod.Core.Types.$fMonadHandlerT
                   @ site
                   @ GHC.Types.IO
                   (Handlers.categs7 @ site)
                   GHC.Base.$fMonadIO) -}
0a6c2fa427fab8c0b0aab56f0b52fda8
  categs7 ::
    GHC.Base.Applicative (Yesod.Core.Types.HandlerT site GHC.Types.IO)
  {- Unfolding: (\ @ site ->
                 Yesod.Core.Types.$fApplicativeHandlerT
                   @ site
                   @ GHC.Types.IO
                   (Yesod.Core.Handler.$s$fFunctorHandlerT @ site)
                   GHC.Base.$fMonadIO) -}
2d4b39149d0b5fd8bab8b302726a5976
  categs8 ::
    Control.Monad.IO.Class.MonadIO
      (Yesod.Core.Types.HandlerT site GHC.Types.IO)
  {- Unfolding: (\ @ site ->
                 Yesod.Core.Types.$fMonadIOHandlerT
                   @ site
                   @ GHC.Types.IO
                   (Handlers.categs6 @ site)
                   Control.Monad.IO.Class.$fMonadIOIO) -}
66f1ad971f5c620fd1f950477300939c
  categs9 ::
    Control.Monad.Catch.MonadThrow
      (Yesod.Core.Types.HandlerT site GHC.Types.IO)
  {- Unfolding: (\ @ site ->
                 Yesod.Core.Types.$fMonadThrowHandlerT
                   @ site
                   @ GHC.Types.IO
                   (Handlers.categs6 @ site)
                   Control.Monad.Catch.$fMonadThrowIO) -}
e41703823747c9dad09e061b7e6be4e7
  categs_m1 ::
    Control.Monad.Trans.Reader.ReaderT
      Database.Persist.Sql.Types.SqlBackend
      (Yesod.Core.Types.HandlerT site GHC.Types.IO)
      (Data.Acquire.Internal.Acquire
         (Data.Conduit.Internal.Conduit.Source
            GHC.Types.IO
            (Database.Persist.Class.PersistEntity.Entity
               Foundation.Categoria_estab)))
  {- Unfolding: (\ @ site ->
                 Handlers.categs14
                   @ site
                   (GHC.Types.[]
                      @ (Database.Persist.Class.PersistEntity.Filter
                           Foundation.Categoria_estab))
                   Handlers.categs11) -}
26a0172eee0a1011a21e2d292df2aefc
  estabs ::
    (Yesod.Persist.Core.YesodPersist site,
     Yesod.Persist.Core.YesodPersistBackend site
     ~ Database.Persist.Sql.Types.SqlBackend) =>
    Yesod.Core.Types.HandlerT
      site
      GHC.Types.IO
      (Yesod.Form.Fields.OptionList
         (Database.Persist.Class.PersistEntity.Key
            Foundation.Estabelecimento))
  {- Arity: 2, Strictness: <L,1*U(A,1*C1(U))><L,1*H>,
     Unfolding: (\ @ site
                   $dYesodPersist :: Yesod.Persist.Core.YesodPersist site
                   cobox :: Yesod.Persist.Core.YesodPersistBackend site
                            ~ Database.Persist.Sql.Types.SqlBackend ->
                 let {
                   ds :: Yesod.Core.Types.HandlerT
                           site
                           GHC.Types.IO
                           [Database.Persist.Class.PersistEntity.Entity
                              Foundation.Estabelecimento]
                   = Yesod.Persist.Core.runDB
                       @ site
                       $dYesodPersist
                       @ [Database.Persist.Class.PersistEntity.Entity
                            Foundation.Estabelecimento]
                       (case cobox of cobox1 { GHC.Types.Eq# cobox2 ->
                        (Handlers.estabs2 @ site)
                          `cast`
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  (Sub cobox2)
                                  <Yesod.Core.Types.HandlerT site GHC.Types.IO>_R
                                  <[Database.Persist.Class.PersistEntity.Entity
                                      Foundation.Estabelecimento]>_N)) })
                 } in
                 (\ r :: Yesod.Core.Types.HandlerData
                           site (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case (ds
                          `cast`
                        (Yesod.Core.Types.NTCo:HandlerT[0]
                             <site>_N
                             <GHC.Types.IO>_N
                             <[Database.Persist.Class.PersistEntity.Entity
                                 Foundation.Estabelecimento]>_N)
                          r)
                         `cast`
                       (GHC.Types.NTCo:IO[0]
                            <[Database.Persist.Class.PersistEntity.Entity
                                Foundation.Estabelecimento]>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  ((Yesod.Form.Fields.optionsPairs
                      @ Data.Text.Internal.Text
                      @ (Database.Persist.Class.PersistEntity.Key
                           Foundation.Estabelecimento)
                      @ (Yesod.Core.Types.HandlerT site GHC.Types.IO)
                      (Handlers.categs2 @ site)
                      (Text.Shakespeare.I18N.$fIsStringSomeMessage_$crenderMessage
                         @ site)
                        `cast`
                      (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                                (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                     <site>_N <GHC.Types.IO>_N)
                                <Data.Text.Internal.Text>_N))
                      (GHC.Base.map
                         @ (Database.Persist.Class.PersistEntity.Entity
                              Foundation.Estabelecimento)
                         @ (Data.Text.Internal.Text,
                            Database.Persist.Class.PersistEntity.Key
                              Foundation.Estabelecimento)
                         Handlers.estabs1
                         ipv1))
                     `cast`
                   (Yesod.Core.Types.NTCo:HandlerT[0]
                        <site>_N
                        <GHC.Types.IO>_N
                        <Yesod.Form.Fields.OptionList
                           (Database.Persist.Class.PersistEntity.Key
                              Foundation.Estabelecimento)>_N)
                     r)
                    `cast`
                  (GHC.Types.NTCo:IO[0]
                       <Yesod.Form.Fields.OptionList
                          (Database.Persist.Class.PersistEntity.Key
                             Foundation.Estabelecimento)>_R)
                    ipv })
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          site (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <Yesod.Form.Fields.OptionList
                                        (Database.Persist.Class.PersistEntity.Key
                                           Foundation.Estabelecimento)>_R))
                      (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                <site>_N
                                <GHC.Types.IO>_N
                                <Yesod.Form.Fields.OptionList
                                   (Database.Persist.Class.PersistEntity.Key
                                      Foundation.Estabelecimento)>_N)))) -}
16873cf50cde4b9846bca3d069824586
  estabs1 ::
    Database.Persist.Class.PersistEntity.Entity
      Foundation.Estabelecimento
    -> (Data.Text.Internal.Text,
        Database.Persist.Class.PersistEntity.Key
          Foundation.Estabelecimento)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ ent :: Database.Persist.Class.PersistEntity.Entity
                            Foundation.Estabelecimento ->
                 (case ent of wild { Database.Persist.Class.PersistEntity.Entity $dPersistEntity ds1 ds2 ->
                  case ds2 of wild1 { Foundation.Estabelecimento ds4 ds5 ds3 ds6 ds7 ->
                  ds4 } },
                  Database.Persist.Class.PersistEntity.entityKey
                    @ Foundation.Estabelecimento
                    ent)) -}
4423f5563ec5a23e15f608c7e0849e5a
  estabs2 ::
    Database.Persist.Sql.Types.SqlBackend
    -> Yesod.Core.Types.HandlerT
         site
         GHC.Types.IO
         [Database.Persist.Class.PersistEntity.Entity
            Foundation.Estabelecimento]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ site r1 :: Database.Persist.Sql.Types.SqlBackend ->
                 let {
                   ds :: Yesod.Core.Types.HandlerT
                           site
                           GHC.Types.IO
                           (Data.Acquire.Internal.Acquire
                              (Data.Conduit.Internal.Conduit.Source
                                 GHC.Types.IO
                                 (Database.Persist.Class.PersistEntity.Entity
                                    Foundation.Estabelecimento)))
                   = (Handlers.estabs_m1 @ site)
                       `cast`
                     (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                          <Database.Persist.Sql.Types.SqlBackend>_R
                          <Yesod.Core.Types.HandlerT site GHC.Types.IO>_R
                          <Data.Acquire.Internal.Acquire
                             (Data.Conduit.Internal.Conduit.Source
                                GHC.Types.IO
                                (Database.Persist.Class.PersistEntity.Entity
                                   Foundation.Estabelecimento))>_N)
                       r1
                 } in
                 (\ r :: Yesod.Core.Types.HandlerData
                           site (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case (ds
                          `cast`
                        (Yesod.Core.Types.NTCo:HandlerT[0]
                             <site>_N
                             <GHC.Types.IO>_N
                             <Data.Acquire.Internal.Acquire
                                (Data.Conduit.Internal.Conduit.Source
                                   GHC.Types.IO
                                   (Database.Persist.Class.PersistEntity.Entity
                                      Foundation.Estabelecimento))>_N)
                          r)
                         `cast`
                       (GHC.Types.NTCo:IO[0]
                            <Data.Acquire.Internal.Acquire
                               (Data.Conduit.Internal.Conduit.Source
                                  GHC.Types.IO
                                  (Database.Persist.Class.PersistEntity.Entity
                                     Foundation.Estabelecimento))>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  (Data.Acquire.Internal.with
                     @ (Data.Conduit.Internal.Conduit.Source
                          GHC.Types.IO
                          (Database.Persist.Class.PersistEntity.Entity
                             Foundation.Estabelecimento))
                     @ GHC.Types.IO
                     @ [Database.Persist.Class.PersistEntity.Entity
                          Foundation.Estabelecimento]
                     Control.Monad.Trans.Control.$fMonadBaseControlIOIO
                     ipv1
                     (Database.Persist.Class.PersistQuery.selectList1
                        @ Foundation.Estabelecimento)
                       `cast`
                     (<Data.Conduit.Internal.Conduit.Source
                         GHC.Types.IO
                         (Database.Persist.Class.PersistEntity.Entity
                            Foundation.Estabelecimento)>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0]
                                    <[Database.Persist.Class.PersistEntity.Entity
                                        Foundation.Estabelecimento]>_R)))
                    `cast`
                  (GHC.Types.NTCo:IO[0]
                       <[Database.Persist.Class.PersistEntity.Entity
                           Foundation.Estabelecimento]>_R)
                    ipv })
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          site (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <[Database.Persist.Class.PersistEntity.Entity
                                         Foundation.Estabelecimento]>_R))
                      (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                <site>_N
                                <GHC.Types.IO>_N
                                <[Database.Persist.Class.PersistEntity.Entity
                                    Foundation.Estabelecimento]>_N)))) -}
96fc4e509cf3ce8bdd5c7d04faa483c4
  estabs3 ::
    [Database.Persist.Class.PersistEntity.SelectOpt
       Foundation.Estabelecimento]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Database.Persist.Class.PersistEntity.SelectOpt
                        Foundation.Estabelecimento)
                   Handlers.estabs4
                   (GHC.Types.[]
                      @ (Database.Persist.Class.PersistEntity.SelectOpt
                           Foundation.Estabelecimento))) -}
b616e49ab21d8338f3d87cdb1956780e
  estabs4 ::
    Database.Persist.Class.PersistEntity.SelectOpt
      Foundation.Estabelecimento
  {- HasNoCafRefs,
     Unfolding: (Database.Persist.Class.PersistEntity.Asc
                   @ Foundation.Estabelecimento
                   @ Data.Text.Internal.Text
                   Handlers.estabs5
                     `cast`
                   (Sub (Sym (Foundation.TFCo:R:EntityFieldEstabelecimentotyp[0])) <Data.Text.Internal.Text>_N)) -}
67e36adf6edf858e36f00b5aa6219fec
  estabs5 ::
    Foundation.R:EntityFieldEstabelecimentotyp Data.Text.Internal.Text
  {- HasNoCafRefs,
     Unfolding: (Foundation.EstabelecimentoNome_estab
                   @ Data.Text.Internal.Text
                   @~ <Data.Text.Internal.Text>_N) -}
df511283ccfb7da30a2bb051cc27ce0e
  estabs6 ::
    [Database.Persist.Class.PersistEntity.Filter
       Foundation.Estabelecimento]
    -> [Database.Persist.Class.PersistEntity.SelectOpt
          Foundation.Estabelecimento]
    -> Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT site GHC.Types.IO)
         (Data.Acquire.Internal.Acquire
            (Data.Conduit.Internal.Conduit.Source
               GHC.Types.IO
               (Database.Persist.Class.PersistEntity.Entity
                  Foundation.Estabelecimento)))
  {- Unfolding: (\ @ site ->
                 Database.Persist.Sql.Orphan.PersistQuery.$w$cselectSourceRes
                   @ Foundation.Estabelecimento
                   @ (Yesod.Core.Types.HandlerT site GHC.Types.IO)
                   @ GHC.Types.IO
                   Foundation.$fPersistEntityEstabelecimento
                   (Handlers.categs8 @ site)
                   Control.Monad.IO.Class.$fMonadIOIO) -}
d6a65628afd6e6a70c28a836930aded4
  estabs_m1 ::
    Control.Monad.Trans.Reader.ReaderT
      Database.Persist.Sql.Types.SqlBackend
      (Yesod.Core.Types.HandlerT site GHC.Types.IO)
      (Data.Acquire.Internal.Acquire
         (Data.Conduit.Internal.Conduit.Source
            GHC.Types.IO
            (Database.Persist.Class.PersistEntity.Entity
               Foundation.Estabelecimento)))
  {- Unfolding: (\ @ site ->
                 Handlers.estabs6
                   @ site
                   (GHC.Types.[]
                      @ (Database.Persist.Class.PersistEntity.Filter
                           Foundation.Estabelecimento))
                   Handlers.estabs3) -}
3e5ba98d77b66b8cd28b93b9ac7e4352
  formCategoria :: Foundation.Form Foundation.Categoria_estab
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Handlers.formCategoria1
                  `cast`
                (<Text.Blaze.Internal.MarkupM ()>_R
                 ->_R Sym (Control.Monad.Trans.RWS.Lazy.NTCo:RWST[0]
                               <(GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                                 Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                                 [Text.Shakespeare.I18N.Lang])>_R
                               <Yesod.Form.Types.Enctype>_N
                               <Yesod.Form.Types.Ints>_N
                               <Foundation.Handler>_R
                               ((<Yesod.Form.Types.FormResult Foundation.Categoria_estab>_N,
                                 (Yesod.Core.Types.WidgetT
                                    (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                                    <GHC.Types.IO>_N
                                    <()>_N)_N))_N)) -}
1109ed756071d3aba0bec0ffb86d7097
  formCategoria1 ::
    Text.Blaze.Internal.Markup
    -> (GHC.Base.Maybe
          (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
        Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
        [Text.Shakespeare.I18N.Lang])
    -> Yesod.Form.Types.Ints
    -> Foundation.Handler
         ((Yesod.Form.Types.FormResult Foundation.Categoria_estab,
           Yesod.Core.Types.WidgetT
             (Yesod.Core.Class.Handler.HandlerSite Foundation.Handler)
             GHC.Types.IO
             ()),
          Yesod.Form.Types.Ints,
          Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta2 :: Text.Blaze.Internal.Markup
                   eta3 :: (GHC.Base.Maybe
                              (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                            Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                            [Text.Shakespeare.I18N.Lang])
                   eta4 :: Yesod.Form.Types.Ints ->
                 Yesod.Form.Functions.renderDivs2
                   @ Foundation.Handler
                   @ Foundation.Categoria_estab
                   Foundation.$fYesodBalada_$s$fMonadHandlerT
                   GHC.Types.True
                   Handlers.formCategoria2
                     `cast`
                   (Sym (Yesod.Form.Types.NTCo:AForm[0]
                             <Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO>_N
                             <Foundation.Categoria_estab>_N))
                   eta2
                   eta3
                   eta4) -}
f5ab37b5507955970063e0a27224e88d
  formCategoria2 ::
    (Yesod.Core.Class.Handler.HandlerSite
       (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
     [Data.Text.Internal.Text])
    -> GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
    -> Yesod.Form.Types.Ints
    -> Yesod.Core.Types.HandlerT
         Foundation.Balada
         GHC.Types.IO
         (Yesod.Form.Types.FormResult Foundation.Categoria_estab,
          [Yesod.Form.Types.FieldView
             (Yesod.Core.Class.Handler.HandlerSite
                (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
          -> [Yesod.Form.Types.FieldView
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
          Yesod.Form.Types.Ints,
          Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: (\ eta :: (Yesod.Core.Class.Handler.HandlerSite
                             (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
                           [Data.Text.Internal.Text])
                   eta2 :: GHC.Base.Maybe
                             (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
                   eta3 :: Yesod.Form.Types.Ints ->
                 let {
                   ds :: Yesod.Core.Types.HandlerT
                           Foundation.Balada
                           GHC.Types.IO
                           (Yesod.Form.Types.FormResult Data.Text.Internal.Text,
                            [Yesod.Form.Types.FieldView
                               (Yesod.Core.Class.Handler.HandlerSite
                                  (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
                            -> [Yesod.Form.Types.FieldView
                                  (Yesod.Core.Class.Handler.HandlerSite
                                     (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
                            Yesod.Form.Types.Ints,
                            Yesod.Form.Types.Enctype)
                   = Handlers.formCategoria_ds
                       `cast`
                     (Yesod.Form.Types.NTCo:AForm[0]
                          <Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO>_N
                          <Data.Text.Internal.Text>_N)
                       eta
                       eta2
                       eta3
                 } in
                 (\ r :: Yesod.Core.Types.HandlerData
                           Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case (ds
                          `cast`
                        (Yesod.Core.Types.NTCo:HandlerT[0]
                             <Foundation.Balada>_N
                             <GHC.Types.IO>_N
                             <(Yesod.Form.Types.FormResult Data.Text.Internal.Text,
                               [Yesod.Form.Types.FieldView
                                  (Yesod.Core.Class.Handler.HandlerSite
                                     (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
                               -> [Yesod.Form.Types.FieldView
                                     (Yesod.Core.Class.Handler.HandlerSite
                                        (Yesod.Core.Types.HandlerT
                                           Foundation.Balada GHC.Types.IO))],
                               Yesod.Form.Types.Ints,
                               Yesod.Form.Types.Enctype)>_N)
                          r)
                         `cast`
                       (GHC.Types.NTCo:IO[0]
                            <(Yesod.Form.Types.FormResult Data.Text.Internal.Text,
                              [Yesod.Form.Types.FieldView
                                 (Yesod.Core.Class.Handler.HandlerSite
                                    (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
                              -> [Yesod.Form.Types.FieldView
                                    (Yesod.Core.Class.Handler.HandlerSite
                                       (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
                              Yesod.Form.Types.Ints,
                              Yesod.Form.Types.Enctype)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  (# ipv,
                     case ipv1 of wild { (,,,) w x3 y z ->
                     (case w of wild1 {
                        Yesod.Form.Types.FormMissing
                        -> Yesod.Form.Types.FormMissing @ Foundation.Categoria_estab
                        Yesod.Form.Types.FormFailure errs
                        -> Yesod.Form.Types.FormFailure @ Foundation.Categoria_estab errs
                        Yesod.Form.Types.FormSuccess a36
                        -> Yesod.Form.Types.FormSuccess
                             @ Foundation.Categoria_estab
                             (case a36 of dt { Data.Text.Internal.Text ipv2 ipv3 ipv4 ->
                              Foundation.Categoria_estab dt }) },
                      x3,
                      y,
                      z) } #) })
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <(Yesod.Form.Types.FormResult Foundation.Categoria_estab,
                                       [Yesod.Form.Types.FieldView
                                          (Yesod.Core.Class.Handler.HandlerSite
                                             (Yesod.Core.Types.HandlerT
                                                Foundation.Balada GHC.Types.IO))]
                                       -> [Yesod.Form.Types.FieldView
                                             (Yesod.Core.Class.Handler.HandlerSite
                                                (Yesod.Core.Types.HandlerT
                                                   Foundation.Balada GHC.Types.IO))],
                                       Yesod.Form.Types.Ints,
                                       Yesod.Form.Types.Enctype)>_R))
                      (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                <Foundation.Balada>_N
                                <GHC.Types.IO>_N
                                <(Yesod.Form.Types.FormResult Foundation.Categoria_estab,
                                  [Yesod.Form.Types.FieldView
                                     (Yesod.Core.Class.Handler.HandlerSite
                                        (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
                                  -> [Yesod.Form.Types.FieldView
                                        (Yesod.Core.Class.Handler.HandlerSite
                                           (Yesod.Core.Types.HandlerT
                                              Foundation.Balada GHC.Types.IO))],
                                  Yesod.Form.Types.Ints,
                                  Yesod.Form.Types.Enctype)>_N)))) -}
320bcb8f99f1529fecc9b6e59a9fe6ce
  formCategoria3 :: Yesod.Form.Types.FieldSettings Foundation.Balada
  {- Unfolding: (Yesod.Form.Types.FieldSettings
                   @ Foundation.Balada
                   Handlers.formCategoria4
                   (GHC.Base.Nothing
                      @ (Text.Shakespeare.I18N.SomeMessage Foundation.Balada))
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Types.[]
                      @ (Data.Text.Internal.Text, Data.Text.Internal.Text))) -}
f4cf3a906a907eb80eec3e49fdba9173
  formCategoria4 ::
    Text.Shakespeare.I18N.SomeMessage Foundation.Balada
  {- Unfolding: (Text.Shakespeare.I18N.SomeMessage
                   @ Foundation.Balada
                   @ Data.Text.Internal.Text
                   (Text.Shakespeare.I18N.$fIsStringSomeMessage_$crenderMessage
                      @ Foundation.Balada)
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Data.Text.Internal.Text>_N))
                   Handlers.formCategoria5) -}
252b33e554a810c27f5149d87785acfa
  formCategoria5 :: Data.Text.Internal.Text
  {- Unfolding: (GHC.ST.runSTRep
                   @ Data.Text.Internal.Text
                   Handlers.formCategoria6) -}
a389f952cc611a69dd55e25a70d0f507
  formCategoria6 ::
    GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                 case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                 Text.Shakespeare.I18N.$fIsStringSomeMessage2
                   @ s1
                   (Data.Text.Array.MArray @ s1 ipv1)
                   Text.Shakespeare.I18N.$fIsStringSomeMessage1
                   Handlers.formCategoria7
                   0
                   ipv }) -}
9acd3cb2687f0ebeb0fe82651419860a
  formCategoria7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Categoria: "#) -}
1a9bf7f7039a709e98b1a75ad9210b82
  formCategoria8 ::
    Yesod.Form.Types.Field Foundation.Handler Data.Text.Internal.Text
  {- Unfolding: (Yesod.Form.Types.Field
                   @ Foundation.Handler
                   @ Data.Text.Internal.Text
                   Handlers.formCategoria9
                   (Yesod.Form.Fields.textField1 @ Foundation.Handler)
                   Yesod.Form.Types.UrlEncoded) -}
766e05d11db784093fd2b5604ae54b59
  formCategoria9 ::
    [Data.Text.Internal.Text]
    -> [Yesod.Core.Types.FileInfo]
    -> Foundation.Handler
         (Data.Either.Either
            (Text.Shakespeare.I18N.SomeMessage
               (Yesod.Core.Class.Handler.HandlerSite Foundation.Handler))
            (GHC.Base.Maybe Data.Text.Internal.Text))
  {- Arity: 2,
     Unfolding: (\ w3 :: [Data.Text.Internal.Text]
                   w4 :: [Yesod.Core.Types.FileInfo][OneShot] ->
                 Yesod.Form.Functions.$wparseHelperGen
                   @ Yesod.Form.Types.FormMessage
                   @ Data.Text.Internal.Text
                   @ Foundation.Handler
                   @ (Yesod.Core.Class.Handler.HandlerSite Foundation.Handler)
                   Foundation.$fYesodBalada_$s$fMonadHandlerT
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)
                             <Yesod.Form.Types.FormMessage>_N))
                   (Data.Either.Right
                      @ Yesod.Form.Types.FormMessage
                      @ Data.Text.Internal.Text)
                   w3) -}
c1b5eab4bb29318ff15315b76619fdce
  formCategoria_ds ::
    Yesod.Form.Types.AForm
      (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
      Data.Text.Internal.Text
  {- Unfolding: (Yesod.Form.Functions.areq
                   @ Foundation.Handler
                   @ Data.Text.Internal.Text
                   @ Foundation.Balada
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Yesod.Form.Types.FormMessage>_N))
                   (GHC.Types.Eq#
                      @ *
                      @ (Yesod.Core.Class.Handler.HandlerSite
                           (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))
                      @ Foundation.Balada
                      @~ (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formCategoria8
                   Handlers.formCategoria3
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)) -}
305df444d10c0c1420549f4f9e69fa53
  formDia :: Foundation.Form Foundation.Dia_evento
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Handlers.formDia1
                  `cast`
                (<Text.Blaze.Internal.MarkupM ()>_R
                 ->_R Sym (Control.Monad.Trans.RWS.Lazy.NTCo:RWST[0]
                               <(GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                                 Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                                 [Text.Shakespeare.I18N.Lang])>_R
                               <Yesod.Form.Types.Enctype>_N
                               <Yesod.Form.Types.Ints>_N
                               <Foundation.Handler>_R
                               ((<Yesod.Form.Types.FormResult Foundation.Dia_evento>_N,
                                 (Yesod.Core.Types.WidgetT
                                    (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                                    <GHC.Types.IO>_N
                                    <()>_N)_N))_N)) -}
032169740da188d343fddebefed3b7ae
  formDia1 ::
    Text.Blaze.Internal.Markup
    -> (GHC.Base.Maybe
          (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
        Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
        [Text.Shakespeare.I18N.Lang])
    -> Yesod.Form.Types.Ints
    -> Foundation.Handler
         ((Yesod.Form.Types.FormResult Foundation.Dia_evento,
           Yesod.Core.Types.WidgetT
             (Yesod.Core.Class.Handler.HandlerSite Foundation.Handler)
             GHC.Types.IO
             ()),
          Yesod.Form.Types.Ints,
          Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta2 :: Text.Blaze.Internal.Markup
                   eta3 :: (GHC.Base.Maybe
                              (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                            Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                            [Text.Shakespeare.I18N.Lang])
                   eta4 :: Yesod.Form.Types.Ints ->
                 Yesod.Form.Functions.renderDivs2
                   @ Foundation.Handler
                   @ Foundation.Dia_evento
                   Foundation.$fYesodBalada_$s$fMonadHandlerT
                   GHC.Types.True
                   Handlers.formDia2
                     `cast`
                   (Sym (Yesod.Form.Types.NTCo:AForm[0]
                             <Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO>_N
                             <Foundation.Dia_evento>_N))
                   eta2
                   eta3
                   eta4) -}
65458d74cc30869c96ddd8a663f56855
  formDia2 ::
    (Yesod.Core.Class.Handler.HandlerSite
       (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
     [Data.Text.Internal.Text])
    -> GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
    -> Yesod.Form.Types.Ints
    -> Yesod.Core.Types.HandlerT
         Foundation.Balada
         GHC.Types.IO
         (Yesod.Form.Types.FormResult Foundation.Dia_evento,
          [Yesod.Form.Types.FieldView
             (Yesod.Core.Class.Handler.HandlerSite
                (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
          -> [Yesod.Form.Types.FieldView
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
          Yesod.Form.Types.Ints,
          Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: (\ eta :: (Yesod.Core.Class.Handler.HandlerSite
                             (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
                           [Data.Text.Internal.Text])
                   eta2 :: GHC.Base.Maybe
                             (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
                   eta3 :: Yesod.Form.Types.Ints ->
                 let {
                   ds :: Yesod.Core.Types.HandlerT
                           Foundation.Balada
                           GHC.Types.IO
                           (Yesod.Form.Types.FormResult Data.Text.Internal.Text,
                            [Yesod.Form.Types.FieldView
                               (Yesod.Core.Class.Handler.HandlerSite
                                  (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
                            -> [Yesod.Form.Types.FieldView
                                  (Yesod.Core.Class.Handler.HandlerSite
                                     (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
                            Yesod.Form.Types.Ints,
                            Yesod.Form.Types.Enctype)
                   = Handlers.formDia_ds
                       `cast`
                     (Yesod.Form.Types.NTCo:AForm[0]
                          <Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO>_N
                          <Data.Text.Internal.Text>_N)
                       eta
                       eta2
                       eta3
                 } in
                 (\ r :: Yesod.Core.Types.HandlerData
                           Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case (ds
                          `cast`
                        (Yesod.Core.Types.NTCo:HandlerT[0]
                             <Foundation.Balada>_N
                             <GHC.Types.IO>_N
                             <(Yesod.Form.Types.FormResult Data.Text.Internal.Text,
                               [Yesod.Form.Types.FieldView
                                  (Yesod.Core.Class.Handler.HandlerSite
                                     (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
                               -> [Yesod.Form.Types.FieldView
                                     (Yesod.Core.Class.Handler.HandlerSite
                                        (Yesod.Core.Types.HandlerT
                                           Foundation.Balada GHC.Types.IO))],
                               Yesod.Form.Types.Ints,
                               Yesod.Form.Types.Enctype)>_N)
                          r)
                         `cast`
                       (GHC.Types.NTCo:IO[0]
                            <(Yesod.Form.Types.FormResult Data.Text.Internal.Text,
                              [Yesod.Form.Types.FieldView
                                 (Yesod.Core.Class.Handler.HandlerSite
                                    (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
                              -> [Yesod.Form.Types.FieldView
                                    (Yesod.Core.Class.Handler.HandlerSite
                                       (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
                              Yesod.Form.Types.Ints,
                              Yesod.Form.Types.Enctype)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  (# ipv,
                     case ipv1 of wild { (,,,) w x3 y z ->
                     (case w of wild1 {
                        Yesod.Form.Types.FormMissing
                        -> Yesod.Form.Types.FormMissing @ Foundation.Dia_evento
                        Yesod.Form.Types.FormFailure errs
                        -> Yesod.Form.Types.FormFailure @ Foundation.Dia_evento errs
                        Yesod.Form.Types.FormSuccess a36
                        -> Yesod.Form.Types.FormSuccess
                             @ Foundation.Dia_evento
                             (case a36 of dt { Data.Text.Internal.Text ipv2 ipv3 ipv4 ->
                              Foundation.Dia_evento dt }) },
                      x3,
                      y,
                      z) } #) })
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <(Yesod.Form.Types.FormResult Foundation.Dia_evento,
                                       [Yesod.Form.Types.FieldView
                                          (Yesod.Core.Class.Handler.HandlerSite
                                             (Yesod.Core.Types.HandlerT
                                                Foundation.Balada GHC.Types.IO))]
                                       -> [Yesod.Form.Types.FieldView
                                             (Yesod.Core.Class.Handler.HandlerSite
                                                (Yesod.Core.Types.HandlerT
                                                   Foundation.Balada GHC.Types.IO))],
                                       Yesod.Form.Types.Ints,
                                       Yesod.Form.Types.Enctype)>_R))
                      (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                <Foundation.Balada>_N
                                <GHC.Types.IO>_N
                                <(Yesod.Form.Types.FormResult Foundation.Dia_evento,
                                  [Yesod.Form.Types.FieldView
                                     (Yesod.Core.Class.Handler.HandlerSite
                                        (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
                                  -> [Yesod.Form.Types.FieldView
                                        (Yesod.Core.Class.Handler.HandlerSite
                                           (Yesod.Core.Types.HandlerT
                                              Foundation.Balada GHC.Types.IO))],
                                  Yesod.Form.Types.Ints,
                                  Yesod.Form.Types.Enctype)>_N)))) -}
1e23137a6bdadc66b3d936458fa8d3db
  formDia3 :: Yesod.Form.Types.FieldSettings Foundation.Balada
  {- Unfolding: (Yesod.Form.Types.FieldSettings
                   @ Foundation.Balada
                   Handlers.formDia4
                   (GHC.Base.Nothing
                      @ (Text.Shakespeare.I18N.SomeMessage Foundation.Balada))
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Types.[]
                      @ (Data.Text.Internal.Text, Data.Text.Internal.Text))) -}
fe3b44f3d05a72b10e161dc9db88cce4
  formDia4 :: Text.Shakespeare.I18N.SomeMessage Foundation.Balada
  {- Unfolding: (Text.Shakespeare.I18N.SomeMessage
                   @ Foundation.Balada
                   @ Data.Text.Internal.Text
                   (Text.Shakespeare.I18N.$fIsStringSomeMessage_$crenderMessage
                      @ Foundation.Balada)
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Data.Text.Internal.Text>_N))
                   Handlers.formDia5) -}
cd7cc5964eb2f1de19b32ac0d4c12d54
  formDia5 :: Data.Text.Internal.Text
  {- Unfolding: (GHC.ST.runSTRep
                   @ Data.Text.Internal.Text
                   Handlers.formDia6) -}
77a709ae928d5c3bb1f151214de7602f
  formDia6 ::
    GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                 case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                 Text.Shakespeare.I18N.$fIsStringSomeMessage2
                   @ s1
                   (Data.Text.Array.MArray @ s1 ipv1)
                   Text.Shakespeare.I18N.$fIsStringSomeMessage1
                   Handlers.formDia7
                   0
                   ipv }) -}
4ad97b8fb40fdb9c73ca954594a8a233
  formDia7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Dia: "#) -}
5e28f9b883afa0a90e712f6f27927b0a
  formDia_ds ::
    Yesod.Form.Types.AForm
      (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
      Data.Text.Internal.Text
  {- Unfolding: (Yesod.Form.Functions.areq
                   @ Foundation.Handler
                   @ Data.Text.Internal.Text
                   @ Foundation.Balada
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Yesod.Form.Types.FormMessage>_N))
                   (GHC.Types.Eq#
                      @ *
                      @ (Yesod.Core.Class.Handler.HandlerSite
                           (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))
                      @ Foundation.Balada
                      @~ (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formCategoria8
                   Handlers.formDia3
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)) -}
d4673c7732513f2b629831c7363f8601
  formEstabelecimento :: Foundation.Form Foundation.Estabelecimento
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Handlers.formEstabelecimento1
                  `cast`
                (<Text.Blaze.Internal.MarkupM ()>_R
                 ->_R Sym (Control.Monad.Trans.RWS.Lazy.NTCo:RWST[0]
                               <(GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                                 Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                                 [Text.Shakespeare.I18N.Lang])>_R
                               <Yesod.Form.Types.Enctype>_N
                               <Yesod.Form.Types.Ints>_N
                               <Foundation.Handler>_R
                               ((<Yesod.Form.Types.FormResult Foundation.Estabelecimento>_N,
                                 (Yesod.Core.Types.WidgetT
                                    (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                                    <GHC.Types.IO>_N
                                    <()>_N)_N))_N)) -}
4c9ef25b247545ddbf78258177a4a256
  formEstabelecimento1 ::
    Text.Blaze.Internal.Markup
    -> (GHC.Base.Maybe
          (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
        Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
        [Text.Shakespeare.I18N.Lang])
    -> Yesod.Form.Types.Ints
    -> Foundation.Handler
         ((Yesod.Form.Types.FormResult Foundation.Estabelecimento,
           Yesod.Core.Types.WidgetT
             (Yesod.Core.Class.Handler.HandlerSite Foundation.Handler)
             GHC.Types.IO
             ()),
          Yesod.Form.Types.Ints,
          Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta2 :: Text.Blaze.Internal.Markup
                   eta3 :: (GHC.Base.Maybe
                              (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                            Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                            [Text.Shakespeare.I18N.Lang])
                   eta4 :: Yesod.Form.Types.Ints ->
                 Yesod.Form.Functions.renderDivs2
                   @ Foundation.Handler
                   @ Foundation.Estabelecimento
                   Foundation.$fYesodBalada_$s$fMonadHandlerT
                   GHC.Types.True
                   Handlers.formEstabelecimento2
                     `cast`
                   (Sym (Yesod.Form.Types.NTCo:AForm[0]
                             <Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO>_N
                             <Foundation.Estabelecimento>_N))
                   eta2
                   eta3
                   eta4) -}
b0a7516990ed29f7c03668900b8e961b
  formEstabelecimento10 ::
    Yesod.Form.Types.FieldSettings Foundation.Balada
  {- Unfolding: (Yesod.Form.Types.FieldSettings
                   @ Foundation.Balada
                   Handlers.formEstabelecimento11
                   (GHC.Base.Nothing
                      @ (Text.Shakespeare.I18N.SomeMessage Foundation.Balada))
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Types.[]
                      @ (Data.Text.Internal.Text, Data.Text.Internal.Text))) -}
eb245c70e44981fc0888c434ef6b445c
  formEstabelecimento11 ::
    Text.Shakespeare.I18N.SomeMessage Foundation.Balada
  {- Unfolding: (Text.Shakespeare.I18N.SomeMessage
                   @ Foundation.Balada
                   @ Data.Text.Internal.Text
                   (Text.Shakespeare.I18N.$fIsStringSomeMessage_$crenderMessage
                      @ Foundation.Balada)
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Data.Text.Internal.Text>_N))
                   Handlers.formEstabelecimento12) -}
7f98b5100a8398a1f56786daf1be870e
  formEstabelecimento12 :: Data.Text.Internal.Text
  {- Unfolding: (GHC.ST.runSTRep
                   @ Data.Text.Internal.Text
                   (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                    case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                    Text.Shakespeare.I18N.$fIsStringSomeMessage2
                      @ s1
                      (Data.Text.Array.MArray @ s1 ipv1)
                      Text.Shakespeare.I18N.$fIsStringSomeMessage1
                      Handlers.formEstabelecimento13
                      0
                      ipv })) -}
4248990d972eabd6d95f9ecf61b1aa6f
  formEstabelecimento13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DDD: "#) -}
b613b60892b807a6c44b7cc64696c5ea
  formEstabelecimento14 ::
    (Yesod.Core.Class.Handler.HandlerSite
       (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
     [Data.Text.Internal.Text])
    -> GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
    -> Yesod.Form.Types.Ints
    -> Yesod.Core.Types.HandlerT
         Foundation.Balada
         GHC.Types.IO
         (Yesod.Form.Types.FormResult
            (Data.Text.Internal.Text
             -> Data.Text.Internal.Text -> Foundation.Estabelecimento),
          [Yesod.Form.Types.FieldView
             (Yesod.Core.Class.Handler.HandlerSite
                (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
          -> [Yesod.Form.Types.FieldView
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
          Yesod.Form.Types.Ints,
          Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ w4 :: (Yesod.Core.Class.Handler.HandlerSite
                            (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
                          [Data.Text.Internal.Text])
                   w5 :: GHC.Base.Maybe
                           (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
                   w6 :: Yesod.Form.Types.Ints ->
                 Yesod.Form.Types.$wa
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   Foundation.$fYesodBalada_$s$fMonadHandlerT
                   @ Data.Text.Internal.Text
                   @ (Data.Text.Internal.Text
                      -> Data.Text.Internal.Text -> Foundation.Estabelecimento)
                   Handlers.formEstabelecimento20
                     `cast`
                   (Sym (Yesod.Form.Types.NTCo:AForm[0]
                             <Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO>_N
                             <Data.Text.Internal.Text
                              -> Data.Text.Internal.Text
                              -> Data.Text.Internal.Text
                              -> Foundation.Estabelecimento>_N))
                   Handlers.formEstabelecimento15
                   w4
                   w5
                   w6) -}
86d3c12706edc2d25c2a7705beb993c5
  formEstabelecimento15 ::
    Yesod.Form.Types.AForm Foundation.Handler Data.Text.Internal.Text
  {- Unfolding: (Yesod.Form.Functions.areq
                   @ Foundation.Handler
                   @ Data.Text.Internal.Text
                   @ Foundation.Balada
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Yesod.Form.Types.FormMessage>_N))
                   (GHC.Types.Eq#
                      @ *
                      @ (Yesod.Core.Class.Handler.HandlerSite
                           (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))
                      @ Foundation.Balada
                      @~ (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formCategoria8
                   Handlers.formEstabelecimento16
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)) -}
6231f952faa5b91687742c5088772e4e
  formEstabelecimento16 ::
    Yesod.Form.Types.FieldSettings Foundation.Balada
  {- Unfolding: (Yesod.Form.Types.FieldSettings
                   @ Foundation.Balada
                   Handlers.formEstabelecimento17
                   (GHC.Base.Nothing
                      @ (Text.Shakespeare.I18N.SomeMessage Foundation.Balada))
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Types.[]
                      @ (Data.Text.Internal.Text, Data.Text.Internal.Text))) -}
90a85762283a0ca3fa21e727070b03b8
  formEstabelecimento17 ::
    Text.Shakespeare.I18N.SomeMessage Foundation.Balada
  {- Unfolding: (Text.Shakespeare.I18N.SomeMessage
                   @ Foundation.Balada
                   @ Data.Text.Internal.Text
                   (Text.Shakespeare.I18N.$fIsStringSomeMessage_$crenderMessage
                      @ Foundation.Balada)
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Data.Text.Internal.Text>_N))
                   Handlers.formEstabelecimento18) -}
98ed9cce3b24018625ca485f84abf817
  formEstabelecimento18 :: Data.Text.Internal.Text
  {- Unfolding: (GHC.ST.runSTRep
                   @ Data.Text.Internal.Text
                   (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                    case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                    Text.Shakespeare.I18N.$fIsStringSomeMessage2
                      @ s1
                      (Data.Text.Array.MArray @ s1 ipv1)
                      Text.Shakespeare.I18N.$fIsStringSomeMessage1
                      Handlers.formEstabelecimento19
                      0
                      ipv })) -}
c8bc08193c47a9641c0c7f00762144ab
  formEstabelecimento19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Email: "#) -}
00e90326d3ad60c9386fe28d165d187d
  formEstabelecimento2 ::
    (Yesod.Core.Class.Handler.HandlerSite
       (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
     [Data.Text.Internal.Text])
    -> GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
    -> Yesod.Form.Types.Ints
    -> Yesod.Core.Types.HandlerT
         Foundation.Balada
         GHC.Types.IO
         (Yesod.Form.Types.FormResult Foundation.Estabelecimento,
          [Yesod.Form.Types.FieldView
             (Yesod.Core.Class.Handler.HandlerSite
                (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
          -> [Yesod.Form.Types.FieldView
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
          Yesod.Form.Types.Ints,
          Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ w4 :: (Yesod.Core.Class.Handler.HandlerSite
                            (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
                          [Data.Text.Internal.Text])
                   w5 :: GHC.Base.Maybe
                           (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
                   w6 :: Yesod.Form.Types.Ints ->
                 Yesod.Form.Types.$wa
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   Foundation.$fYesodBalada_$s$fMonadHandlerT
                   @ Data.Text.Internal.Text
                   @ Foundation.Estabelecimento
                   Handlers.formEstabelecimento8
                     `cast`
                   (Sym (Yesod.Form.Types.NTCo:AForm[0]
                             <Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO>_N
                             <Data.Text.Internal.Text -> Foundation.Estabelecimento>_N))
                   Handlers.formEstabelecimento3
                   w4
                   w5
                   w6) -}
1698ef20cc0da492878d93054c6528d8
  formEstabelecimento20 ::
    (Yesod.Core.Class.Handler.HandlerSite
       (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
     [Data.Text.Internal.Text])
    -> GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
    -> Yesod.Form.Types.Ints
    -> Yesod.Core.Types.HandlerT
         Foundation.Balada
         GHC.Types.IO
         (Yesod.Form.Types.FormResult
            (Data.Text.Internal.Text
             -> Data.Text.Internal.Text
             -> Data.Text.Internal.Text
             -> Foundation.Estabelecimento),
          [Yesod.Form.Types.FieldView
             (Yesod.Core.Class.Handler.HandlerSite
                (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
          -> [Yesod.Form.Types.FieldView
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
          Yesod.Form.Types.Ints,
          Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ w4 :: (Yesod.Core.Class.Handler.HandlerSite
                            (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
                          [Data.Text.Internal.Text])
                   w5 :: GHC.Base.Maybe
                           (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
                   w6 :: Yesod.Form.Types.Ints ->
                 Yesod.Form.Types.$wa
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   Foundation.$fYesodBalada_$s$fMonadHandlerT
                   @ Data.Text.Internal.Text
                   @ (Data.Text.Internal.Text
                      -> Data.Text.Internal.Text
                      -> Data.Text.Internal.Text
                      -> Foundation.Estabelecimento)
                   Handlers.formEstabelecimento26
                     `cast`
                   (Sym (Yesod.Form.Types.NTCo:AForm[0]
                             <Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO>_N
                             <Data.Text.Internal.Text
                              -> Data.Text.Internal.Text
                              -> Data.Text.Internal.Text
                              -> Data.Text.Internal.Text
                              -> Foundation.Estabelecimento>_N))
                   Handlers.formEstabelecimento21
                   w4
                   w5
                   w6) -}
8b5a364a3efc0449cb03974ac8c43328
  formEstabelecimento21 ::
    Yesod.Form.Types.AForm Foundation.Handler Data.Text.Internal.Text
  {- Unfolding: (Yesod.Form.Functions.areq
                   @ Foundation.Handler
                   @ Data.Text.Internal.Text
                   @ Foundation.Balada
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Yesod.Form.Types.FormMessage>_N))
                   (GHC.Types.Eq#
                      @ *
                      @ (Yesod.Core.Class.Handler.HandlerSite
                           (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))
                      @ Foundation.Balada
                      @~ (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formCategoria8
                   Handlers.formEstabelecimento22
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)) -}
76c92eb260876faf4923dd3e5a635b33
  formEstabelecimento22 ::
    Yesod.Form.Types.FieldSettings Foundation.Balada
  {- Unfolding: (Yesod.Form.Types.FieldSettings
                   @ Foundation.Balada
                   Handlers.formEstabelecimento23
                   (GHC.Base.Nothing
                      @ (Text.Shakespeare.I18N.SomeMessage Foundation.Balada))
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Types.[]
                      @ (Data.Text.Internal.Text, Data.Text.Internal.Text))) -}
c18a9f092cfbddb27cb7d0317ef675ce
  formEstabelecimento23 ::
    Text.Shakespeare.I18N.SomeMessage Foundation.Balada
  {- Unfolding: (Text.Shakespeare.I18N.SomeMessage
                   @ Foundation.Balada
                   @ Data.Text.Internal.Text
                   (Text.Shakespeare.I18N.$fIsStringSomeMessage_$crenderMessage
                      @ Foundation.Balada)
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Data.Text.Internal.Text>_N))
                   Handlers.formEstabelecimento24) -}
55e8351dbb37ea9b039548cb6c14c6a7
  formEstabelecimento24 :: Data.Text.Internal.Text
  {- Unfolding: (GHC.ST.runSTRep
                   @ Data.Text.Internal.Text
                   (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                    case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                    Text.Shakespeare.I18N.$fIsStringSomeMessage2
                      @ s1
                      (Data.Text.Array.MArray @ s1 ipv1)
                      Text.Shakespeare.I18N.$fIsStringSomeMessage1
                      Handlers.formEstabelecimento25
                      0
                      ipv })) -}
f54738fcdb7cb824bdf9e2a7450c8f0e
  formEstabelecimento25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Cidade: "#) -}
5a9e2b77457dbe0d18a3511c44d70105
  formEstabelecimento26 ::
    (Yesod.Core.Class.Handler.HandlerSite
       (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
     [Data.Text.Internal.Text])
    -> GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
    -> Yesod.Form.Types.Ints
    -> Yesod.Core.Types.HandlerT
         Foundation.Balada
         GHC.Types.IO
         (Yesod.Form.Types.FormResult
            (Data.Text.Internal.Text
             -> Data.Text.Internal.Text
             -> Data.Text.Internal.Text
             -> Data.Text.Internal.Text
             -> Foundation.Estabelecimento),
          [Yesod.Form.Types.FieldView
             (Yesod.Core.Class.Handler.HandlerSite
                (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
          -> [Yesod.Form.Types.FieldView
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
          Yesod.Form.Types.Ints,
          Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: (\ eta :: (Yesod.Core.Class.Handler.HandlerSite
                             (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
                           [Data.Text.Internal.Text])
                   eta2 :: GHC.Base.Maybe
                             (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
                   eta3 :: Yesod.Form.Types.Ints ->
                 let {
                   ds :: Yesod.Core.Types.HandlerT
                           Foundation.Balada
                           GHC.Types.IO
                           (Yesod.Form.Types.FormResult Data.Text.Internal.Text,
                            [Yesod.Form.Types.FieldView
                               (Yesod.Core.Class.Handler.HandlerSite
                                  (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
                            -> [Yesod.Form.Types.FieldView
                                  (Yesod.Core.Class.Handler.HandlerSite
                                     (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
                            Yesod.Form.Types.Ints,
                            Yesod.Form.Types.Enctype)
                   = Handlers.formEstabelecimento_ds
                       `cast`
                     (Yesod.Form.Types.NTCo:AForm[0]
                          <Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO>_N
                          <Data.Text.Internal.Text>_N)
                       eta
                       eta2
                       eta3
                 } in
                 (\ r :: Yesod.Core.Types.HandlerData
                           Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case (ds
                          `cast`
                        (Yesod.Core.Types.NTCo:HandlerT[0]
                             <Foundation.Balada>_N
                             <GHC.Types.IO>_N
                             <(Yesod.Form.Types.FormResult Data.Text.Internal.Text,
                               [Yesod.Form.Types.FieldView
                                  (Yesod.Core.Class.Handler.HandlerSite
                                     (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
                               -> [Yesod.Form.Types.FieldView
                                     (Yesod.Core.Class.Handler.HandlerSite
                                        (Yesod.Core.Types.HandlerT
                                           Foundation.Balada GHC.Types.IO))],
                               Yesod.Form.Types.Ints,
                               Yesod.Form.Types.Enctype)>_N)
                          r)
                         `cast`
                       (GHC.Types.NTCo:IO[0]
                            <(Yesod.Form.Types.FormResult Data.Text.Internal.Text,
                              [Yesod.Form.Types.FieldView
                                 (Yesod.Core.Class.Handler.HandlerSite
                                    (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
                              -> [Yesod.Form.Types.FieldView
                                    (Yesod.Core.Class.Handler.HandlerSite
                                       (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
                              Yesod.Form.Types.Ints,
                              Yesod.Form.Types.Enctype)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  (# ipv,
                     case ipv1 of wild { (,,,) w x3 y z ->
                     (case w of wild1 {
                        Yesod.Form.Types.FormMissing
                        -> Yesod.Form.Types.FormMissing
                             @ (Data.Text.Internal.Text
                                -> Data.Text.Internal.Text
                                -> Data.Text.Internal.Text
                                -> Data.Text.Internal.Text
                                -> Foundation.Estabelecimento)
                        Yesod.Form.Types.FormFailure errs
                        -> Yesod.Form.Types.FormFailure
                             @ (Data.Text.Internal.Text
                                -> Data.Text.Internal.Text
                                -> Data.Text.Internal.Text
                                -> Data.Text.Internal.Text
                                -> Foundation.Estabelecimento)
                             errs
                        Yesod.Form.Types.FormSuccess a36
                        -> Yesod.Form.Types.FormSuccess
                             @ (Data.Text.Internal.Text
                                -> Data.Text.Internal.Text
                                -> Data.Text.Internal.Text
                                -> Data.Text.Internal.Text
                                -> Foundation.Estabelecimento)
                             (Foundation.$WEstabelecimento a36) },
                      x3,
                      y,
                      z) } #) })
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <(Yesod.Form.Types.FormResult
                                         (Data.Text.Internal.Text
                                          -> Data.Text.Internal.Text
                                          -> Data.Text.Internal.Text
                                          -> Data.Text.Internal.Text
                                          -> Foundation.Estabelecimento),
                                       [Yesod.Form.Types.FieldView
                                          (Yesod.Core.Class.Handler.HandlerSite
                                             (Yesod.Core.Types.HandlerT
                                                Foundation.Balada GHC.Types.IO))]
                                       -> [Yesod.Form.Types.FieldView
                                             (Yesod.Core.Class.Handler.HandlerSite
                                                (Yesod.Core.Types.HandlerT
                                                   Foundation.Balada GHC.Types.IO))],
                                       Yesod.Form.Types.Ints,
                                       Yesod.Form.Types.Enctype)>_R))
                      (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                <Foundation.Balada>_N
                                <GHC.Types.IO>_N
                                <(Yesod.Form.Types.FormResult
                                    (Data.Text.Internal.Text
                                     -> Data.Text.Internal.Text
                                     -> Data.Text.Internal.Text
                                     -> Data.Text.Internal.Text
                                     -> Foundation.Estabelecimento),
                                  [Yesod.Form.Types.FieldView
                                     (Yesod.Core.Class.Handler.HandlerSite
                                        (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
                                  -> [Yesod.Form.Types.FieldView
                                        (Yesod.Core.Class.Handler.HandlerSite
                                           (Yesod.Core.Types.HandlerT
                                              Foundation.Balada GHC.Types.IO))],
                                  Yesod.Form.Types.Ints,
                                  Yesod.Form.Types.Enctype)>_N)))) -}
3fa326b56e474169f120c6f7534346d8
  formEstabelecimento27 ::
    Yesod.Form.Types.FieldSettings Foundation.Balada
  {- Unfolding: (Yesod.Form.Types.FieldSettings
                   @ Foundation.Balada
                   Handlers.formEstabelecimento28
                   (GHC.Base.Nothing
                      @ (Text.Shakespeare.I18N.SomeMessage Foundation.Balada))
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Types.[]
                      @ (Data.Text.Internal.Text, Data.Text.Internal.Text))) -}
4c5f72c1788e289d30b5c2edb97956b2
  formEstabelecimento28 ::
    Text.Shakespeare.I18N.SomeMessage Foundation.Balada
  {- Unfolding: (Text.Shakespeare.I18N.SomeMessage
                   @ Foundation.Balada
                   @ Data.Text.Internal.Text
                   (Text.Shakespeare.I18N.$fIsStringSomeMessage_$crenderMessage
                      @ Foundation.Balada)
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Data.Text.Internal.Text>_N))
                   Handlers.formEstabelecimento29) -}
16f8f71ae8336d498dd2ede2dfb18347
  formEstabelecimento29 :: Data.Text.Internal.Text
  {- Unfolding: (GHC.ST.runSTRep
                   @ Data.Text.Internal.Text
                   Handlers.formEstabelecimento30) -}
638cec3d2e9f1bffc3812581dc846c1f
  formEstabelecimento3 ::
    Yesod.Form.Types.AForm Foundation.Handler Data.Text.Internal.Text
  {- Unfolding: (Yesod.Form.Functions.areq
                   @ Foundation.Handler
                   @ Data.Text.Internal.Text
                   @ Foundation.Balada
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Yesod.Form.Types.FormMessage>_N))
                   (GHC.Types.Eq#
                      @ *
                      @ (Yesod.Core.Class.Handler.HandlerSite
                           (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))
                      @ Foundation.Balada
                      @~ (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formCategoria8
                   Handlers.formEstabelecimento4
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)) -}
966052063ee90319df4bf2b2f3219072
  formEstabelecimento30 ::
    GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                 case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                 Text.Shakespeare.I18N.$fIsStringSomeMessage2
                   @ s1
                   (Data.Text.Array.MArray @ s1 ipv1)
                   Text.Shakespeare.I18N.$fIsStringSomeMessage1
                   Handlers.formEstabelecimento31
                   0
                   ipv }) -}
2c493237d3c1778a1a9ae52ea9d2b659
  formEstabelecimento31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Nome: "#) -}
1ba689bd30fd270cf0d29f8d58b520fa
  formEstabelecimento4 ::
    Yesod.Form.Types.FieldSettings Foundation.Balada
  {- Unfolding: (Yesod.Form.Types.FieldSettings
                   @ Foundation.Balada
                   Handlers.formEstabelecimento5
                   (GHC.Base.Nothing
                      @ (Text.Shakespeare.I18N.SomeMessage Foundation.Balada))
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Types.[]
                      @ (Data.Text.Internal.Text, Data.Text.Internal.Text))) -}
c641cb3defa42911a735774d9430fb82
  formEstabelecimento5 ::
    Text.Shakespeare.I18N.SomeMessage Foundation.Balada
  {- Unfolding: (Text.Shakespeare.I18N.SomeMessage
                   @ Foundation.Balada
                   @ Data.Text.Internal.Text
                   (Text.Shakespeare.I18N.$fIsStringSomeMessage_$crenderMessage
                      @ Foundation.Balada)
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Data.Text.Internal.Text>_N))
                   Handlers.formEstabelecimento6) -}
784468a7a4072203150cb9099a6aa4e7
  formEstabelecimento6 :: Data.Text.Internal.Text
  {- Unfolding: (GHC.ST.runSTRep
                   @ Data.Text.Internal.Text
                   (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                    case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                    Text.Shakespeare.I18N.$fIsStringSomeMessage2
                      @ s1
                      (Data.Text.Array.MArray @ s1 ipv1)
                      Text.Shakespeare.I18N.$fIsStringSomeMessage1
                      Handlers.formEstabelecimento7
                      0
                      ipv })) -}
a57b38fe0653d284824306f752badfd3
  formEstabelecimento7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Telefone: "#) -}
a215148f0ecbc7ea47f4f7d04941c604
  formEstabelecimento8 ::
    (Yesod.Core.Class.Handler.HandlerSite
       (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
     [Data.Text.Internal.Text])
    -> GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
    -> Yesod.Form.Types.Ints
    -> Yesod.Core.Types.HandlerT
         Foundation.Balada
         GHC.Types.IO
         (Yesod.Form.Types.FormResult
            (Data.Text.Internal.Text -> Foundation.Estabelecimento),
          [Yesod.Form.Types.FieldView
             (Yesod.Core.Class.Handler.HandlerSite
                (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
          -> [Yesod.Form.Types.FieldView
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
          Yesod.Form.Types.Ints,
          Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ w4 :: (Yesod.Core.Class.Handler.HandlerSite
                            (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
                          [Data.Text.Internal.Text])
                   w5 :: GHC.Base.Maybe
                           (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
                   w6 :: Yesod.Form.Types.Ints ->
                 Yesod.Form.Types.$wa
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   Foundation.$fYesodBalada_$s$fMonadHandlerT
                   @ Data.Text.Internal.Text
                   @ (Data.Text.Internal.Text -> Foundation.Estabelecimento)
                   Handlers.formEstabelecimento14
                     `cast`
                   (Sym (Yesod.Form.Types.NTCo:AForm[0]
                             <Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO>_N
                             <Data.Text.Internal.Text
                              -> Data.Text.Internal.Text -> Foundation.Estabelecimento>_N))
                   Handlers.formEstabelecimento9
                   w4
                   w5
                   w6) -}
3ba348f6ee42fb68819df48f82a0b61c
  formEstabelecimento9 ::
    Yesod.Form.Types.AForm Foundation.Handler Data.Text.Internal.Text
  {- Unfolding: (Yesod.Form.Functions.areq
                   @ Foundation.Handler
                   @ Data.Text.Internal.Text
                   @ Foundation.Balada
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Yesod.Form.Types.FormMessage>_N))
                   (GHC.Types.Eq#
                      @ *
                      @ (Yesod.Core.Class.Handler.HandlerSite
                           (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))
                      @ Foundation.Balada
                      @~ (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formCategoria8
                   Handlers.formEstabelecimento10
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)) -}
afc68f1e45080e7f3193253eec6f0216
  formEstabelecimento_ds ::
    Yesod.Form.Types.AForm
      (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
      Data.Text.Internal.Text
  {- Unfolding: (Yesod.Form.Functions.areq
                   @ Foundation.Handler
                   @ Data.Text.Internal.Text
                   @ Foundation.Balada
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Yesod.Form.Types.FormMessage>_N))
                   (GHC.Types.Eq#
                      @ *
                      @ (Yesod.Core.Class.Handler.HandlerSite
                           (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))
                      @ Foundation.Balada
                      @~ (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formCategoria8
                   Handlers.formEstabelecimento27
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)) -}
1d8f9421b71f4c1a5bc9eca0b98c8287
  formFaixapreco :: Foundation.Form Foundation.Faixa_preco
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Handlers.formFaixapreco1
                  `cast`
                (<Text.Blaze.Internal.MarkupM ()>_R
                 ->_R Sym (Control.Monad.Trans.RWS.Lazy.NTCo:RWST[0]
                               <(GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                                 Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                                 [Text.Shakespeare.I18N.Lang])>_R
                               <Yesod.Form.Types.Enctype>_N
                               <Yesod.Form.Types.Ints>_N
                               <Foundation.Handler>_R
                               ((<Yesod.Form.Types.FormResult Foundation.Faixa_preco>_N,
                                 (Yesod.Core.Types.WidgetT
                                    (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                                    <GHC.Types.IO>_N
                                    <()>_N)_N))_N)) -}
11f0ebe6cd763723ada45c06efc29ec5
  formFaixapreco1 ::
    Text.Blaze.Internal.Markup
    -> (GHC.Base.Maybe
          (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
        Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
        [Text.Shakespeare.I18N.Lang])
    -> Yesod.Form.Types.Ints
    -> Foundation.Handler
         ((Yesod.Form.Types.FormResult Foundation.Faixa_preco,
           Yesod.Core.Types.WidgetT
             (Yesod.Core.Class.Handler.HandlerSite Foundation.Handler)
             GHC.Types.IO
             ()),
          Yesod.Form.Types.Ints,
          Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta2 :: Text.Blaze.Internal.Markup
                   eta3 :: (GHC.Base.Maybe
                              (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                            Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                            [Text.Shakespeare.I18N.Lang])
                   eta4 :: Yesod.Form.Types.Ints ->
                 Yesod.Form.Functions.renderDivs2
                   @ Foundation.Handler
                   @ Foundation.Faixa_preco
                   Foundation.$fYesodBalada_$s$fMonadHandlerT
                   GHC.Types.True
                   Handlers.formFaixapreco2
                     `cast`
                   (Sym (Yesod.Form.Types.NTCo:AForm[0]
                             <Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO>_N
                             <Foundation.Faixa_preco>_N))
                   eta2
                   eta3
                   eta4) -}
edd731c1af8393c54f14bc42061c5dd4
  formFaixapreco10 ::
    Yesod.Form.Types.FieldSettings Foundation.Balada
  {- Unfolding: (Yesod.Form.Types.FieldSettings
                   @ Foundation.Balada
                   Handlers.formFaixapreco11
                   (GHC.Base.Nothing
                      @ (Text.Shakespeare.I18N.SomeMessage Foundation.Balada))
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Types.[]
                      @ (Data.Text.Internal.Text, Data.Text.Internal.Text))) -}
2e6528e0ce6a1b6041f3bea09831e92d
  formFaixapreco11 ::
    Text.Shakespeare.I18N.SomeMessage Foundation.Balada
  {- Unfolding: (Text.Shakespeare.I18N.SomeMessage
                   @ Foundation.Balada
                   @ Data.Text.Internal.Text
                   (Text.Shakespeare.I18N.$fIsStringSomeMessage_$crenderMessage
                      @ Foundation.Balada)
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Data.Text.Internal.Text>_N))
                   Handlers.formFaixapreco12) -}
eebd865d610c66442c09d6cf44ffba11
  formFaixapreco12 :: Data.Text.Internal.Text
  {- Unfolding: (GHC.ST.runSTRep
                   @ Data.Text.Internal.Text
                   (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                    case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                    Text.Shakespeare.I18N.$fIsStringSomeMessage2
                      @ s1
                      (Data.Text.Array.MArray @ s1 ipv1)
                      Text.Shakespeare.I18N.$fIsStringSomeMessage1
                      Handlers.formFaixapreco13
                      0
                      ipv })) -}
a77e057bafb74f932056a57718f1bd80
  formFaixapreco13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Valor Inicial: "#) -}
6ee1f536c7481b979504d932aea3d3d5
  formFaixapreco14 ::
    (Yesod.Core.Class.Handler.HandlerSite
       (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
     [Data.Text.Internal.Text])
    -> GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
    -> Yesod.Form.Types.Ints
    -> Yesod.Core.Types.HandlerT
         Foundation.Balada
         GHC.Types.IO
         (Yesod.Form.Types.FormResult
            (Data.Text.Internal.Text
             -> Data.Text.Internal.Text -> Foundation.Faixa_preco),
          [Yesod.Form.Types.FieldView
             (Yesod.Core.Class.Handler.HandlerSite
                (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
          -> [Yesod.Form.Types.FieldView
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
          Yesod.Form.Types.Ints,
          Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: (\ eta :: (Yesod.Core.Class.Handler.HandlerSite
                             (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
                           [Data.Text.Internal.Text])
                   eta2 :: GHC.Base.Maybe
                             (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
                   eta3 :: Yesod.Form.Types.Ints ->
                 let {
                   ds :: Yesod.Core.Types.HandlerT
                           Foundation.Balada
                           GHC.Types.IO
                           (Yesod.Form.Types.FormResult Data.Text.Internal.Text,
                            [Yesod.Form.Types.FieldView
                               (Yesod.Core.Class.Handler.HandlerSite
                                  (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
                            -> [Yesod.Form.Types.FieldView
                                  (Yesod.Core.Class.Handler.HandlerSite
                                     (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
                            Yesod.Form.Types.Ints,
                            Yesod.Form.Types.Enctype)
                   = Handlers.formEstabelecimento_ds
                       `cast`
                     (Yesod.Form.Types.NTCo:AForm[0]
                          <Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO>_N
                          <Data.Text.Internal.Text>_N)
                       eta
                       eta2
                       eta3
                 } in
                 (\ r :: Yesod.Core.Types.HandlerData
                           Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case (ds
                          `cast`
                        (Yesod.Core.Types.NTCo:HandlerT[0]
                             <Foundation.Balada>_N
                             <GHC.Types.IO>_N
                             <(Yesod.Form.Types.FormResult Data.Text.Internal.Text,
                               [Yesod.Form.Types.FieldView
                                  (Yesod.Core.Class.Handler.HandlerSite
                                     (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
                               -> [Yesod.Form.Types.FieldView
                                     (Yesod.Core.Class.Handler.HandlerSite
                                        (Yesod.Core.Types.HandlerT
                                           Foundation.Balada GHC.Types.IO))],
                               Yesod.Form.Types.Ints,
                               Yesod.Form.Types.Enctype)>_N)
                          r)
                         `cast`
                       (GHC.Types.NTCo:IO[0]
                            <(Yesod.Form.Types.FormResult Data.Text.Internal.Text,
                              [Yesod.Form.Types.FieldView
                                 (Yesod.Core.Class.Handler.HandlerSite
                                    (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
                              -> [Yesod.Form.Types.FieldView
                                    (Yesod.Core.Class.Handler.HandlerSite
                                       (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
                              Yesod.Form.Types.Ints,
                              Yesod.Form.Types.Enctype)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  (# ipv,
                     case ipv1 of wild { (,,,) w x3 y z ->
                     (case w of wild1 {
                        Yesod.Form.Types.FormMissing
                        -> Yesod.Form.Types.FormMissing
                             @ (Data.Text.Internal.Text
                                -> Data.Text.Internal.Text -> Foundation.Faixa_preco)
                        Yesod.Form.Types.FormFailure errs
                        -> Yesod.Form.Types.FormFailure
                             @ (Data.Text.Internal.Text
                                -> Data.Text.Internal.Text -> Foundation.Faixa_preco)
                             errs
                        Yesod.Form.Types.FormSuccess a36
                        -> Yesod.Form.Types.FormSuccess
                             @ (Data.Text.Internal.Text
                                -> Data.Text.Internal.Text -> Foundation.Faixa_preco)
                             (Foundation.$WFaixa_preco a36) },
                      x3,
                      y,
                      z) } #) })
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <(Yesod.Form.Types.FormResult
                                         (Data.Text.Internal.Text
                                          -> Data.Text.Internal.Text -> Foundation.Faixa_preco),
                                       [Yesod.Form.Types.FieldView
                                          (Yesod.Core.Class.Handler.HandlerSite
                                             (Yesod.Core.Types.HandlerT
                                                Foundation.Balada GHC.Types.IO))]
                                       -> [Yesod.Form.Types.FieldView
                                             (Yesod.Core.Class.Handler.HandlerSite
                                                (Yesod.Core.Types.HandlerT
                                                   Foundation.Balada GHC.Types.IO))],
                                       Yesod.Form.Types.Ints,
                                       Yesod.Form.Types.Enctype)>_R))
                      (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                <Foundation.Balada>_N
                                <GHC.Types.IO>_N
                                <(Yesod.Form.Types.FormResult
                                    (Data.Text.Internal.Text
                                     -> Data.Text.Internal.Text -> Foundation.Faixa_preco),
                                  [Yesod.Form.Types.FieldView
                                     (Yesod.Core.Class.Handler.HandlerSite
                                        (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
                                  -> [Yesod.Form.Types.FieldView
                                        (Yesod.Core.Class.Handler.HandlerSite
                                           (Yesod.Core.Types.HandlerT
                                              Foundation.Balada GHC.Types.IO))],
                                  Yesod.Form.Types.Ints,
                                  Yesod.Form.Types.Enctype)>_N)))) -}
3b034ac094fd825a4413f0c294df827d
  formFaixapreco2 ::
    (Yesod.Core.Class.Handler.HandlerSite
       (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
     [Data.Text.Internal.Text])
    -> GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
    -> Yesod.Form.Types.Ints
    -> Yesod.Core.Types.HandlerT
         Foundation.Balada
         GHC.Types.IO
         (Yesod.Form.Types.FormResult Foundation.Faixa_preco,
          [Yesod.Form.Types.FieldView
             (Yesod.Core.Class.Handler.HandlerSite
                (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
          -> [Yesod.Form.Types.FieldView
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
          Yesod.Form.Types.Ints,
          Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ w4 :: (Yesod.Core.Class.Handler.HandlerSite
                            (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
                          [Data.Text.Internal.Text])
                   w5 :: GHC.Base.Maybe
                           (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
                   w6 :: Yesod.Form.Types.Ints ->
                 Yesod.Form.Types.$wa
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   Foundation.$fYesodBalada_$s$fMonadHandlerT
                   @ Data.Text.Internal.Text
                   @ Foundation.Faixa_preco
                   Handlers.formFaixapreco8
                     `cast`
                   (Sym (Yesod.Form.Types.NTCo:AForm[0]
                             <Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO>_N
                             <Data.Text.Internal.Text -> Foundation.Faixa_preco>_N))
                   Handlers.formFaixapreco3
                   w4
                   w5
                   w6) -}
459a93502873ea1a9a5ff7d63567e7f8
  formFaixapreco3 ::
    Yesod.Form.Types.AForm Foundation.Handler Data.Text.Internal.Text
  {- Unfolding: (Yesod.Form.Functions.areq
                   @ Foundation.Handler
                   @ Data.Text.Internal.Text
                   @ Foundation.Balada
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Yesod.Form.Types.FormMessage>_N))
                   (GHC.Types.Eq#
                      @ *
                      @ (Yesod.Core.Class.Handler.HandlerSite
                           (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))
                      @ Foundation.Balada
                      @~ (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formCategoria8
                   Handlers.formFaixapreco4
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)) -}
d1973a4c237226a9ef259490c7ce9075
  formFaixapreco4 :: Yesod.Form.Types.FieldSettings Foundation.Balada
  {- Unfolding: (Yesod.Form.Types.FieldSettings
                   @ Foundation.Balada
                   Handlers.formFaixapreco5
                   (GHC.Base.Nothing
                      @ (Text.Shakespeare.I18N.SomeMessage Foundation.Balada))
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Types.[]
                      @ (Data.Text.Internal.Text, Data.Text.Internal.Text))) -}
3a843783432e0d9c38603455ebf9f70d
  formFaixapreco5 ::
    Text.Shakespeare.I18N.SomeMessage Foundation.Balada
  {- Unfolding: (Text.Shakespeare.I18N.SomeMessage
                   @ Foundation.Balada
                   @ Data.Text.Internal.Text
                   (Text.Shakespeare.I18N.$fIsStringSomeMessage_$crenderMessage
                      @ Foundation.Balada)
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Data.Text.Internal.Text>_N))
                   Handlers.formFaixapreco6) -}
d8f25f4e1f0249deb72ae90cfb635fb9
  formFaixapreco6 :: Data.Text.Internal.Text
  {- Unfolding: (GHC.ST.runSTRep
                   @ Data.Text.Internal.Text
                   (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                    case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                    Text.Shakespeare.I18N.$fIsStringSomeMessage2
                      @ s1
                      (Data.Text.Array.MArray @ s1 ipv1)
                      Text.Shakespeare.I18N.$fIsStringSomeMessage1
                      Handlers.formFaixapreco7
                      0
                      ipv })) -}
5fead80e84b4d6086b06051c71798d1a
  formFaixapreco7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Valor Final: "#) -}
3e04acd7912c34234c3873d9242df58e
  formFaixapreco8 ::
    (Yesod.Core.Class.Handler.HandlerSite
       (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
     [Data.Text.Internal.Text])
    -> GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
    -> Yesod.Form.Types.Ints
    -> Yesod.Core.Types.HandlerT
         Foundation.Balada
         GHC.Types.IO
         (Yesod.Form.Types.FormResult
            (Data.Text.Internal.Text -> Foundation.Faixa_preco),
          [Yesod.Form.Types.FieldView
             (Yesod.Core.Class.Handler.HandlerSite
                (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
          -> [Yesod.Form.Types.FieldView
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
          Yesod.Form.Types.Ints,
          Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ w4 :: (Yesod.Core.Class.Handler.HandlerSite
                            (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
                          [Data.Text.Internal.Text])
                   w5 :: GHC.Base.Maybe
                           (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
                   w6 :: Yesod.Form.Types.Ints ->
                 Yesod.Form.Types.$wa
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   Foundation.$fYesodBalada_$s$fMonadHandlerT
                   @ Data.Text.Internal.Text
                   @ (Data.Text.Internal.Text -> Foundation.Faixa_preco)
                   Handlers.formFaixapreco14
                     `cast`
                   (Sym (Yesod.Form.Types.NTCo:AForm[0]
                             <Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO>_N
                             <Data.Text.Internal.Text
                              -> Data.Text.Internal.Text -> Foundation.Faixa_preco>_N))
                   Handlers.formFaixapreco9
                   w4
                   w5
                   w6) -}
d2acd3466fe4792d5afdc50bf5e3ae73
  formFaixapreco9 ::
    Yesod.Form.Types.AForm Foundation.Handler Data.Text.Internal.Text
  {- Unfolding: (Yesod.Form.Functions.areq
                   @ Foundation.Handler
                   @ Data.Text.Internal.Text
                   @ Foundation.Balada
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Yesod.Form.Types.FormMessage>_N))
                   (GHC.Types.Eq#
                      @ *
                      @ (Yesod.Core.Class.Handler.HandlerSite
                           (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))
                      @ Foundation.Balada
                      @~ (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formCategoria8
                   Handlers.formFaixapreco10
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)) -}
eef60edbf47e8fcc35b85d02741e3c67
  formLogin ::
    Foundation.Form (Data.Text.Internal.Text, Data.Text.Internal.Text)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Handlers.formLogin1
                  `cast`
                (<Text.Blaze.Internal.MarkupM ()>_R
                 ->_R Sym (Control.Monad.Trans.RWS.Lazy.NTCo:RWST[0]
                               <(GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                                 Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                                 [Text.Shakespeare.I18N.Lang])>_R
                               <Yesod.Form.Types.Enctype>_N
                               <Yesod.Form.Types.Ints>_N
                               <Foundation.Handler>_R
                               ((<Yesod.Form.Types.FormResult
                                    (Data.Text.Internal.Text, Data.Text.Internal.Text)>_N,
                                 (Yesod.Core.Types.WidgetT
                                    (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                                    <GHC.Types.IO>_N
                                    <()>_N)_N))_N)) -}
51306c85e758b99be4fedcbab1deb420
  formLogin1 ::
    Text.Blaze.Internal.Markup
    -> (GHC.Base.Maybe
          (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
        Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
        [Text.Shakespeare.I18N.Lang])
    -> Yesod.Form.Types.Ints
    -> Foundation.Handler
         ((Yesod.Form.Types.FormResult
             (Data.Text.Internal.Text, Data.Text.Internal.Text),
           Yesod.Core.Types.WidgetT
             (Yesod.Core.Class.Handler.HandlerSite Foundation.Handler)
             GHC.Types.IO
             ()),
          Yesod.Form.Types.Ints,
          Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta2 :: Text.Blaze.Internal.Markup
                   eta3 :: (GHC.Base.Maybe
                              (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                            Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                            [Text.Shakespeare.I18N.Lang])
                   eta4 :: Yesod.Form.Types.Ints ->
                 Yesod.Form.Functions.renderDivs2
                   @ Foundation.Handler
                   @ (Data.Text.Internal.Text, Data.Text.Internal.Text)
                   Foundation.$fYesodBalada_$s$fMonadHandlerT
                   GHC.Types.True
                   Handlers.formLogin2
                     `cast`
                   (Sym (Yesod.Form.Types.NTCo:AForm[0]
                             <Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO>_N
                             <(Data.Text.Internal.Text, Data.Text.Internal.Text)>_N))
                   eta2
                   eta3
                   eta4) -}
1d7b8ea33a6b55173027a89c9ab3bf21
  formLogin10 :: Yesod.Form.Types.FieldSettings Foundation.Balada
  {- Unfolding: (Yesod.Form.Types.FieldSettings
                   @ Foundation.Balada
                   Handlers.formLogin11
                   (GHC.Base.Nothing
                      @ (Text.Shakespeare.I18N.SomeMessage Foundation.Balada))
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Types.[]
                      @ (Data.Text.Internal.Text, Data.Text.Internal.Text))) -}
dbced75cb6b9f7281ad6eb497c4d9035
  formLogin11 :: Text.Shakespeare.I18N.SomeMessage Foundation.Balada
  {- Unfolding: (Text.Shakespeare.I18N.SomeMessage
                   @ Foundation.Balada
                   @ Data.Text.Internal.Text
                   (Text.Shakespeare.I18N.$fIsStringSomeMessage_$crenderMessage
                      @ Foundation.Balada)
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Data.Text.Internal.Text>_N))
                   Handlers.formLogin12) -}
c82edb8039ddaf4bbb452893bb2f56f0
  formLogin12 :: Data.Text.Internal.Text
  {- Unfolding: (GHC.ST.runSTRep
                   @ Data.Text.Internal.Text
                   Handlers.formLogin13) -}
a698eeef12e262de5da5d82753c7e7e1
  formLogin13 ::
    GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                 case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                 Text.Shakespeare.I18N.$fIsStringSomeMessage2
                   @ s1
                   (Data.Text.Array.MArray @ s1 ipv1)
                   Text.Shakespeare.I18N.$fIsStringSomeMessage1
                   Handlers.formEstabelecimento19
                   0
                   ipv }) -}
f04a893a805ffb4c88bb4c27d72f8621
  formLogin2 ::
    (Yesod.Core.Class.Handler.HandlerSite
       (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
     [Data.Text.Internal.Text])
    -> GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
    -> Yesod.Form.Types.Ints
    -> Yesod.Core.Types.HandlerT
         Foundation.Balada
         GHC.Types.IO
         (Yesod.Form.Types.FormResult
            (Data.Text.Internal.Text, Data.Text.Internal.Text),
          [Yesod.Form.Types.FieldView
             (Yesod.Core.Class.Handler.HandlerSite
                (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
          -> [Yesod.Form.Types.FieldView
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
          Yesod.Form.Types.Ints,
          Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ w4 :: (Yesod.Core.Class.Handler.HandlerSite
                            (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
                          [Data.Text.Internal.Text])
                   w5 :: GHC.Base.Maybe
                           (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
                   w6 :: Yesod.Form.Types.Ints ->
                 Yesod.Form.Types.$wa
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   Foundation.$fYesodBalada_$s$fMonadHandlerT
                   @ Data.Text.Internal.Text
                   @ (Data.Text.Internal.Text, Data.Text.Internal.Text)
                   Handlers.formLogin9
                     `cast`
                   (Sym (Yesod.Form.Types.NTCo:AForm[0]
                             <Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO>_N
                             <Data.Text.Internal.Text
                              -> (Data.Text.Internal.Text, Data.Text.Internal.Text)>_N))
                   Handlers.formLogin3
                   w4
                   w5
                   w6) -}
efb953561d3685a259b50e820725cd6d
  formLogin3 ::
    Yesod.Form.Types.AForm Foundation.Handler Data.Text.Internal.Text
  {- Unfolding: (Yesod.Form.Functions.areq
                   @ Foundation.Handler
                   @ Data.Text.Internal.Text
                   @ Foundation.Balada
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Yesod.Form.Types.FormMessage>_N))
                   (GHC.Types.Eq#
                      @ *
                      @ (Yesod.Core.Class.Handler.HandlerSite
                           (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))
                      @ Foundation.Balada
                      @~ (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formLogin8
                   Handlers.formLogin4
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)) -}
39ffdf16ff4341418efb25027c6b9c10
  formLogin4 :: Yesod.Form.Types.FieldSettings Foundation.Balada
  {- Unfolding: (Yesod.Form.Types.FieldSettings
                   @ Foundation.Balada
                   Handlers.formLogin5
                   (GHC.Base.Nothing
                      @ (Text.Shakespeare.I18N.SomeMessage Foundation.Balada))
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Types.[]
                      @ (Data.Text.Internal.Text, Data.Text.Internal.Text))) -}
b5a6e883cf75c0a21158c605fbe177d5
  formLogin5 :: Text.Shakespeare.I18N.SomeMessage Foundation.Balada
  {- Unfolding: (Text.Shakespeare.I18N.SomeMessage
                   @ Foundation.Balada
                   @ Data.Text.Internal.Text
                   (Text.Shakespeare.I18N.$fIsStringSomeMessage_$crenderMessage
                      @ Foundation.Balada)
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Data.Text.Internal.Text>_N))
                   Handlers.formLogin6) -}
509a84825d411961f606255c39bc36d3
  formLogin6 :: Data.Text.Internal.Text
  {- Unfolding: (GHC.ST.runSTRep
                   @ Data.Text.Internal.Text
                   (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                    case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                    Text.Shakespeare.I18N.$fIsStringSomeMessage2
                      @ s1
                      (Data.Text.Array.MArray @ s1 ipv1)
                      Text.Shakespeare.I18N.$fIsStringSomeMessage1
                      Handlers.formLogin7
                      0
                      ipv })) -}
68107aac455349f834adda82472dea8d
  formLogin7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Senha: "#) -}
324fc88eebbc52818acc17709ddc5e94
  formLogin8 ::
    Yesod.Form.Types.Field Foundation.Handler Data.Text.Internal.Text
  {- Unfolding: (Yesod.Form.Types.Field
                   @ Foundation.Handler
                   @ Data.Text.Internal.Text
                   Handlers.formCategoria9
                   (Yesod.Form.Fields.passwordField1 @ Foundation.Handler)
                   Yesod.Form.Types.UrlEncoded) -}
8d90e6c1bc14af7ed05bc0e698e84603
  formLogin9 ::
    (Yesod.Core.Class.Handler.HandlerSite
       (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
     [Data.Text.Internal.Text])
    -> GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
    -> Yesod.Form.Types.Ints
    -> Yesod.Core.Types.HandlerT
         Foundation.Balada
         GHC.Types.IO
         (Yesod.Form.Types.FormResult
            (Data.Text.Internal.Text
             -> (Data.Text.Internal.Text, Data.Text.Internal.Text)),
          [Yesod.Form.Types.FieldView
             (Yesod.Core.Class.Handler.HandlerSite
                (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
          -> [Yesod.Form.Types.FieldView
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
          Yesod.Form.Types.Ints,
          Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: (\ eta :: (Yesod.Core.Class.Handler.HandlerSite
                             (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
                           [Data.Text.Internal.Text])
                   eta2 :: GHC.Base.Maybe
                             (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
                   eta3 :: Yesod.Form.Types.Ints ->
                 let {
                   ds :: Yesod.Core.Types.HandlerT
                           Foundation.Balada
                           GHC.Types.IO
                           (Yesod.Form.Types.FormResult Data.Text.Internal.Text,
                            [Yesod.Form.Types.FieldView
                               (Yesod.Core.Class.Handler.HandlerSite
                                  (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
                            -> [Yesod.Form.Types.FieldView
                                  (Yesod.Core.Class.Handler.HandlerSite
                                     (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
                            Yesod.Form.Types.Ints,
                            Yesod.Form.Types.Enctype)
                   = Handlers.formLogin_ds
                       `cast`
                     (Yesod.Form.Types.NTCo:AForm[0]
                          <Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO>_N
                          <Data.Text.Internal.Text>_N)
                       eta
                       eta2
                       eta3
                 } in
                 (\ r :: Yesod.Core.Types.HandlerData
                           Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case (ds
                          `cast`
                        (Yesod.Core.Types.NTCo:HandlerT[0]
                             <Foundation.Balada>_N
                             <GHC.Types.IO>_N
                             <(Yesod.Form.Types.FormResult Data.Text.Internal.Text,
                               [Yesod.Form.Types.FieldView
                                  (Yesod.Core.Class.Handler.HandlerSite
                                     (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
                               -> [Yesod.Form.Types.FieldView
                                     (Yesod.Core.Class.Handler.HandlerSite
                                        (Yesod.Core.Types.HandlerT
                                           Foundation.Balada GHC.Types.IO))],
                               Yesod.Form.Types.Ints,
                               Yesod.Form.Types.Enctype)>_N)
                          r)
                         `cast`
                       (GHC.Types.NTCo:IO[0]
                            <(Yesod.Form.Types.FormResult Data.Text.Internal.Text,
                              [Yesod.Form.Types.FieldView
                                 (Yesod.Core.Class.Handler.HandlerSite
                                    (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
                              -> [Yesod.Form.Types.FieldView
                                    (Yesod.Core.Class.Handler.HandlerSite
                                       (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
                              Yesod.Form.Types.Ints,
                              Yesod.Form.Types.Enctype)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  (# ipv,
                     case ipv1 of wild { (,,,) w x3 y z ->
                     (case w of wild1 {
                        Yesod.Form.Types.FormMissing
                        -> Yesod.Form.Types.FormMissing
                             @ (Data.Text.Internal.Text
                                -> (Data.Text.Internal.Text, Data.Text.Internal.Text))
                        Yesod.Form.Types.FormFailure errs
                        -> Yesod.Form.Types.FormFailure
                             @ (Data.Text.Internal.Text
                                -> (Data.Text.Internal.Text, Data.Text.Internal.Text))
                             errs
                        Yesod.Form.Types.FormSuccess a36
                        -> Yesod.Form.Types.FormSuccess
                             @ (Data.Text.Internal.Text
                                -> (Data.Text.Internal.Text, Data.Text.Internal.Text))
                             (GHC.Tuple.(,)
                                @ Data.Text.Internal.Text
                                @ Data.Text.Internal.Text
                                a36) },
                      x3,
                      y,
                      z) } #) })
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <(Yesod.Form.Types.FormResult
                                         (Data.Text.Internal.Text
                                          -> (Data.Text.Internal.Text, Data.Text.Internal.Text)),
                                       [Yesod.Form.Types.FieldView
                                          (Yesod.Core.Class.Handler.HandlerSite
                                             (Yesod.Core.Types.HandlerT
                                                Foundation.Balada GHC.Types.IO))]
                                       -> [Yesod.Form.Types.FieldView
                                             (Yesod.Core.Class.Handler.HandlerSite
                                                (Yesod.Core.Types.HandlerT
                                                   Foundation.Balada GHC.Types.IO))],
                                       Yesod.Form.Types.Ints,
                                       Yesod.Form.Types.Enctype)>_R))
                      (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                <Foundation.Balada>_N
                                <GHC.Types.IO>_N
                                <(Yesod.Form.Types.FormResult
                                    (Data.Text.Internal.Text
                                     -> (Data.Text.Internal.Text, Data.Text.Internal.Text)),
                                  [Yesod.Form.Types.FieldView
                                     (Yesod.Core.Class.Handler.HandlerSite
                                        (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
                                  -> [Yesod.Form.Types.FieldView
                                        (Yesod.Core.Class.Handler.HandlerSite
                                           (Yesod.Core.Types.HandlerT
                                              Foundation.Balada GHC.Types.IO))],
                                  Yesod.Form.Types.Ints,
                                  Yesod.Form.Types.Enctype)>_N)))) -}
dcb390182b3759c93d8355391cfbb59f
  formLogin_ds ::
    Yesod.Form.Types.AForm
      (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
      Data.Text.Internal.Text
  {- Unfolding: (Yesod.Form.Functions.areq
                   @ Foundation.Handler
                   @ Data.Text.Internal.Text
                   @ Foundation.Balada
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Yesod.Form.Types.FormMessage>_N))
                   (GHC.Types.Eq#
                      @ *
                      @ (Yesod.Core.Class.Handler.HandlerSite
                           (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))
                      @ Foundation.Balada
                      @~ (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formCategoria8
                   Handlers.formLogin10
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)) -}
9786f6c8b53febd51db4a90652d80dc8
  formPessoa :: Foundation.Form Foundation.Pessoas
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Handlers.formPessoa1
                  `cast`
                (<Text.Blaze.Internal.MarkupM ()>_R
                 ->_R Sym (Control.Monad.Trans.RWS.Lazy.NTCo:RWST[0]
                               <(GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                                 Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                                 [Text.Shakespeare.I18N.Lang])>_R
                               <Yesod.Form.Types.Enctype>_N
                               <Yesod.Form.Types.Ints>_N
                               <Foundation.Handler>_R
                               ((<Yesod.Form.Types.FormResult Foundation.Pessoas>_N,
                                 (Yesod.Core.Types.WidgetT
                                    (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                                    <GHC.Types.IO>_N
                                    <()>_N)_N))_N)) -}
793edb7b277d315d5a14fbdce47a51a0
  formPessoa1 ::
    Text.Blaze.Internal.Markup
    -> (GHC.Base.Maybe
          (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
        Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
        [Text.Shakespeare.I18N.Lang])
    -> Yesod.Form.Types.Ints
    -> Foundation.Handler
         ((Yesod.Form.Types.FormResult Foundation.Pessoas,
           Yesod.Core.Types.WidgetT
             (Yesod.Core.Class.Handler.HandlerSite Foundation.Handler)
             GHC.Types.IO
             ()),
          Yesod.Form.Types.Ints,
          Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta2 :: Text.Blaze.Internal.Markup
                   eta3 :: (GHC.Base.Maybe
                              (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                            Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                            [Text.Shakespeare.I18N.Lang])
                   eta4 :: Yesod.Form.Types.Ints ->
                 Yesod.Form.Functions.renderDivs2
                   @ Foundation.Handler
                   @ Foundation.Pessoas
                   Foundation.$fYesodBalada_$s$fMonadHandlerT
                   GHC.Types.True
                   Handlers.formPessoa2
                     `cast`
                   (Sym (Yesod.Form.Types.NTCo:AForm[0]
                             <Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO>_N
                             <Foundation.Pessoas>_N))
                   eta2
                   eta3
                   eta4) -}
72ec566283dd018f9114d0c7d560f3e6
  formPessoa10 ::
    Yesod.Form.Types.AForm Foundation.Handler Data.Text.Internal.Text
  {- Unfolding: (Yesod.Form.Functions.areq
                   @ Foundation.Handler
                   @ Data.Text.Internal.Text
                   @ Foundation.Balada
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Yesod.Form.Types.FormMessage>_N))
                   (GHC.Types.Eq#
                      @ *
                      @ (Yesod.Core.Class.Handler.HandlerSite
                           (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))
                      @ Foundation.Balada
                      @~ (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formCategoria8
                   Handlers.formPessoa11
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)) -}
0a1945e927b675006bf081578ebfad18
  formPessoa11 :: Yesod.Form.Types.FieldSettings Foundation.Balada
  {- Unfolding: (Yesod.Form.Types.FieldSettings
                   @ Foundation.Balada
                   Handlers.formPessoa12
                   (GHC.Base.Nothing
                      @ (Text.Shakespeare.I18N.SomeMessage Foundation.Balada))
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Types.[]
                      @ (Data.Text.Internal.Text, Data.Text.Internal.Text))) -}
e6ae15edacd6e5462cc9e9df844789d4
  formPessoa12 :: Text.Shakespeare.I18N.SomeMessage Foundation.Balada
  {- Unfolding: (Text.Shakespeare.I18N.SomeMessage
                   @ Foundation.Balada
                   @ Data.Text.Internal.Text
                   (Text.Shakespeare.I18N.$fIsStringSomeMessage_$crenderMessage
                      @ Foundation.Balada)
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Data.Text.Internal.Text>_N))
                   Handlers.formPessoa13) -}
f5c76993e92dadd3247576fbed869d8a
  formPessoa13 :: Data.Text.Internal.Text
  {- Unfolding: (GHC.ST.runSTRep
                   @ Data.Text.Internal.Text
                   (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                    case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                    Text.Shakespeare.I18N.$fIsStringSomeMessage2
                      @ s1
                      (Data.Text.Array.MArray @ s1 ipv1)
                      Text.Shakespeare.I18N.$fIsStringSomeMessage1
                      Handlers.formPessoa14
                      0
                      ipv })) -}
7afa2a5e161ec14c807a6443f35f4739
  formPessoa14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "E-mail: "#) -}
83b4367e805684a0f136eccca844b1f3
  formPessoa15 ::
    (Yesod.Core.Class.Handler.HandlerSite
       (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
     [Data.Text.Internal.Text])
    -> GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
    -> Yesod.Form.Types.Ints
    -> Yesod.Core.Types.HandlerT
         Foundation.Balada
         GHC.Types.IO
         (Yesod.Form.Types.FormResult
            (Data.Text.Internal.Text
             -> Data.Text.Internal.Text
             -> Data.Text.Internal.Text
             -> Foundation.Pessoas),
          [Yesod.Form.Types.FieldView
             (Yesod.Core.Class.Handler.HandlerSite
                (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
          -> [Yesod.Form.Types.FieldView
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
          Yesod.Form.Types.Ints,
          Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ w4 :: (Yesod.Core.Class.Handler.HandlerSite
                            (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
                          [Data.Text.Internal.Text])
                   w5 :: GHC.Base.Maybe
                           (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
                   w6 :: Yesod.Form.Types.Ints ->
                 Yesod.Form.Types.$wa
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   Foundation.$fYesodBalada_$s$fMonadHandlerT
                   @ Data.Text.Internal.Text
                   @ (Data.Text.Internal.Text
                      -> Data.Text.Internal.Text
                      -> Data.Text.Internal.Text
                      -> Foundation.Pessoas)
                   Handlers.formPessoa16
                     `cast`
                   (Sym (Yesod.Form.Types.NTCo:AForm[0]
                             <Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO>_N
                             <Data.Text.Internal.Text
                              -> Data.Text.Internal.Text
                              -> Data.Text.Internal.Text
                              -> Data.Text.Internal.Text
                              -> Foundation.Pessoas>_N))
                   Handlers.formEstabelecimento21
                   w4
                   w5
                   w6) -}
c11f88958076c50acbd721676a56eabe
  formPessoa16 ::
    (Yesod.Core.Class.Handler.HandlerSite
       (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
     [Data.Text.Internal.Text])
    -> GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
    -> Yesod.Form.Types.Ints
    -> Yesod.Core.Types.HandlerT
         Foundation.Balada
         GHC.Types.IO
         (Yesod.Form.Types.FormResult
            (Data.Text.Internal.Text
             -> Data.Text.Internal.Text
             -> Data.Text.Internal.Text
             -> Data.Text.Internal.Text
             -> Foundation.Pessoas),
          [Yesod.Form.Types.FieldView
             (Yesod.Core.Class.Handler.HandlerSite
                (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
          -> [Yesod.Form.Types.FieldView
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
          Yesod.Form.Types.Ints,
          Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ w4 :: (Yesod.Core.Class.Handler.HandlerSite
                            (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
                          [Data.Text.Internal.Text])
                   w5 :: GHC.Base.Maybe
                           (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
                   w6 :: Yesod.Form.Types.Ints ->
                 Yesod.Form.Types.$wa
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   Foundation.$fYesodBalada_$s$fMonadHandlerT
                   @ Data.Text.Internal.Text
                   @ (Data.Text.Internal.Text
                      -> Data.Text.Internal.Text
                      -> Data.Text.Internal.Text
                      -> Data.Text.Internal.Text
                      -> Foundation.Pessoas)
                   Handlers.formPessoa17
                     `cast`
                   (Sym (Yesod.Form.Types.NTCo:AForm[0]
                             <Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO>_N
                             <Data.Text.Internal.Text
                              -> Data.Text.Internal.Text
                              -> Data.Text.Internal.Text
                              -> Data.Text.Internal.Text
                              -> Data.Text.Internal.Text
                              -> Foundation.Pessoas>_N))
                   Handlers.formLogin3
                   w4
                   w5
                   w6) -}
3e05bf07e421dcade9b1421ab2717335
  formPessoa17 ::
    (Yesod.Core.Class.Handler.HandlerSite
       (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
     [Data.Text.Internal.Text])
    -> GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
    -> Yesod.Form.Types.Ints
    -> Yesod.Core.Types.HandlerT
         Foundation.Balada
         GHC.Types.IO
         (Yesod.Form.Types.FormResult
            (Data.Text.Internal.Text
             -> Data.Text.Internal.Text
             -> Data.Text.Internal.Text
             -> Data.Text.Internal.Text
             -> Data.Text.Internal.Text
             -> Foundation.Pessoas),
          [Yesod.Form.Types.FieldView
             (Yesod.Core.Class.Handler.HandlerSite
                (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
          -> [Yesod.Form.Types.FieldView
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
          Yesod.Form.Types.Ints,
          Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ w4 :: (Yesod.Core.Class.Handler.HandlerSite
                            (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
                          [Data.Text.Internal.Text])
                   w5 :: GHC.Base.Maybe
                           (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
                   w6 :: Yesod.Form.Types.Ints ->
                 Yesod.Form.Types.$wa
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   Foundation.$fYesodBalada_$s$fMonadHandlerT
                   @ Data.Text.Internal.Text
                   @ (Data.Text.Internal.Text
                      -> Data.Text.Internal.Text
                      -> Data.Text.Internal.Text
                      -> Data.Text.Internal.Text
                      -> Data.Text.Internal.Text
                      -> Foundation.Pessoas)
                   Handlers.formPessoa23
                     `cast`
                   (Sym (Yesod.Form.Types.NTCo:AForm[0]
                             <Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO>_N
                             <Data.Text.Internal.Text
                              -> Data.Text.Internal.Text
                              -> Data.Text.Internal.Text
                              -> Data.Text.Internal.Text
                              -> Data.Text.Internal.Text
                              -> Data.Text.Internal.Text
                              -> Foundation.Pessoas>_N))
                   Handlers.formPessoa18
                   w4
                   w5
                   w6) -}
2a76d5ae0fb07d4633b23882575766f9
  formPessoa18 ::
    Yesod.Form.Types.AForm Foundation.Handler Data.Text.Internal.Text
  {- Unfolding: (Yesod.Form.Functions.areq
                   @ Foundation.Handler
                   @ Data.Text.Internal.Text
                   @ Foundation.Balada
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Yesod.Form.Types.FormMessage>_N))
                   (GHC.Types.Eq#
                      @ *
                      @ (Yesod.Core.Class.Handler.HandlerSite
                           (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))
                      @ Foundation.Balada
                      @~ (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formCategoria8
                   Handlers.formPessoa19
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)) -}
f8376d42503dc7d8114ea651a2a097e9
  formPessoa19 :: Yesod.Form.Types.FieldSettings Foundation.Balada
  {- Unfolding: (Yesod.Form.Types.FieldSettings
                   @ Foundation.Balada
                   Handlers.formPessoa20
                   (GHC.Base.Nothing
                      @ (Text.Shakespeare.I18N.SomeMessage Foundation.Balada))
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Types.[]
                      @ (Data.Text.Internal.Text, Data.Text.Internal.Text))) -}
7960125338f27ca1849782069cf2e01c
  formPessoa2 ::
    (Yesod.Core.Class.Handler.HandlerSite
       (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
     [Data.Text.Internal.Text])
    -> GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
    -> Yesod.Form.Types.Ints
    -> Yesod.Core.Types.HandlerT
         Foundation.Balada
         GHC.Types.IO
         (Yesod.Form.Types.FormResult Foundation.Pessoas,
          [Yesod.Form.Types.FieldView
             (Yesod.Core.Class.Handler.HandlerSite
                (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
          -> [Yesod.Form.Types.FieldView
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
          Yesod.Form.Types.Ints,
          Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ w4 :: (Yesod.Core.Class.Handler.HandlerSite
                            (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
                          [Data.Text.Internal.Text])
                   w5 :: GHC.Base.Maybe
                           (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
                   w6 :: Yesod.Form.Types.Ints ->
                 Yesod.Form.Types.$wa
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   Foundation.$fYesodBalada_$s$fMonadHandlerT
                   @ Data.Text.Internal.Text
                   @ Foundation.Pessoas
                   Handlers.formPessoa8
                     `cast`
                   (Sym (Yesod.Form.Types.NTCo:AForm[0]
                             <Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO>_N
                             <Data.Text.Internal.Text -> Foundation.Pessoas>_N))
                   Handlers.formPessoa3
                   w4
                   w5
                   w6) -}
236b53b629621f35e26ebafa7cf84e57
  formPessoa20 :: Text.Shakespeare.I18N.SomeMessage Foundation.Balada
  {- Unfolding: (Text.Shakespeare.I18N.SomeMessage
                   @ Foundation.Balada
                   @ Data.Text.Internal.Text
                   (Text.Shakespeare.I18N.$fIsStringSomeMessage_$crenderMessage
                      @ Foundation.Balada)
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Data.Text.Internal.Text>_N))
                   Handlers.formPessoa21) -}
edf3288b2626f022270db9c960114e61
  formPessoa21 :: Data.Text.Internal.Text
  {- Unfolding: (GHC.ST.runSTRep
                   @ Data.Text.Internal.Text
                   (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                    case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                    Text.Shakespeare.I18N.$fIsStringSomeMessage2
                      @ s1
                      (Data.Text.Array.MArray @ s1 ipv1)
                      Text.Shakespeare.I18N.$fIsStringSomeMessage1
                      Handlers.formPessoa22
                      0
                      ipv })) -}
fa5d0c78949ccdab992ae881d1c0a43b
  formPessoa22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Login "#) -}
56056b800fed0dc6b560661b746e2bf9
  formPessoa23 ::
    (Yesod.Core.Class.Handler.HandlerSite
       (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
     [Data.Text.Internal.Text])
    -> GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
    -> Yesod.Form.Types.Ints
    -> Yesod.Core.Types.HandlerT
         Foundation.Balada
         GHC.Types.IO
         (Yesod.Form.Types.FormResult
            (Data.Text.Internal.Text
             -> Data.Text.Internal.Text
             -> Data.Text.Internal.Text
             -> Data.Text.Internal.Text
             -> Data.Text.Internal.Text
             -> Data.Text.Internal.Text
             -> Foundation.Pessoas),
          [Yesod.Form.Types.FieldView
             (Yesod.Core.Class.Handler.HandlerSite
                (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
          -> [Yesod.Form.Types.FieldView
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
          Yesod.Form.Types.Ints,
          Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ w4 :: (Yesod.Core.Class.Handler.HandlerSite
                            (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
                          [Data.Text.Internal.Text])
                   w5 :: GHC.Base.Maybe
                           (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
                   w6 :: Yesod.Form.Types.Ints ->
                 Yesod.Form.Types.$wa
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   Foundation.$fYesodBalada_$s$fMonadHandlerT
                   @ Data.Text.Internal.Text
                   @ (Data.Text.Internal.Text
                      -> Data.Text.Internal.Text
                      -> Data.Text.Internal.Text
                      -> Data.Text.Internal.Text
                      -> Data.Text.Internal.Text
                      -> Data.Text.Internal.Text
                      -> Foundation.Pessoas)
                   Handlers.formPessoa28
                     `cast`
                   (Sym (Yesod.Form.Types.NTCo:AForm[0]
                             <Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO>_N
                             <Data.Text.Internal.Text
                              -> Data.Text.Internal.Text
                              -> Data.Text.Internal.Text
                              -> Data.Text.Internal.Text
                              -> Data.Text.Internal.Text
                              -> Data.Text.Internal.Text
                              -> Data.Text.Internal.Text
                              -> Foundation.Pessoas>_N))
                   Handlers.formPessoa24
                   w4
                   w5
                   w6) -}
b244ffbc10608561ab0c51bcc7d86aaf
  formPessoa24 ::
    Yesod.Form.Types.AForm Foundation.Handler Data.Text.Internal.Text
  {- Unfolding: (Yesod.Form.Functions.areq
                   @ Foundation.Handler
                   @ Data.Text.Internal.Text
                   @ Foundation.Balada
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Yesod.Form.Types.FormMessage>_N))
                   (GHC.Types.Eq#
                      @ *
                      @ (Yesod.Core.Class.Handler.HandlerSite
                           (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))
                      @ Foundation.Balada
                      @~ (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formCategoria8
                   Handlers.formPessoa25
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)) -}
007a47531ab2a5a420dd7df97c141c19
  formPessoa25 :: Yesod.Form.Types.FieldSettings Foundation.Balada
  {- Unfolding: (Yesod.Form.Types.FieldSettings
                   @ Foundation.Balada
                   Handlers.formPessoa26
                   (GHC.Base.Nothing
                      @ (Text.Shakespeare.I18N.SomeMessage Foundation.Balada))
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Types.[]
                      @ (Data.Text.Internal.Text, Data.Text.Internal.Text))) -}
3082928dfd764002c44de9c414489a73
  formPessoa26 :: Text.Shakespeare.I18N.SomeMessage Foundation.Balada
  {- Unfolding: (Text.Shakespeare.I18N.SomeMessage
                   @ Foundation.Balada
                   @ Data.Text.Internal.Text
                   (Text.Shakespeare.I18N.$fIsStringSomeMessage_$crenderMessage
                      @ Foundation.Balada)
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Data.Text.Internal.Text>_N))
                   Handlers.formPessoa27) -}
1181dccbccb47ee7d741ce51ba5e42bf
  formPessoa27 :: Data.Text.Internal.Text
  {- Unfolding: (GHC.ST.runSTRep
                   @ Data.Text.Internal.Text
                   (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                    case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                    Text.Shakespeare.I18N.$fIsStringSomeMessage2
                      @ s1
                      (Data.Text.Array.MArray @ s1 ipv1)
                      Text.Shakespeare.I18N.$fIsStringSomeMessage1
                      Handlers.formEstabelecimento31
                      0
                      ipv })) -}
bad99c9cca1fafa17c3b5c3aae88c6ee
  formPessoa28 ::
    (Yesod.Core.Class.Handler.HandlerSite
       (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
     [Data.Text.Internal.Text])
    -> GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
    -> Yesod.Form.Types.Ints
    -> Yesod.Core.Types.HandlerT
         Foundation.Balada
         GHC.Types.IO
         (Yesod.Form.Types.FormResult
            (Data.Text.Internal.Text
             -> Data.Text.Internal.Text
             -> Data.Text.Internal.Text
             -> Data.Text.Internal.Text
             -> Data.Text.Internal.Text
             -> Data.Text.Internal.Text
             -> Data.Text.Internal.Text
             -> Foundation.Pessoas),
          [Yesod.Form.Types.FieldView
             (Yesod.Core.Class.Handler.HandlerSite
                (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
          -> [Yesod.Form.Types.FieldView
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
          Yesod.Form.Types.Ints,
          Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: (\ eta :: (Yesod.Core.Class.Handler.HandlerSite
                             (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
                           [Data.Text.Internal.Text])
                   eta2 :: GHC.Base.Maybe
                             (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
                   eta3 :: Yesod.Form.Types.Ints ->
                 let {
                   ds :: Yesod.Core.Types.HandlerT
                           Foundation.Balada
                           GHC.Types.IO
                           (Yesod.Form.Types.FormResult Data.Text.Internal.Text,
                            [Yesod.Form.Types.FieldView
                               (Yesod.Core.Class.Handler.HandlerSite
                                  (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
                            -> [Yesod.Form.Types.FieldView
                                  (Yesod.Core.Class.Handler.HandlerSite
                                     (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
                            Yesod.Form.Types.Ints,
                            Yesod.Form.Types.Enctype)
                   = Handlers.formPessoa_ds
                       `cast`
                     (Yesod.Form.Types.NTCo:AForm[0]
                          <Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO>_N
                          <Data.Text.Internal.Text>_N)
                       eta
                       eta2
                       eta3
                 } in
                 (\ r :: Yesod.Core.Types.HandlerData
                           Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case (ds
                          `cast`
                        (Yesod.Core.Types.NTCo:HandlerT[0]
                             <Foundation.Balada>_N
                             <GHC.Types.IO>_N
                             <(Yesod.Form.Types.FormResult Data.Text.Internal.Text,
                               [Yesod.Form.Types.FieldView
                                  (Yesod.Core.Class.Handler.HandlerSite
                                     (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
                               -> [Yesod.Form.Types.FieldView
                                     (Yesod.Core.Class.Handler.HandlerSite
                                        (Yesod.Core.Types.HandlerT
                                           Foundation.Balada GHC.Types.IO))],
                               Yesod.Form.Types.Ints,
                               Yesod.Form.Types.Enctype)>_N)
                          r)
                         `cast`
                       (GHC.Types.NTCo:IO[0]
                            <(Yesod.Form.Types.FormResult Data.Text.Internal.Text,
                              [Yesod.Form.Types.FieldView
                                 (Yesod.Core.Class.Handler.HandlerSite
                                    (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
                              -> [Yesod.Form.Types.FieldView
                                    (Yesod.Core.Class.Handler.HandlerSite
                                       (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
                              Yesod.Form.Types.Ints,
                              Yesod.Form.Types.Enctype)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  (# ipv,
                     case ipv1 of wild { (,,,) w x3 y z ->
                     (case w of wild1 {
                        Yesod.Form.Types.FormMissing
                        -> Yesod.Form.Types.FormMissing
                             @ (Data.Text.Internal.Text
                                -> Data.Text.Internal.Text
                                -> Data.Text.Internal.Text
                                -> Data.Text.Internal.Text
                                -> Data.Text.Internal.Text
                                -> Data.Text.Internal.Text
                                -> Data.Text.Internal.Text
                                -> Foundation.Pessoas)
                        Yesod.Form.Types.FormFailure errs
                        -> Yesod.Form.Types.FormFailure
                             @ (Data.Text.Internal.Text
                                -> Data.Text.Internal.Text
                                -> Data.Text.Internal.Text
                                -> Data.Text.Internal.Text
                                -> Data.Text.Internal.Text
                                -> Data.Text.Internal.Text
                                -> Data.Text.Internal.Text
                                -> Foundation.Pessoas)
                             errs
                        Yesod.Form.Types.FormSuccess a36
                        -> Yesod.Form.Types.FormSuccess
                             @ (Data.Text.Internal.Text
                                -> Data.Text.Internal.Text
                                -> Data.Text.Internal.Text
                                -> Data.Text.Internal.Text
                                -> Data.Text.Internal.Text
                                -> Data.Text.Internal.Text
                                -> Data.Text.Internal.Text
                                -> Foundation.Pessoas)
                             (Foundation.$WPessoas a36) },
                      x3,
                      y,
                      z) } #) })
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <(Yesod.Form.Types.FormResult
                                         (Data.Text.Internal.Text
                                          -> Data.Text.Internal.Text
                                          -> Data.Text.Internal.Text
                                          -> Data.Text.Internal.Text
                                          -> Data.Text.Internal.Text
                                          -> Data.Text.Internal.Text
                                          -> Data.Text.Internal.Text
                                          -> Foundation.Pessoas),
                                       [Yesod.Form.Types.FieldView
                                          (Yesod.Core.Class.Handler.HandlerSite
                                             (Yesod.Core.Types.HandlerT
                                                Foundation.Balada GHC.Types.IO))]
                                       -> [Yesod.Form.Types.FieldView
                                             (Yesod.Core.Class.Handler.HandlerSite
                                                (Yesod.Core.Types.HandlerT
                                                   Foundation.Balada GHC.Types.IO))],
                                       Yesod.Form.Types.Ints,
                                       Yesod.Form.Types.Enctype)>_R))
                      (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                <Foundation.Balada>_N
                                <GHC.Types.IO>_N
                                <(Yesod.Form.Types.FormResult
                                    (Data.Text.Internal.Text
                                     -> Data.Text.Internal.Text
                                     -> Data.Text.Internal.Text
                                     -> Data.Text.Internal.Text
                                     -> Data.Text.Internal.Text
                                     -> Data.Text.Internal.Text
                                     -> Data.Text.Internal.Text
                                     -> Foundation.Pessoas),
                                  [Yesod.Form.Types.FieldView
                                     (Yesod.Core.Class.Handler.HandlerSite
                                        (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
                                  -> [Yesod.Form.Types.FieldView
                                        (Yesod.Core.Class.Handler.HandlerSite
                                           (Yesod.Core.Types.HandlerT
                                              Foundation.Balada GHC.Types.IO))],
                                  Yesod.Form.Types.Ints,
                                  Yesod.Form.Types.Enctype)>_N)))) -}
39990990c39e2181e8309ecb871798c8
  formPessoa29 :: Yesod.Form.Types.FieldSettings Foundation.Balada
  {- Unfolding: (Yesod.Form.Types.FieldSettings
                   @ Foundation.Balada
                   Handlers.formPessoa36
                   (GHC.Base.Nothing
                      @ (Text.Shakespeare.I18N.SomeMessage Foundation.Balada))
                   Handlers.formPessoa34
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   Handlers.formPessoa30) -}
420dea1597c62ceebdaebc8551f797e5
  formPessoa3 ::
    Yesod.Form.Types.AForm Foundation.Handler Data.Text.Internal.Text
  {- Unfolding: (Yesod.Form.Functions.areq
                   @ Foundation.Handler
                   @ Data.Text.Internal.Text
                   @ Foundation.Balada
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Yesod.Form.Types.FormMessage>_N))
                   (GHC.Types.Eq#
                      @ *
                      @ (Yesod.Core.Class.Handler.HandlerSite
                           (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))
                      @ Foundation.Balada
                      @~ (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formCategoria8
                   Handlers.formPessoa4
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)) -}
2aea6e3b5625a0f40203f12580d41f42
  formPessoa30 ::
    [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
  {- Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Data.Text.Internal.Text)
                   Handlers.formPessoa31
                   (GHC.Types.[]
                      @ (Data.Text.Internal.Text, Data.Text.Internal.Text))) -}
3050cb48a5db4d788bc065db6d3c071f
  formPessoa31 :: (Data.Text.Internal.Text, Data.Text.Internal.Text)
  {- Unfolding: ((Handlers.formPessoa33, Handlers.formPessoa32)) -}
ec7aead3070a16ca190499ef6e63ca48
  formPessoa32 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "11"#) -}
ebe4f1f8124c3d3a3915868e5d2657c4
  formPessoa33 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "maxlength"#) -}
ecd2e4b9863a100af0a62fe8a6332d12
  formPessoa34 :: GHC.Base.Maybe Data.Text.Internal.Text
  {- Unfolding: (GHC.Base.Just
                   @ Data.Text.Internal.Text
                   Handlers.formPessoa35) -}
336d1339a8b548415249023e9c718d89
  formPessoa35 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "hident2"#) -}
bca60063d92d9ba7c2df36172dd31047
  formPessoa36 :: Text.Shakespeare.I18N.SomeMessage Foundation.Balada
  {- Unfolding: (Text.Shakespeare.I18N.SomeMessage
                   @ Foundation.Balada
                   @ Data.Text.Internal.Text
                   (Text.Shakespeare.I18N.$fIsStringSomeMessage_$crenderMessage
                      @ Foundation.Balada)
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Data.Text.Internal.Text>_N))
                   Handlers.formPessoa37) -}
d6ef75f660a262522e6d6f9eaea5b8c3
  formPessoa37 :: Data.Text.Internal.Text
  {- Unfolding: (GHC.ST.runSTRep
                   @ Data.Text.Internal.Text
                   Handlers.formPessoa38) -}
a5e43f1c2a22e392191c022368c90b65
  formPessoa38 ::
    GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                 case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                 Text.Shakespeare.I18N.$fIsStringSomeMessage2
                   @ s1
                   (Data.Text.Array.MArray @ s1 ipv1)
                   Text.Shakespeare.I18N.$fIsStringSomeMessage1
                   Handlers.formPessoa39
                   0
                   ipv }) -}
eb74e08d408d705d397da5b56d853eca
  formPessoa39 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CPF"#) -}
6d78ebb2a4cc7305d3391d9a589b62fe
  formPessoa4 :: Yesod.Form.Types.FieldSettings Foundation.Balada
  {- Unfolding: (Yesod.Form.Types.FieldSettings
                   @ Foundation.Balada
                   Handlers.formPessoa5
                   (GHC.Base.Nothing
                      @ (Text.Shakespeare.I18N.SomeMessage Foundation.Balada))
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Types.[]
                      @ (Data.Text.Internal.Text, Data.Text.Internal.Text))) -}
13e4d111e6007a573e05dbde7ffe10e3
  formPessoa5 :: Text.Shakespeare.I18N.SomeMessage Foundation.Balada
  {- Unfolding: (Text.Shakespeare.I18N.SomeMessage
                   @ Foundation.Balada
                   @ Data.Text.Internal.Text
                   (Text.Shakespeare.I18N.$fIsStringSomeMessage_$crenderMessage
                      @ Foundation.Balada)
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Data.Text.Internal.Text>_N))
                   Handlers.formPessoa6) -}
99d269b423e3f590b3b9b112879fc8d0
  formPessoa6 :: Data.Text.Internal.Text
  {- Unfolding: (GHC.ST.runSTRep
                   @ Data.Text.Internal.Text
                   (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                    case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                    Text.Shakespeare.I18N.$fIsStringSomeMessage2
                      @ s1
                      (Data.Text.Array.MArray @ s1 ipv1)
                      Text.Shakespeare.I18N.$fIsStringSomeMessage1
                      Handlers.formPessoa7
                      0
                      ipv })) -}
64ce460c4922399902477abca40181dc
  formPessoa7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Celular: "#) -}
e22bddf2c682aff5edee2d0fbecefbab
  formPessoa8 ::
    (Yesod.Core.Class.Handler.HandlerSite
       (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
     [Data.Text.Internal.Text])
    -> GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
    -> Yesod.Form.Types.Ints
    -> Yesod.Core.Types.HandlerT
         Foundation.Balada
         GHC.Types.IO
         (Yesod.Form.Types.FormResult
            (Data.Text.Internal.Text -> Foundation.Pessoas),
          [Yesod.Form.Types.FieldView
             (Yesod.Core.Class.Handler.HandlerSite
                (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
          -> [Yesod.Form.Types.FieldView
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
          Yesod.Form.Types.Ints,
          Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ w4 :: (Yesod.Core.Class.Handler.HandlerSite
                            (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
                          [Data.Text.Internal.Text])
                   w5 :: GHC.Base.Maybe
                           (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
                   w6 :: Yesod.Form.Types.Ints ->
                 Yesod.Form.Types.$wa
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   Foundation.$fYesodBalada_$s$fMonadHandlerT
                   @ Data.Text.Internal.Text
                   @ (Data.Text.Internal.Text -> Foundation.Pessoas)
                   Handlers.formPessoa9
                     `cast`
                   (Sym (Yesod.Form.Types.NTCo:AForm[0]
                             <Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO>_N
                             <Data.Text.Internal.Text
                              -> Data.Text.Internal.Text -> Foundation.Pessoas>_N))
                   Handlers.formEstabelecimento9
                   w4
                   w5
                   w6) -}
66fe388cf8da90a668b66ebc299e0ef6
  formPessoa9 ::
    (Yesod.Core.Class.Handler.HandlerSite
       (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
     [Data.Text.Internal.Text])
    -> GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
    -> Yesod.Form.Types.Ints
    -> Yesod.Core.Types.HandlerT
         Foundation.Balada
         GHC.Types.IO
         (Yesod.Form.Types.FormResult
            (Data.Text.Internal.Text
             -> Data.Text.Internal.Text -> Foundation.Pessoas),
          [Yesod.Form.Types.FieldView
             (Yesod.Core.Class.Handler.HandlerSite
                (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
          -> [Yesod.Form.Types.FieldView
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
          Yesod.Form.Types.Ints,
          Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ w4 :: (Yesod.Core.Class.Handler.HandlerSite
                            (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
                          [Data.Text.Internal.Text])
                   w5 :: GHC.Base.Maybe
                           (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
                   w6 :: Yesod.Form.Types.Ints ->
                 Yesod.Form.Types.$wa
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   Foundation.$fYesodBalada_$s$fMonadHandlerT
                   @ Data.Text.Internal.Text
                   @ (Data.Text.Internal.Text
                      -> Data.Text.Internal.Text -> Foundation.Pessoas)
                   Handlers.formPessoa15
                     `cast`
                   (Sym (Yesod.Form.Types.NTCo:AForm[0]
                             <Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO>_N
                             <Data.Text.Internal.Text
                              -> Data.Text.Internal.Text
                              -> Data.Text.Internal.Text
                              -> Foundation.Pessoas>_N))
                   Handlers.formPessoa10
                   w4
                   w5
                   w6) -}
df14ff9783e0b9ec499d82755c4acd30
  formPessoa_ds ::
    Yesod.Form.Types.AForm
      (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
      Data.Text.Internal.Text
  {- Unfolding: (Yesod.Form.Functions.areq
                   @ Foundation.Handler
                   @ Data.Text.Internal.Text
                   @ Foundation.Balada
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Yesod.Form.Types.FormMessage>_N))
                   (GHC.Types.Eq#
                      @ *
                      @ (Yesod.Core.Class.Handler.HandlerSite
                           (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))
                      @ Foundation.Balada
                      @~ (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formCategoria8
                   Handlers.formPessoa29
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)) -}
af96554dbfb6247db7ab2e8af6c96ec2
  formSubcategoria :: Foundation.Form Foundation.Sub_categ_estab
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Handlers.formSubcategoria1
                  `cast`
                (<Text.Blaze.Internal.MarkupM ()>_R
                 ->_R Sym (Control.Monad.Trans.RWS.Lazy.NTCo:RWST[0]
                               <(GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                                 Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                                 [Text.Shakespeare.I18N.Lang])>_R
                               <Yesod.Form.Types.Enctype>_N
                               <Yesod.Form.Types.Ints>_N
                               <Foundation.Handler>_R
                               ((<Yesod.Form.Types.FormResult Foundation.Sub_categ_estab>_N,
                                 (Yesod.Core.Types.WidgetT
                                    (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                                    <GHC.Types.IO>_N
                                    <()>_N)_N))_N)) -}
b75067a510f083fc94e26664a5a9bf23
  formSubcategoria1 ::
    Text.Blaze.Internal.Markup
    -> (GHC.Base.Maybe
          (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
        Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
        [Text.Shakespeare.I18N.Lang])
    -> Yesod.Form.Types.Ints
    -> Foundation.Handler
         ((Yesod.Form.Types.FormResult Foundation.Sub_categ_estab,
           Yesod.Core.Types.WidgetT
             (Yesod.Core.Class.Handler.HandlerSite Foundation.Handler)
             GHC.Types.IO
             ()),
          Yesod.Form.Types.Ints,
          Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta2 :: Text.Blaze.Internal.Markup
                   eta3 :: (GHC.Base.Maybe
                              (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                            Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                            [Text.Shakespeare.I18N.Lang])
                   eta4 :: Yesod.Form.Types.Ints ->
                 Yesod.Form.Functions.renderDivs2
                   @ Foundation.Handler
                   @ Foundation.Sub_categ_estab
                   Foundation.$fYesodBalada_$s$fMonadHandlerT
                   GHC.Types.True
                   Handlers.formSubcategoria2
                     `cast`
                   (Sym (Yesod.Form.Types.NTCo:AForm[0]
                             <Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO>_N
                             <Foundation.Sub_categ_estab>_N))
                   eta2
                   eta3
                   eta4) -}
ef5e35d82d04a3ea474ade3de467aec0
  formSubcategoria10 ::
    Text.Shakespeare.I18N.SomeMessage Foundation.Balada
  {- Unfolding: (Text.Shakespeare.I18N.SomeMessage
                   @ Foundation.Balada
                   @ Data.Text.Internal.Text
                   (Text.Shakespeare.I18N.$fIsStringSomeMessage_$crenderMessage
                      @ Foundation.Balada)
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Data.Text.Internal.Text>_N))
                   Handlers.formSubcategoria11) -}
1d46eeca0a7c329d883b688ef71e3974
  formSubcategoria11 :: Data.Text.Internal.Text
  {- Unfolding: (GHC.ST.runSTRep
                   @ Data.Text.Internal.Text
                   Handlers.formSubcategoria12) -}
3100cb228da7f263cae7a3347f4fdff5
  formSubcategoria12 ::
    GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                 case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                 Text.Shakespeare.I18N.$fIsStringSomeMessage2
                   @ s1
                   (Data.Text.Array.MArray @ s1 ipv1)
                   Text.Shakespeare.I18N.$fIsStringSomeMessage1
                   Handlers.formSubcategoria13
                   0
                   ipv }) -}
4bb908e254e9cd18e8c5af83802e3329
  formSubcategoria13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Categoria"#) -}
c47d7217af24dda427aa9a7fd2f547c4
  formSubcategoria2 ::
    (Yesod.Core.Class.Handler.HandlerSite
       (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
     [Data.Text.Internal.Text])
    -> GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
    -> Yesod.Form.Types.Ints
    -> Yesod.Core.Types.HandlerT
         Foundation.Balada
         GHC.Types.IO
         (Yesod.Form.Types.FormResult Foundation.Sub_categ_estab,
          [Yesod.Form.Types.FieldView
             (Yesod.Core.Class.Handler.HandlerSite
                (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
          -> [Yesod.Form.Types.FieldView
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
          Yesod.Form.Types.Ints,
          Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ w4 :: (Yesod.Core.Class.Handler.HandlerSite
                            (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
                          [Data.Text.Internal.Text])
                   w5 :: GHC.Base.Maybe
                           (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
                   w6 :: Yesod.Form.Types.Ints ->
                 Yesod.Form.Types.$wa
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   Foundation.$fYesodBalada_$s$fMonadHandlerT
                   @ Data.Text.Internal.Text
                   @ Foundation.Sub_categ_estab
                   Handlers.formSubcategoria8
                     `cast`
                   (Sym (Yesod.Form.Types.NTCo:AForm[0]
                             <Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO>_N
                             <Data.Text.Internal.Text -> Foundation.Sub_categ_estab>_N))
                   Handlers.formSubcategoria3
                   w4
                   w5
                   w6) -}
6dccf465b974e3ea7d48eac48fa2d2af
  formSubcategoria3 ::
    Yesod.Form.Types.AForm Foundation.Handler Data.Text.Internal.Text
  {- Unfolding: (Yesod.Form.Functions.areq
                   @ Foundation.Handler
                   @ Data.Text.Internal.Text
                   @ Foundation.Balada
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Yesod.Form.Types.FormMessage>_N))
                   (GHC.Types.Eq#
                      @ *
                      @ (Yesod.Core.Class.Handler.HandlerSite
                           (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))
                      @ Foundation.Balada
                      @~ (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formCategoria8
                   Handlers.formSubcategoria4
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)) -}
87b6bdc88d82adda18b2405ea7abe8bf
  formSubcategoria4 ::
    Yesod.Form.Types.FieldSettings Foundation.Balada
  {- Unfolding: (Yesod.Form.Types.FieldSettings
                   @ Foundation.Balada
                   Handlers.formSubcategoria5
                   (GHC.Base.Nothing
                      @ (Text.Shakespeare.I18N.SomeMessage Foundation.Balada))
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Types.[]
                      @ (Data.Text.Internal.Text, Data.Text.Internal.Text))) -}
c79f71cf42203eaad84ca19e2b326f60
  formSubcategoria5 ::
    Text.Shakespeare.I18N.SomeMessage Foundation.Balada
  {- Unfolding: (Text.Shakespeare.I18N.SomeMessage
                   @ Foundation.Balada
                   @ Data.Text.Internal.Text
                   (Text.Shakespeare.I18N.$fIsStringSomeMessage_$crenderMessage
                      @ Foundation.Balada)
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Data.Text.Internal.Text>_N))
                   Handlers.formSubcategoria6) -}
39131ea8947cdaad0036a04f296c431b
  formSubcategoria6 :: Data.Text.Internal.Text
  {- Unfolding: (GHC.ST.runSTRep
                   @ Data.Text.Internal.Text
                   (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                    case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                    Text.Shakespeare.I18N.$fIsStringSomeMessage2
                      @ s1
                      (Data.Text.Array.MArray @ s1 ipv1)
                      Text.Shakespeare.I18N.$fIsStringSomeMessage1
                      Handlers.formSubcategoria7
                      0
                      ipv })) -}
a35553aa7bcbec7b48500f3c617914c9
  formSubcategoria7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Subcategoria: "#) -}
1bf20a517fc2fa2e3d2e91c0d9ea0644
  formSubcategoria8 ::
    (Yesod.Core.Class.Handler.HandlerSite
       (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
     [Data.Text.Internal.Text])
    -> GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
    -> Yesod.Form.Types.Ints
    -> Yesod.Core.Types.HandlerT
         Foundation.Balada
         GHC.Types.IO
         (Yesod.Form.Types.FormResult
            (Data.Text.Internal.Text -> Foundation.Sub_categ_estab),
          [Yesod.Form.Types.FieldView
             (Yesod.Core.Class.Handler.HandlerSite
                (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
          -> [Yesod.Form.Types.FieldView
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
          Yesod.Form.Types.Ints,
          Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: (\ eta :: (Yesod.Core.Class.Handler.HandlerSite
                             (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO),
                           [Data.Text.Internal.Text])
                   eta2 :: GHC.Base.Maybe
                             (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
                   eta3 :: Yesod.Form.Types.Ints ->
                 let {
                   ds :: Yesod.Core.Types.HandlerT
                           Foundation.Balada
                           GHC.Types.IO
                           (Yesod.Form.Types.FormResult Data.Text.Internal.Text,
                            [Yesod.Form.Types.FieldView
                               (Yesod.Core.Class.Handler.HandlerSite
                                  (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
                            -> [Yesod.Form.Types.FieldView
                                  (Yesod.Core.Class.Handler.HandlerSite
                                     (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
                            Yesod.Form.Types.Ints,
                            Yesod.Form.Types.Enctype)
                   = Handlers.formSubcategoria_ds
                       `cast`
                     (Yesod.Form.Types.NTCo:AForm[0]
                          <Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO>_N
                          <Data.Text.Internal.Text>_N)
                       eta
                       eta2
                       eta3
                 } in
                 (\ r :: Yesod.Core.Types.HandlerData
                           Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case (ds
                          `cast`
                        (Yesod.Core.Types.NTCo:HandlerT[0]
                             <Foundation.Balada>_N
                             <GHC.Types.IO>_N
                             <(Yesod.Form.Types.FormResult Data.Text.Internal.Text,
                               [Yesod.Form.Types.FieldView
                                  (Yesod.Core.Class.Handler.HandlerSite
                                     (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
                               -> [Yesod.Form.Types.FieldView
                                     (Yesod.Core.Class.Handler.HandlerSite
                                        (Yesod.Core.Types.HandlerT
                                           Foundation.Balada GHC.Types.IO))],
                               Yesod.Form.Types.Ints,
                               Yesod.Form.Types.Enctype)>_N)
                          r)
                         `cast`
                       (GHC.Types.NTCo:IO[0]
                            <(Yesod.Form.Types.FormResult Data.Text.Internal.Text,
                              [Yesod.Form.Types.FieldView
                                 (Yesod.Core.Class.Handler.HandlerSite
                                    (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
                              -> [Yesod.Form.Types.FieldView
                                    (Yesod.Core.Class.Handler.HandlerSite
                                       (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))],
                              Yesod.Form.Types.Ints,
                              Yesod.Form.Types.Enctype)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  (# ipv,
                     case ipv1 of wild { (,,,) w x3 y z ->
                     (case w of wild1 {
                        Yesod.Form.Types.FormMissing
                        -> Yesod.Form.Types.FormMissing
                             @ (Data.Text.Internal.Text -> Foundation.Sub_categ_estab)
                        Yesod.Form.Types.FormFailure errs
                        -> Yesod.Form.Types.FormFailure
                             @ (Data.Text.Internal.Text -> Foundation.Sub_categ_estab)
                             errs
                        Yesod.Form.Types.FormSuccess a36
                        -> Yesod.Form.Types.FormSuccess
                             @ (Data.Text.Internal.Text -> Foundation.Sub_categ_estab)
                             (Foundation.$WSub_categ_estab a36) },
                      x3,
                      y,
                      z) } #) })
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <(Yesod.Form.Types.FormResult
                                         (Data.Text.Internal.Text -> Foundation.Sub_categ_estab),
                                       [Yesod.Form.Types.FieldView
                                          (Yesod.Core.Class.Handler.HandlerSite
                                             (Yesod.Core.Types.HandlerT
                                                Foundation.Balada GHC.Types.IO))]
                                       -> [Yesod.Form.Types.FieldView
                                             (Yesod.Core.Class.Handler.HandlerSite
                                                (Yesod.Core.Types.HandlerT
                                                   Foundation.Balada GHC.Types.IO))],
                                       Yesod.Form.Types.Ints,
                                       Yesod.Form.Types.Enctype)>_R))
                      (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                <Foundation.Balada>_N
                                <GHC.Types.IO>_N
                                <(Yesod.Form.Types.FormResult
                                    (Data.Text.Internal.Text -> Foundation.Sub_categ_estab),
                                  [Yesod.Form.Types.FieldView
                                     (Yesod.Core.Class.Handler.HandlerSite
                                        (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))]
                                  -> [Yesod.Form.Types.FieldView
                                        (Yesod.Core.Class.Handler.HandlerSite
                                           (Yesod.Core.Types.HandlerT
                                              Foundation.Balada GHC.Types.IO))],
                                  Yesod.Form.Types.Ints,
                                  Yesod.Form.Types.Enctype)>_N)))) -}
406204430c1a27816ed7bafce874961c
  formSubcategoria9 ::
    Yesod.Form.Types.FieldSettings Foundation.Balada
  {- Unfolding: (Yesod.Form.Types.FieldSettings
                   @ Foundation.Balada
                   Handlers.formSubcategoria10
                   (GHC.Base.Nothing
                      @ (Text.Shakespeare.I18N.SomeMessage Foundation.Balada))
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Types.[]
                      @ (Data.Text.Internal.Text, Data.Text.Internal.Text))) -}
b54367365b2b61a8cabd4baaffc0329e
  formSubcategoria_ds ::
    Yesod.Form.Types.AForm
      (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
      Data.Text.Internal.Text
  {- Unfolding: (Yesod.Form.Functions.areq
                   @ Foundation.Handler
                   @ Data.Text.Internal.Text
                   @ Foundation.Balada
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             <Foundation.Balada>_N <Yesod.Form.Types.FormMessage>_N))
                   (GHC.Types.Eq#
                      @ *
                      @ (Yesod.Core.Class.Handler.HandlerSite
                           (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO))
                      @ Foundation.Balada
                      @~ (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formCategoria8
                   Handlers.formSubcategoria9
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)) -}
ee326b07ee6724d4ad3b3f8847a905f8
  getAboutR ::
    Yesod.Core.Types.HandlerT
      Foundation.Balada GHC.Types.IO Text.Blaze.Html.Html
  {- Unfolding: (Foundation.$fYesodBalada_$cdefaultLayout
                   Handlers.getAboutR1
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                             <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))) -}
e946c87170ba932dd1abf222560e74c4
  getAboutR1 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 1,
     Unfolding: (\ eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ ()
                   @ ()
                   Handlers.getAboutR13
                     `cast`
                   (Trans
                        (<Yesod.Core.Types.HandlerData
                            Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0]
                                       ((<()>_R,
                                         (Yesod.Core.Types.GWData
                                            (Yesod.Routes.Class.Route
                                               (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                         <Foundation.Balada>_N
                                                         <GHC.Types.IO>_N)))_R)_R))_R))
                        (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                   Handlers.getAboutR2
                     `cast`
                   (<()>_R
                    ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                   eta) -}
b61ee157962573257017e0630b61b2db
  getAboutR10 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ w4 :: Yesod.Core.Types.HandlerData
                           Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ (Yesod.Routes.Class.Route Foundation.Balada
                      -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                      -> Data.Text.Internal.Text)
                   @ ()
                   Handlers.getAboutR12
                     `cast`
                   (Yesod.Core.Types.WidgetT
                      <Foundation.Balada>_N
                      <GHC.Types.IO>_N
                      ((Yesod.Routes.Class.Route
                          (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                               <Foundation.Balada>_N <GHC.Types.IO>_N))_N
                       ->_N <[(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                             -> Data.Text.Internal.Text>_N))_R
                   Handlers.getAboutR11
                   w4) -}
630d148eac08238403c5ca0a276f4f77
  getAboutR11 ::
    (Yesod.Routes.Class.Route Foundation.Balada
     -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
     -> Data.Text.Internal.Text)
    -> Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*C1(C1(U(U,U,U)))>,
     Unfolding: (\ urender :: Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text ->
                 let {
                   a36 :: Data.Text.Internal.Text
                   = urender
                       Foundation.HomeR
                         `cast`
                       (Sub (Sym (Foundation.TFCo:R:RouteBalada[0])))
                       (GHC.Types.[] @ (Data.Text.Internal.Text, Data.Text.Internal.Text))
                 } in
                 let {
                   a37 :: Text.Blaze.Internal.ChoiceString
                   = Text.Blaze.Internal.Text a36
                 } in
                 let {
                   x3 :: Text.Blaze.Html.Html = Text.Blaze.Internal.Content @ () a37
                 } in
                 let {
                   a38 :: Yesod.Core.Types.RY Foundation.Balada
                          -> Text.Blaze.Html.Html
                     {- Arity: 1 -}
                   = \ ds :: Yesod.Core.Types.RY Foundation.Balada -> x3
                 } in
                 let {
                   a39 :: Yesod.Core.Types.GWData
                            (Yesod.Routes.Class.Route Foundation.Balada)
                   = Yesod.Core.Types.GWData
                       @ (Yesod.Routes.Class.Route Foundation.Balada)
                       a38
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Body[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                       (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                         `cast`
                       (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Script
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Script
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Stylesheet
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Stylesheet
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (Data.Map.Base.Tip
                          @ (GHC.Base.Maybe Data.Text.Internal.Text)
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Data.Text.Internal.Builder.Builder))
                       (GHC.Base.Nothing
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Text.Julius.Javascript))
                       (Yesod.Core.Types.$fApplicativeWidgetT2
                          @ (Yesod.Routes.Class.Route Foundation.Balada))
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Head[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                 } in
                 let {
                   lvl119 :: ((),
                              Yesod.Core.Types.GWData
                                (Yesod.Routes.Class.Route
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))))
                   = (GHC.Tuple.(),
                      a39
                        `cast`
                      (Yesod.Core.Types.GWData
                         (Yesod.Routes.Class.Route
                            (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)
                 } in
                 (\ eta :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  (# eta2, lvl119 #))
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     ((<()>_R,
                                       (Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route
                                             (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                       <Foundation.Balada>_N
                                                       <GHC.Types.IO>_N)))_R)_R))_R))
                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))) -}
ff2cdacee5bce4223751a803ec8e9f87
  getAboutR12 ::
    Yesod.Core.Types.WidgetT
      Foundation.Balada
      GHC.Types.IO
      (Yesod.Routes.Class.Route
         (Yesod.Core.Class.Handler.HandlerSite
            (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))
       -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
       -> Data.Text.Internal.Text)
  {- Unfolding: (Yesod.Core.Handler.getUrlRenderParams
                   @ (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)
                   Handlers.$s$fMonadHandlerWidgetT) -}
49270e083fefe1459a1cbee5bea2525f
  getAboutR13 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Yesod.Core.Types.GWData
             (Yesod.Routes.Class.Route
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)))) #)
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta2 :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta,
                    (GHC.Tuple.(),
                     (Yesod.Core.Types.GWData
                        @ (Yesod.Routes.Class.Route Foundation.Balada)
                        (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                         Handlers.getAboutR_x1)
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Body[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R))
                        (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                          `cast`
                        (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Script
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Stylesheet
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (Data.Map.Base.Tip
                           @ (GHC.Base.Maybe Data.Text.Internal.Text)
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Data.Text.Internal.Builder.Builder))
                        (GHC.Base.Nothing
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Text.Julius.Javascript))
                        (Yesod.Core.Types.$fApplicativeWidgetT2
                           @ (Yesod.Routes.Class.Route Foundation.Balada))
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Head[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R)))
                       `cast`
                     (Yesod.Core.Types.GWData
                        (Yesod.Routes.Class.Route
                           (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                     <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R) #)) -}
4f34cf9ef1ca0dc9dc309c094bfa0415
  getAboutR14 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.PreEscaped
                   Handlers.getAboutR15) -}
af1ab0de8bd26276ff35966d10018a50
  getAboutR15 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.Text Handlers.getAboutR16) -}
7a620df5bf232048837a0b67d230e008
  getAboutR16 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "Essa pagina foi criada para acelerar o processo de decidir roles!!!\n\
                   \<a href=\""#) -}
2158bb442b9946317c6e15b860337e3f
  getAboutR2 ::
    ()
    -> Yesod.Core.Types.HandlerData
         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 2,
     Unfolding: (\ ds :: ()
                   eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada
                            (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ ()
                   @ ()
                   Handlers.getAboutR10
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                             <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                   Handlers.getAboutR3
                     `cast`
                   (<()>_R
                    ->_R Trans
                             (<Yesod.Core.Types.HandlerData
                                 Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                              ->_R Sym (GHC.Types.NTCo:IO[0]
                                            ((<()>_R,
                                              (Yesod.Core.Types.GWData
                                                 (Yesod.Routes.Class.Route
                                                    (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                              <Foundation.Balada>_N
                                                              <GHC.Types.IO>_N)))_R)_R))_R))
                             (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                       <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                   eta) -}
a5d48e3ece29da41b38d470eba1d7297
  getAboutR3 ::
    ()
    -> Yesod.Core.Types.HandlerData
         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Yesod.Core.Types.GWData
             (Yesod.Routes.Class.Route
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)))) #)
  {- Arity: 3,
     Unfolding: (\ ds :: ()
                   eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada
                            (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot]
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta2, Handlers.getAboutR4 #)) -}
1acc3d5aa6915835382e09758e6294da
  getAboutR4 ::
    ((),
     Yesod.Core.Types.GWData
       (Yesod.Routes.Class.Route
          (Yesod.Core.Class.Handler.HandlerSite
             (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))))
  {- Unfolding: ((GHC.Tuple.(),
                  Handlers.getAboutR5
                    `cast`
                  (Yesod.Core.Types.GWData
                     (Yesod.Routes.Class.Route
                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)) -}
3ea2cb42cb0c10e1c9a9fe1b36d0d141
  getAboutR5 ::
    Yesod.Core.Types.GWData
      (Yesod.Routes.Class.Route Foundation.Balada)
  {- Unfolding: (Yesod.Core.Types.GWData
                   @ (Yesod.Routes.Class.Route Foundation.Balada)
                   Handlers.getAboutR6
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:Body[0]
                             <Yesod.Routes.Class.Route Foundation.Balada>_R))
                   (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                     `cast`
                   (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Script
                           (Yesod.Routes.Class.Route Foundation.Balada)])
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                             <Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Stylesheet
                           (Yesod.Routes.Class.Route Foundation.Balada)])
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                             <Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                   (Data.Map.Base.Tip
                      @ (GHC.Base.Maybe Data.Text.Internal.Text)
                      @ ((Yesod.Routes.Class.Route Foundation.Balada
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Data.Text.Internal.Builder.Builder))
                   (GHC.Base.Nothing
                      @ ((Yesod.Routes.Class.Route Foundation.Balada
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Text.Julius.Javascript))
                   (Yesod.Core.Types.$fApplicativeWidgetT2
                      @ (Yesod.Routes.Class.Route Foundation.Balada))
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:Head[0]
                             <Yesod.Routes.Class.Route Foundation.Balada>_R))) -}
560b28826e2e63e4795b5a87b37990d3
  getAboutR6 ::
    Yesod.Core.Types.RY Foundation.Balada -> Text.Blaze.Html.Html
  {- Arity: 1,
     Unfolding: (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                 Handlers.getAboutR_x) -}
264f72f9a42b0d30e98e823f8c1f5d1c
  getAboutR7 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.PreEscaped
                   Handlers.getAboutR8) -}
c454ca21d6afe13f939126a8d1b92150
  getAboutR8 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.Text Handlers.getAboutR9) -}
94e369e1e33e3db808fc8a2e54ff6ce2
  getAboutR9 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\">Back Home</a>\n"#) -}
937f88c759e9a4d0c55a03aee11b63ba
  getAboutR_x :: Text.Blaze.Html.Html
  {- Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.getAboutR7) -}
7ddd34ce6fb445b980c0d123ea8c68a8
  getAboutR_x1 :: Text.Blaze.Html.Html
  {- Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.getAboutR14) -}
483b7cdc9db7deb3d056c0b6eb45fbf0
  getAdminR :: Foundation.Handler Text.Blaze.Html.Html
  {- Unfolding: (Foundation.$fYesodBalada_$cdefaultLayout
                   Handlers.getAdminR1
                     `cast`
                   (Trans
                        (<Yesod.Core.Types.HandlerData
                            Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0]
                                       ((<()>_R,
                                         (Yesod.Core.Types.GWData
                                            (Yesod.Routes.Class.Route
                                               (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                         <Foundation.Balada>_N
                                                         <GHC.Types.IO>_N)))_R)_R))_R))
                        (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))) -}
bebceb4f86f3dae49df8c7051ee5109a
  getAdminR1 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Yesod.Core.Types.GWData
             (Yesod.Routes.Class.Route
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)))) #)
  {- Arity: 2,
     Unfolding: (\ eta2 :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta, Handlers.getAdminR2 #)) -}
0a1657621119d812762cdd791f6220e3
  getAdminR2 ::
    ((),
     Yesod.Core.Types.GWData
       (Yesod.Routes.Class.Route
          (Yesod.Core.Class.Handler.HandlerSite
             (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))))
  {- Unfolding: ((GHC.Tuple.(),
                  Handlers.getAdminR3
                    `cast`
                  (Yesod.Core.Types.GWData
                     (Yesod.Routes.Class.Route
                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)) -}
1509b24ae3be161f1e723ba4e70f8856
  getAdminR3 ::
    Yesod.Core.Types.GWData
      (Yesod.Routes.Class.Route Foundation.Balada)
  {- Unfolding: (Yesod.Core.Types.GWData
                   @ (Yesod.Routes.Class.Route Foundation.Balada)
                   Handlers.getAdminR4
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:Body[0]
                             <Yesod.Routes.Class.Route Foundation.Balada>_R))
                   (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                     `cast`
                   (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Script
                           (Yesod.Routes.Class.Route Foundation.Balada)])
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                             <Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Stylesheet
                           (Yesod.Routes.Class.Route Foundation.Balada)])
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                             <Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                   (Data.Map.Base.Tip
                      @ (GHC.Base.Maybe Data.Text.Internal.Text)
                      @ ((Yesod.Routes.Class.Route Foundation.Balada
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Data.Text.Internal.Builder.Builder))
                   (GHC.Base.Nothing
                      @ ((Yesod.Routes.Class.Route Foundation.Balada
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Text.Julius.Javascript))
                   (Yesod.Core.Types.$fApplicativeWidgetT2
                      @ (Yesod.Routes.Class.Route Foundation.Balada))
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:Head[0]
                             <Yesod.Routes.Class.Route Foundation.Balada>_R))) -}
136bc86715656775184fce0980afc217
  getAdminR4 ::
    Yesod.Core.Types.RY Foundation.Balada -> Text.Blaze.Html.Html
  {- Arity: 1,
     Unfolding: (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                 Handlers.getAdminR_x) -}
ef0df4cb48f11528e32899a416c3526a
  getAdminR5 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.PreEscaped
                   Handlers.getAdminR6) -}
714e10c40a6c54419396a54dea46cc07
  getAdminR6 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.Text Handlers.getAdminR7) -}
44cb371e720167d260ee7d7855dcc8ba
  getAdminR7 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "<h1> Bem-vindo meu Rei!</h1>\n"#) -}
b67c09bfdeca6c8dd25522b5d96ada5a
  getAdminR_x :: Text.Blaze.Html.Html
  {- Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.getAdminR5) -}
c867974ef025d0a4676903b02a4b26ef
  getCadcategoriaR :: Foundation.Handler Text.Blaze.Html.Html
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Handlers.getCadcategoriaR1
                  `cast`
                (Trans
                     (<Yesod.Core.Types.HandlerData
                         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R))
                     (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                               <Foundation.Balada>_N
                               <GHC.Types.IO>_N
                               <Text.Blaze.Html.Html>_N))) -}
2b61e00e007d999d09b45f726a539928
  getCadcategoriaR1 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Text.Blaze.Html.Html #)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ r :: Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (Handlers.getCadcategoriaR23
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Foundation.Balada>_N
                            <GHC.Types.IO>_N
                            <(Foundation.Widget, Yesod.Form.Types.Enctype)>_N)
                         r)
                        `cast`
                      (GHC.Types.NTCo:IO[0]
                           <(Foundation.Widget, Yesod.Form.Types.Enctype)>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) widget enctype ->
                 ((Foundation.$fYesodBalada_$cdefaultLayout
                     (let {
                        x3 :: Text.Blaze.Html.Html
                        = case enctype of wild1 {
                            Yesod.Form.Types.UrlEncoded -> Yesod.Form.Types.$fToMarkupEnctype4
                            Yesod.Form.Types.Multipart -> Yesod.Form.Types.$fToMarkupEnctype1 }
                      } in
                      let {
                        a36 :: Yesod.Core.Types.RY Foundation.Balada
                               -> Text.Blaze.Html.Html
                          {- Arity: 1 -}
                        = \ ds :: Yesod.Core.Types.RY Foundation.Balada -> x3
                      } in
                      let {
                        a37 :: Yesod.Core.Types.GWData
                                 (Yesod.Routes.Class.Route Foundation.Balada)
                        = Yesod.Core.Types.GWData
                            @ (Yesod.Routes.Class.Route Foundation.Balada)
                            a36
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:Body[0]
                                      <Yesod.Routes.Class.Route Foundation.Balada>_R))
                            (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                              `cast`
                            (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                            (GHC.Base.id
                               @ [Yesod.Core.Types.Script
                                    (Yesod.Routes.Class.Route Foundation.Balada)])
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                      <Yesod.Core.Types.Script
                                         (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                            (GHC.Base.id
                               @ [Yesod.Core.Types.Stylesheet
                                    (Yesod.Routes.Class.Route Foundation.Balada)])
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                      <Yesod.Core.Types.Stylesheet
                                         (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                            (Data.Map.Base.Tip
                               @ (GHC.Base.Maybe Data.Text.Internal.Text)
                               @ ((Yesod.Routes.Class.Route Foundation.Balada
                                   -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                                   -> Data.Text.Internal.Text)
                                  -> Data.Text.Internal.Builder.Builder))
                            (GHC.Base.Nothing
                               @ ((Yesod.Routes.Class.Route Foundation.Balada
                                   -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                                   -> Data.Text.Internal.Text)
                                  -> Text.Julius.Javascript))
                            (Yesod.Core.Types.$fApplicativeWidgetT2
                               @ (Yesod.Routes.Class.Route Foundation.Balada))
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:Head[0]
                                      <Yesod.Routes.Class.Route Foundation.Balada>_R))
                      } in
                      let {
                        lvl119 :: ((),
                                   Yesod.Core.Types.GWData
                                     (Yesod.Routes.Class.Route
                                        (Yesod.Core.Class.Handler.HandlerSite
                                           (Yesod.Core.Types.WidgetT
                                              Foundation.Balada GHC.Types.IO))))
                        = (GHC.Tuple.(),
                           a37
                             `cast`
                           (Yesod.Core.Types.GWData
                              (Yesod.Routes.Class.Route
                                 (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)
                      } in
                      let {
                        a38 :: Yesod.Core.Types.HandlerData
                                 Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     ((),
                                      Yesod.Core.Types.GWData
                                        (Yesod.Routes.Class.Route
                                           (Yesod.Core.Class.Handler.HandlerSite
                                              (Yesod.Core.Types.WidgetT
                                                 Foundation.Balada GHC.Types.IO)))) #)
                          {- Arity: 2, Strictness: <L,A><L,U>,
                             Unfolding: InlineRule (2, True, False)
                                        (\ eta :: Yesod.Core.Types.HandlerData
                                                    Foundation.Balada
                                                    (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                           eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                         (# eta2,
                                            (GHC.Tuple.(),
                                             (Yesod.Core.Types.GWData
                                                @ (Yesod.Routes.Class.Route Foundation.Balada)
                                                (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                                                 x3)
                                                  `cast`
                                                (Sym (Yesod.Core.Types.NTCo:Body[0]
                                                          <Yesod.Routes.Class.Route
                                                             Foundation.Balada>_R))
                                                (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                                                  `cast`
                                                (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                                                (GHC.Base.id
                                                   @ [Yesod.Core.Types.Script
                                                        (Yesod.Routes.Class.Route
                                                           Foundation.Balada)])
                                                  `cast`
                                                (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                                          <Yesod.Core.Types.Script
                                                             (Yesod.Routes.Class.Route
                                                                Foundation.Balada)>_R))
                                                (GHC.Base.id
                                                   @ [Yesod.Core.Types.Stylesheet
                                                        (Yesod.Routes.Class.Route
                                                           Foundation.Balada)])
                                                  `cast`
                                                (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                                          <Yesod.Core.Types.Stylesheet
                                                             (Yesod.Routes.Class.Route
                                                                Foundation.Balada)>_R))
                                                (Data.Map.Base.Tip
                                                   @ (GHC.Base.Maybe Data.Text.Internal.Text)
                                                   @ ((Yesod.Routes.Class.Route Foundation.Balada
                                                       -> [(Data.Text.Internal.Text,
                                                            Data.Text.Internal.Text)]
                                                       -> Data.Text.Internal.Text)
                                                      -> Data.Text.Internal.Builder.Builder))
                                                (GHC.Base.Nothing
                                                   @ ((Yesod.Routes.Class.Route Foundation.Balada
                                                       -> [(Data.Text.Internal.Text,
                                                            Data.Text.Internal.Text)]
                                                       -> Data.Text.Internal.Text)
                                                      -> Text.Julius.Javascript))
                                                (Yesod.Core.Types.$fApplicativeWidgetT2
                                                   @ (Yesod.Routes.Class.Route Foundation.Balada))
                                                  `cast`
                                                (Sym (Yesod.Core.Types.NTCo:Head[0]
                                                          <Yesod.Routes.Class.Route
                                                             Foundation.Balada>_R)))
                                               `cast`
                                             (Yesod.Core.Types.GWData
                                                (Yesod.Routes.Class.Route
                                                   (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                             <Foundation.Balada>_N
                                                             <GHC.Types.IO>_N)))_R)_R) #)) -}
                        = \ eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                            eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                          (# eta2, lvl119 #)
                      } in
                      let {
                        a39 :: Yesod.Core.Types.HandlerData
                                 Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                               -> GHC.Types.IO
                                    ((),
                                     Yesod.Core.Types.GWData
                                       (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 1, Strictness: <L,1*U(U,U,U,1*H,U)>,
                             Unfolding: InlineRule (1, True, False)
                                        (\ eta2 :: Yesod.Core.Types.HandlerData
                                                     Foundation.Balada
                                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                                         widget
                                           `cast`
                                         (Trans
                                              (Yesod.Core.Types.NTCo:WidgetT[0]
                                                   (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                             <Foundation.Balada>_N
                                                             <GHC.Types.IO>_N))
                                                   <GHC.Types.IO>_N
                                                   <()>_N)
                                              ((Yesod.Core.Types.HandlerData
                                                  (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                       <Foundation.Balada>_N <GHC.Types.IO>_N)
                                                  (Sub (Yesod.Core.Types.TFCo:R:MonadRouteIO[0])))_R
                                               ->_R (GHC.Types.IO
                                                       ((<()>_R,
                                                         (Yesod.Core.Types.GWData
                                                            (Yesod.Routes.Class.Route
                                                               (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                    <Foundation.Balada>_N
                                                                    <GHC.Types.IO>_N))_R)_R))_R)_R))
                                           (case eta2 of wild1 { Yesod.Core.Types.HandlerData ds ds2 dt ds3 dt1 ->
                                            Yesod.Core.Types.HandlerData
                                              @ Foundation.Balada
                                              @ ()
                                              ds
                                              ds2
                                              dt
                                              (Yesod.Core.Class.Handler.$fMonadHandlerHandlerT2
                                                 @ Foundation.Balada)
                                              dt1 })) -}
                        = \ eta2 :: Yesod.Core.Types.HandlerData
                                      Foundation.Balada
                                      (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                          widget
                            `cast`
                          (Trans
                               (Yesod.Core.Types.NTCo:WidgetT[0]
                                    (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                                    <GHC.Types.IO>_N
                                    <()>_N)
                               ((Yesod.Core.Types.HandlerData
                                   (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                        <Foundation.Balada>_N <GHC.Types.IO>_N)
                                   (Sub (Yesod.Core.Types.TFCo:R:MonadRouteIO[0])))_R
                                ->_R (GHC.Types.IO
                                        ((<()>_R,
                                          (Yesod.Core.Types.GWData
                                             (Yesod.Routes.Class.Route
                                                (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                     <Foundation.Balada>_N
                                                     <GHC.Types.IO>_N))_R)_R))_R)_R))
                            (case eta2 of wild1 { Yesod.Core.Types.HandlerData ds ds2 dt ds3 dt1 ->
                             Yesod.Core.Types.HandlerData
                               @ Foundation.Balada
                               @ ()
                               ds
                               ds2
                               dt
                               (Yesod.Core.Class.Handler.$fMonadHandlerHandlerT2
                                  @ Foundation.Balada)
                               dt1 })
                      } in
                      let {
                        lvl120 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            a39
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            Handlers.getCadcategoriaR16
                              `cast`
                            (<()>_R
                             ->_R Trans
                                      (<Yesod.Core.Types.HandlerData
                                          Foundation.Balada
                                          (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                                     ((<()>_R,
                                                       (Yesod.Core.Types.GWData
                                                          (Yesod.Routes.Class.Route
                                                             (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                       <Foundation.Balada>_N
                                                                       <GHC.Types.IO>_N)))_R)_R))_R))
                                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                            eta
                      } in
                      let {
                        lvl121 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            Handlers.getCadcategoriaR12
                              `cast`
                            (Trans
                                 (<Yesod.Core.Types.HandlerData
                                     Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                                  ->_R Sym (GHC.Types.NTCo:IO[0]
                                                ((<()>_R,
                                                  (Yesod.Core.Types.GWData
                                                     (Yesod.Routes.Class.Route
                                                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                  <Foundation.Balada>_N
                                                                  <GHC.Types.IO>_N)))_R)_R))_R))
                                 (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                            lvl120
                              `cast`
                            (<()>_R
                             ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            eta
                      } in
                      let {
                        lvl122 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            Handlers.getCadcategoriaR10
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            lvl121
                              `cast`
                            (<()>_R
                             ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            eta
                      } in
                      let {
                        lvl123 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            Handlers.getCadcategoriaR6
                              `cast`
                            (Trans
                                 (<Yesod.Core.Types.HandlerData
                                     Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                                  ->_R Sym (GHC.Types.NTCo:IO[0]
                                                ((<()>_R,
                                                  (Yesod.Core.Types.GWData
                                                     (Yesod.Routes.Class.Route
                                                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                  <Foundation.Balada>_N
                                                                  <GHC.Types.IO>_N)))_R)_R))_R))
                                 (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                            lvl122
                              `cast`
                            (<()>_R
                             ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            eta
                      } in
                      let {
                        lvl124 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            a38
                              `cast`
                            (Trans
                                 (<Yesod.Core.Types.HandlerData
                                     Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                                  ->_R Sym (GHC.Types.NTCo:IO[0]
                                                ((<()>_R,
                                                  (Yesod.Core.Types.GWData
                                                     (Yesod.Routes.Class.Route
                                                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                  <Foundation.Balada>_N
                                                                  <GHC.Types.IO>_N)))_R)_R))_R))
                                 (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                            lvl123
                              `cast`
                            (<()>_R
                             ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            eta
                      } in
                      (\ eta :: Yesod.Core.Types.HandlerData
                                  Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                       Yesod.Core.Types.$wa1
                         @ Foundation.Balada
                         @ GHC.Types.IO
                         GHC.Base.$fMonadIO
                         @ ()
                         @ ()
                         Handlers.getCadcategoriaR2
                           `cast`
                         (Trans
                              (<Yesod.Core.Types.HandlerData
                                  Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                               ->_R Sym (GHC.Types.NTCo:IO[0]
                                             ((<()>_R,
                                               (Yesod.Core.Types.GWData
                                                  (Yesod.Routes.Class.Route
                                                     (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                               <Foundation.Balada>_N
                                                               <GHC.Types.IO>_N)))_R)_R))_R))
                              (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                        <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                         lvl124
                           `cast`
                         (<()>_R
                          ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                        <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                         eta)
                        `cast`
                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))))
                    `cast`
                  (Yesod.Core.Types.NTCo:HandlerT[0]
                       <Foundation.Balada>_N <GHC.Types.IO>_N <Text.Blaze.Html.Html>_N)
                    r)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R)
                   ipv } }) -}
d58e37ec1cfed725ff2368571264ca4b
  getCadcategoriaR10 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ w4 :: Yesod.Core.Types.HandlerData
                           Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ (Yesod.Routes.Class.Route Foundation.Balada
                      -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                      -> Data.Text.Internal.Text)
                   @ ()
                   Handlers.getAboutR12
                     `cast`
                   (Yesod.Core.Types.WidgetT
                      <Foundation.Balada>_N
                      <GHC.Types.IO>_N
                      ((Yesod.Routes.Class.Route
                          (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                               <Foundation.Balada>_N <GHC.Types.IO>_N))_N
                       ->_N <[(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                             -> Data.Text.Internal.Text>_N))_R
                   Handlers.getCadcategoriaR11
                   w4) -}
4dbbcda7e138c21df23593dca0f88a49
  getCadcategoriaR11 ::
    (Yesod.Routes.Class.Route Foundation.Balada
     -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
     -> Data.Text.Internal.Text)
    -> Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*C1(C1(U(U,U,U)))>,
     Unfolding: (\ urender :: Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text ->
                 let {
                   a36 :: Data.Text.Internal.Text
                   = urender
                       Foundation.CadcategoriaR
                         `cast`
                       (Sub (Sym (Foundation.TFCo:R:RouteBalada[0])))
                       (GHC.Types.[] @ (Data.Text.Internal.Text, Data.Text.Internal.Text))
                 } in
                 let {
                   a37 :: Text.Blaze.Internal.ChoiceString
                   = Text.Blaze.Internal.Text a36
                 } in
                 let {
                   x3 :: Text.Blaze.Html.Html = Text.Blaze.Internal.Content @ () a37
                 } in
                 let {
                   a38 :: Yesod.Core.Types.RY Foundation.Balada
                          -> Text.Blaze.Html.Html
                     {- Arity: 1 -}
                   = \ ds :: Yesod.Core.Types.RY Foundation.Balada -> x3
                 } in
                 let {
                   a39 :: Yesod.Core.Types.GWData
                            (Yesod.Routes.Class.Route Foundation.Balada)
                   = Yesod.Core.Types.GWData
                       @ (Yesod.Routes.Class.Route Foundation.Balada)
                       a38
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Body[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                       (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                         `cast`
                       (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Script
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Script
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Stylesheet
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Stylesheet
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (Data.Map.Base.Tip
                          @ (GHC.Base.Maybe Data.Text.Internal.Text)
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Data.Text.Internal.Builder.Builder))
                       (GHC.Base.Nothing
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Text.Julius.Javascript))
                       (Yesod.Core.Types.$fApplicativeWidgetT2
                          @ (Yesod.Routes.Class.Route Foundation.Balada))
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Head[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                 } in
                 let {
                   lvl119 :: ((),
                              Yesod.Core.Types.GWData
                                (Yesod.Routes.Class.Route
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))))
                   = (GHC.Tuple.(),
                      a39
                        `cast`
                      (Yesod.Core.Types.GWData
                         (Yesod.Routes.Class.Route
                            (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)
                 } in
                 (\ eta :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  (# eta2, lvl119 #))
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     ((<()>_R,
                                       (Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route
                                             (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                       <Foundation.Balada>_N
                                                       <GHC.Types.IO>_N)))_R)_R))_R))
                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))) -}
712b7d186ddd836ef5e93fa7045aadbb
  getCadcategoriaR12 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Yesod.Core.Types.GWData
             (Yesod.Routes.Class.Route
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)))) #)
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta2 :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta,
                    (GHC.Tuple.(),
                     (Yesod.Core.Types.GWData
                        @ (Yesod.Routes.Class.Route Foundation.Balada)
                        (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                         Handlers.getCadcategoriaR_x2)
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Body[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R))
                        (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                          `cast`
                        (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Script
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Stylesheet
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (Data.Map.Base.Tip
                           @ (GHC.Base.Maybe Data.Text.Internal.Text)
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Data.Text.Internal.Builder.Builder))
                        (GHC.Base.Nothing
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Text.Julius.Javascript))
                        (Yesod.Core.Types.$fApplicativeWidgetT2
                           @ (Yesod.Routes.Class.Route Foundation.Balada))
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Head[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R)))
                       `cast`
                     (Yesod.Core.Types.GWData
                        (Yesod.Routes.Class.Route
                           (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                     <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R) #)) -}
78b9353cbd6a067ae998e9c2da970ae7
  getCadcategoriaR13 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.PreEscaped
                   Handlers.getCadcategoriaR14) -}
71ffd59a1ef8bd26a45a733a0e5384f4
  getCadcategoriaR14 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m3,
     Unfolding: (Text.Blaze.Internal.Text
                   Handlers.getCadcategoriaR15) -}
3245d2d5e3003cbf2fcb41badc4b71c0
  getCadcategoriaR15 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "></center>\n"#) -}
2a71ebc61365653d77080fae4e12c1ed
  getCadcategoriaR16 ::
    ()
    -> Yesod.Core.Types.HandlerData
         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Yesod.Core.Types.GWData
             (Yesod.Routes.Class.Route
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)))) #)
  {- Arity: 3,
     Unfolding: (\ ds :: ()
                   eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada
                            (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot]
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta2, Handlers.getCadcategoriaR17 #)) -}
33f430276c7d26f58455461551ac41ed
  getCadcategoriaR17 ::
    ((),
     Yesod.Core.Types.GWData
       (Yesod.Routes.Class.Route
          (Yesod.Core.Class.Handler.HandlerSite
             (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))))
  {- Unfolding: ((GHC.Tuple.(),
                  Handlers.getCadcategoriaR18
                    `cast`
                  (Yesod.Core.Types.GWData
                     (Yesod.Routes.Class.Route
                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)) -}
477315fff7fbc96ae3762a7dfc86a2fa
  getCadcategoriaR18 ::
    Yesod.Core.Types.GWData
      (Yesod.Routes.Class.Route Foundation.Balada)
  {- Unfolding: (Yesod.Core.Types.GWData
                   @ (Yesod.Routes.Class.Route Foundation.Balada)
                   Handlers.getCadcategoriaR19
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:Body[0]
                             <Yesod.Routes.Class.Route Foundation.Balada>_R))
                   (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                     `cast`
                   (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Script
                           (Yesod.Routes.Class.Route Foundation.Balada)])
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                             <Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Stylesheet
                           (Yesod.Routes.Class.Route Foundation.Balada)])
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                             <Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                   (Data.Map.Base.Tip
                      @ (GHC.Base.Maybe Data.Text.Internal.Text)
                      @ ((Yesod.Routes.Class.Route Foundation.Balada
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Data.Text.Internal.Builder.Builder))
                   (GHC.Base.Nothing
                      @ ((Yesod.Routes.Class.Route Foundation.Balada
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Text.Julius.Javascript))
                   (Yesod.Core.Types.$fApplicativeWidgetT2
                      @ (Yesod.Routes.Class.Route Foundation.Balada))
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:Head[0]
                             <Yesod.Routes.Class.Route Foundation.Balada>_R))) -}
32192ea6d2885f895e61ce94e6cd2196
  getCadcategoriaR19 ::
    Yesod.Core.Types.RY Foundation.Balada -> Text.Blaze.Html.Html
  {- Arity: 1,
     Unfolding: (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                 Handlers.getCadcategoriaR_x3) -}
94480c6e8fcdb6502c78e710a16c0a79
  getCadcategoriaR2 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Yesod.Core.Types.GWData
             (Yesod.Routes.Class.Route
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)))) #)
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta2 :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta,
                    (GHC.Tuple.(),
                     (Yesod.Core.Types.GWData
                        @ (Yesod.Routes.Class.Route Foundation.Balada)
                        (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                         Handlers.getCadcategoriaR_x)
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Body[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R))
                        (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                          `cast`
                        (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Script
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Stylesheet
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (Data.Map.Base.Tip
                           @ (GHC.Base.Maybe Data.Text.Internal.Text)
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Data.Text.Internal.Builder.Builder))
                        (GHC.Base.Nothing
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Text.Julius.Javascript))
                        (Yesod.Core.Types.$fApplicativeWidgetT2
                           @ (Yesod.Routes.Class.Route Foundation.Balada))
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Head[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R)))
                       `cast`
                     (Yesod.Core.Types.GWData
                        (Yesod.Routes.Class.Route
                           (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                     <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R) #)) -}
a8ef1c5dbb5cfc6d0c3b1ed10fcb978c
  getCadcategoriaR20 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.PreEscaped
                   Handlers.getCadcategoriaR21) -}
1c58332249ad28eaaca7b43027f4a667
  getCadcategoriaR21 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m3,
     Unfolding: (Text.Blaze.Internal.Text
                   Handlers.getCadcategoriaR22) -}
45ddea1aca37f71273a05bfabb326a58
  getCadcategoriaR22 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\n\
                   \<input type=\"submit\" value=\"Enviar\">\n\
                   \<h1> Cadastro de categoria Completo</h1>\n"#) -}
a10ff8166c093daed33c676ae985d4ab
  getCadcategoriaR23 ::
    Yesod.Core.Types.HandlerT
      Foundation.Balada
      GHC.Types.IO
      (Foundation.Widget, Yesod.Form.Types.Enctype)
  {- Unfolding: (Yesod.Form.Functions.generateFormPost
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   @ Foundation.Categoria_estab
                   @ Foundation.Widget
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)
                             <Yesod.Form.Types.FormMessage>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formCategoria1
                     `cast`
                   (<Text.Blaze.Internal.MarkupM ()>_R
                    ->_R Sym (Control.Monad.Trans.RWS.Lazy.NTCo:RWST[0]
                                  <(GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                                    Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                                    [Text.Shakespeare.I18N.Lang])>_R
                                  <Yesod.Form.Types.Enctype>_N
                                  <Yesod.Form.Types.Ints>_N
                                  <Foundation.Handler>_R
                                  ((<Yesod.Form.Types.FormResult Foundation.Categoria_estab>_N,
                                    (Yesod.Core.Types.WidgetT
                                       (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                                 <Foundation.Balada>_N <GHC.Types.IO>_N))
                                       <GHC.Types.IO>_N
                                       <()>_N)_N))_N))) -}
196efbe4d9e7e58b502e15047588f219
  getCadcategoriaR3 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.PreEscaped
                   Handlers.getCadcategoriaR4) -}
50c5df5a37946431bdd090b4b1f34712
  getCadcategoriaR4 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m3,
     Unfolding: (Text.Blaze.Internal.Text Handlers.getCadcategoriaR5) -}
0423329771683fd94a08e0604f9a7a12
  getCadcategoriaR5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "<center> <form method=post enctype="#) -}
40bf71d2ca049fbb32a4faad0ed41d64
  getCadcategoriaR6 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Yesod.Core.Types.GWData
             (Yesod.Routes.Class.Route
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)))) #)
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta2 :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta,
                    (GHC.Tuple.(),
                     (Yesod.Core.Types.GWData
                        @ (Yesod.Routes.Class.Route Foundation.Balada)
                        (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                         Handlers.getCadcategoriaR_x1)
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Body[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R))
                        (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                          `cast`
                        (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Script
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Stylesheet
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (Data.Map.Base.Tip
                           @ (GHC.Base.Maybe Data.Text.Internal.Text)
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Data.Text.Internal.Builder.Builder))
                        (GHC.Base.Nothing
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Text.Julius.Javascript))
                        (Yesod.Core.Types.$fApplicativeWidgetT2
                           @ (Yesod.Routes.Class.Route Foundation.Balada))
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Head[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R)))
                       `cast`
                     (Yesod.Core.Types.GWData
                        (Yesod.Routes.Class.Route
                           (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                     <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R) #)) -}
8f554a8669a188a96a4cfd2f90f9e2b8
  getCadcategoriaR7 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.PreEscaped
                   Handlers.getCadcategoriaR8) -}
2d41ca4b85e50f8de5e46331d81f42a9
  getCadcategoriaR8 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m3,
     Unfolding: (Text.Blaze.Internal.Text Handlers.getCadcategoriaR9) -}
cfd096ad1a6e9c9b199a6e34f3d952bc
  getCadcategoriaR9 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# " action="#) -}
d1e6a80d8a7cd8011b3e6a9dcc72ce87
  getCadcategoriaR_x :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.getCadcategoriaR3) -}
f0de3b8f97d9d99768e39c1b982eb651
  getCadcategoriaR_x1 :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.getCadcategoriaR7) -}
27d639882a1cc4e6c878983b6268199a
  getCadcategoriaR_x2 :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.getCadcategoriaR13) -}
2029a3636567dc0c74a745f38dd81ae2
  getCadcategoriaR_x3 :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.getCadcategoriaR20) -}
557b6c0f6ac6f796e2165343e766390c
  getCaddiaR :: Foundation.Handler Text.Blaze.Html.Html
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Handlers.getCaddiaR1
                  `cast`
                (Trans
                     (<Yesod.Core.Types.HandlerData
                         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R))
                     (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                               <Foundation.Balada>_N
                               <GHC.Types.IO>_N
                               <Text.Blaze.Html.Html>_N))) -}
dbad5e0338a04c5a113a872dbc62ebd2
  getCaddiaR1 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Text.Blaze.Html.Html #)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ r :: Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (Handlers.getCaddiaR11
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Foundation.Balada>_N
                            <GHC.Types.IO>_N
                            <(Foundation.Widget, Yesod.Form.Types.Enctype)>_N)
                         r)
                        `cast`
                      (GHC.Types.NTCo:IO[0]
                           <(Foundation.Widget, Yesod.Form.Types.Enctype)>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) widget enctype ->
                 ((Foundation.$fYesodBalada_$cdefaultLayout
                     (let {
                        x3 :: Text.Blaze.Html.Html
                        = case enctype of wild1 {
                            Yesod.Form.Types.UrlEncoded -> Yesod.Form.Types.$fToMarkupEnctype4
                            Yesod.Form.Types.Multipart -> Yesod.Form.Types.$fToMarkupEnctype1 }
                      } in
                      let {
                        a36 :: Yesod.Core.Types.RY Foundation.Balada
                               -> Text.Blaze.Html.Html
                          {- Arity: 1 -}
                        = \ ds :: Yesod.Core.Types.RY Foundation.Balada -> x3
                      } in
                      let {
                        a37 :: Yesod.Core.Types.GWData
                                 (Yesod.Routes.Class.Route Foundation.Balada)
                        = Yesod.Core.Types.GWData
                            @ (Yesod.Routes.Class.Route Foundation.Balada)
                            a36
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:Body[0]
                                      <Yesod.Routes.Class.Route Foundation.Balada>_R))
                            (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                              `cast`
                            (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                            (GHC.Base.id
                               @ [Yesod.Core.Types.Script
                                    (Yesod.Routes.Class.Route Foundation.Balada)])
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                      <Yesod.Core.Types.Script
                                         (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                            (GHC.Base.id
                               @ [Yesod.Core.Types.Stylesheet
                                    (Yesod.Routes.Class.Route Foundation.Balada)])
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                      <Yesod.Core.Types.Stylesheet
                                         (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                            (Data.Map.Base.Tip
                               @ (GHC.Base.Maybe Data.Text.Internal.Text)
                               @ ((Yesod.Routes.Class.Route Foundation.Balada
                                   -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                                   -> Data.Text.Internal.Text)
                                  -> Data.Text.Internal.Builder.Builder))
                            (GHC.Base.Nothing
                               @ ((Yesod.Routes.Class.Route Foundation.Balada
                                   -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                                   -> Data.Text.Internal.Text)
                                  -> Text.Julius.Javascript))
                            (Yesod.Core.Types.$fApplicativeWidgetT2
                               @ (Yesod.Routes.Class.Route Foundation.Balada))
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:Head[0]
                                      <Yesod.Routes.Class.Route Foundation.Balada>_R))
                      } in
                      let {
                        lvl119 :: ((),
                                   Yesod.Core.Types.GWData
                                     (Yesod.Routes.Class.Route
                                        (Yesod.Core.Class.Handler.HandlerSite
                                           (Yesod.Core.Types.WidgetT
                                              Foundation.Balada GHC.Types.IO))))
                        = (GHC.Tuple.(),
                           a37
                             `cast`
                           (Yesod.Core.Types.GWData
                              (Yesod.Routes.Class.Route
                                 (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)
                      } in
                      let {
                        a38 :: Yesod.Core.Types.HandlerData
                                 Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     ((),
                                      Yesod.Core.Types.GWData
                                        (Yesod.Routes.Class.Route
                                           (Yesod.Core.Class.Handler.HandlerSite
                                              (Yesod.Core.Types.WidgetT
                                                 Foundation.Balada GHC.Types.IO)))) #)
                          {- Arity: 2, Strictness: <L,A><L,U>,
                             Unfolding: InlineRule (2, True, False)
                                        (\ eta :: Yesod.Core.Types.HandlerData
                                                    Foundation.Balada
                                                    (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                           eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                         (# eta2,
                                            (GHC.Tuple.(),
                                             (Yesod.Core.Types.GWData
                                                @ (Yesod.Routes.Class.Route Foundation.Balada)
                                                (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                                                 x3)
                                                  `cast`
                                                (Sym (Yesod.Core.Types.NTCo:Body[0]
                                                          <Yesod.Routes.Class.Route
                                                             Foundation.Balada>_R))
                                                (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                                                  `cast`
                                                (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                                                (GHC.Base.id
                                                   @ [Yesod.Core.Types.Script
                                                        (Yesod.Routes.Class.Route
                                                           Foundation.Balada)])
                                                  `cast`
                                                (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                                          <Yesod.Core.Types.Script
                                                             (Yesod.Routes.Class.Route
                                                                Foundation.Balada)>_R))
                                                (GHC.Base.id
                                                   @ [Yesod.Core.Types.Stylesheet
                                                        (Yesod.Routes.Class.Route
                                                           Foundation.Balada)])
                                                  `cast`
                                                (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                                          <Yesod.Core.Types.Stylesheet
                                                             (Yesod.Routes.Class.Route
                                                                Foundation.Balada)>_R))
                                                (Data.Map.Base.Tip
                                                   @ (GHC.Base.Maybe Data.Text.Internal.Text)
                                                   @ ((Yesod.Routes.Class.Route Foundation.Balada
                                                       -> [(Data.Text.Internal.Text,
                                                            Data.Text.Internal.Text)]
                                                       -> Data.Text.Internal.Text)
                                                      -> Data.Text.Internal.Builder.Builder))
                                                (GHC.Base.Nothing
                                                   @ ((Yesod.Routes.Class.Route Foundation.Balada
                                                       -> [(Data.Text.Internal.Text,
                                                            Data.Text.Internal.Text)]
                                                       -> Data.Text.Internal.Text)
                                                      -> Text.Julius.Javascript))
                                                (Yesod.Core.Types.$fApplicativeWidgetT2
                                                   @ (Yesod.Routes.Class.Route Foundation.Balada))
                                                  `cast`
                                                (Sym (Yesod.Core.Types.NTCo:Head[0]
                                                          <Yesod.Routes.Class.Route
                                                             Foundation.Balada>_R)))
                                               `cast`
                                             (Yesod.Core.Types.GWData
                                                (Yesod.Routes.Class.Route
                                                   (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                             <Foundation.Balada>_N
                                                             <GHC.Types.IO>_N)))_R)_R) #)) -}
                        = \ eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                            eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                          (# eta2, lvl119 #)
                      } in
                      let {
                        a39 :: Yesod.Core.Types.HandlerData
                                 Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                               -> GHC.Types.IO
                                    ((),
                                     Yesod.Core.Types.GWData
                                       (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 1, Strictness: <L,1*U(U,U,U,1*H,U)>,
                             Unfolding: InlineRule (1, True, False)
                                        (\ eta2 :: Yesod.Core.Types.HandlerData
                                                     Foundation.Balada
                                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                                         widget
                                           `cast`
                                         (Trans
                                              (Yesod.Core.Types.NTCo:WidgetT[0]
                                                   (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                             <Foundation.Balada>_N
                                                             <GHC.Types.IO>_N))
                                                   <GHC.Types.IO>_N
                                                   <()>_N)
                                              ((Yesod.Core.Types.HandlerData
                                                  (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                       <Foundation.Balada>_N <GHC.Types.IO>_N)
                                                  (Sub (Yesod.Core.Types.TFCo:R:MonadRouteIO[0])))_R
                                               ->_R (GHC.Types.IO
                                                       ((<()>_R,
                                                         (Yesod.Core.Types.GWData
                                                            (Yesod.Routes.Class.Route
                                                               (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                    <Foundation.Balada>_N
                                                                    <GHC.Types.IO>_N))_R)_R))_R)_R))
                                           (case eta2 of wild1 { Yesod.Core.Types.HandlerData ds ds2 dt ds3 dt1 ->
                                            Yesod.Core.Types.HandlerData
                                              @ Foundation.Balada
                                              @ ()
                                              ds
                                              ds2
                                              dt
                                              (Yesod.Core.Class.Handler.$fMonadHandlerHandlerT2
                                                 @ Foundation.Balada)
                                              dt1 })) -}
                        = \ eta2 :: Yesod.Core.Types.HandlerData
                                      Foundation.Balada
                                      (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                          widget
                            `cast`
                          (Trans
                               (Yesod.Core.Types.NTCo:WidgetT[0]
                                    (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                                    <GHC.Types.IO>_N
                                    <()>_N)
                               ((Yesod.Core.Types.HandlerData
                                   (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                        <Foundation.Balada>_N <GHC.Types.IO>_N)
                                   (Sub (Yesod.Core.Types.TFCo:R:MonadRouteIO[0])))_R
                                ->_R (GHC.Types.IO
                                        ((<()>_R,
                                          (Yesod.Core.Types.GWData
                                             (Yesod.Routes.Class.Route
                                                (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                     <Foundation.Balada>_N
                                                     <GHC.Types.IO>_N))_R)_R))_R)_R))
                            (case eta2 of wild1 { Yesod.Core.Types.HandlerData ds ds2 dt ds3 dt1 ->
                             Yesod.Core.Types.HandlerData
                               @ Foundation.Balada
                               @ ()
                               ds
                               ds2
                               dt
                               (Yesod.Core.Class.Handler.$fMonadHandlerHandlerT2
                                  @ Foundation.Balada)
                               dt1 })
                      } in
                      let {
                        lvl120 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            a39
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            Handlers.getCaddiaR4
                              `cast`
                            (<()>_R
                             ->_R Trans
                                      (<Yesod.Core.Types.HandlerData
                                          Foundation.Balada
                                          (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                                     ((<()>_R,
                                                       (Yesod.Core.Types.GWData
                                                          (Yesod.Routes.Class.Route
                                                             (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                       <Foundation.Balada>_N
                                                                       <GHC.Types.IO>_N)))_R)_R))_R))
                                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                            eta
                      } in
                      let {
                        lvl121 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            Handlers.getCadcategoriaR12
                              `cast`
                            (Trans
                                 (<Yesod.Core.Types.HandlerData
                                     Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                                  ->_R Sym (GHC.Types.NTCo:IO[0]
                                                ((<()>_R,
                                                  (Yesod.Core.Types.GWData
                                                     (Yesod.Routes.Class.Route
                                                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                  <Foundation.Balada>_N
                                                                  <GHC.Types.IO>_N)))_R)_R))_R))
                                 (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                            lvl120
                              `cast`
                            (<()>_R
                             ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            eta
                      } in
                      let {
                        lvl122 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            Handlers.getCaddiaR2
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            lvl121
                              `cast`
                            (<()>_R
                             ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            eta
                      } in
                      let {
                        lvl123 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            Handlers.getCadcategoriaR6
                              `cast`
                            (Trans
                                 (<Yesod.Core.Types.HandlerData
                                     Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                                  ->_R Sym (GHC.Types.NTCo:IO[0]
                                                ((<()>_R,
                                                  (Yesod.Core.Types.GWData
                                                     (Yesod.Routes.Class.Route
                                                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                  <Foundation.Balada>_N
                                                                  <GHC.Types.IO>_N)))_R)_R))_R))
                                 (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                            lvl122
                              `cast`
                            (<()>_R
                             ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            eta
                      } in
                      let {
                        lvl124 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            a38
                              `cast`
                            (Trans
                                 (<Yesod.Core.Types.HandlerData
                                     Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                                  ->_R Sym (GHC.Types.NTCo:IO[0]
                                                ((<()>_R,
                                                  (Yesod.Core.Types.GWData
                                                     (Yesod.Routes.Class.Route
                                                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                  <Foundation.Balada>_N
                                                                  <GHC.Types.IO>_N)))_R)_R))_R))
                                 (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                            lvl123
                              `cast`
                            (<()>_R
                             ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            eta
                      } in
                      (\ eta :: Yesod.Core.Types.HandlerData
                                  Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                       Yesod.Core.Types.$wa1
                         @ Foundation.Balada
                         @ GHC.Types.IO
                         GHC.Base.$fMonadIO
                         @ ()
                         @ ()
                         Handlers.getCadcategoriaR2
                           `cast`
                         (Trans
                              (<Yesod.Core.Types.HandlerData
                                  Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                               ->_R Sym (GHC.Types.NTCo:IO[0]
                                             ((<()>_R,
                                               (Yesod.Core.Types.GWData
                                                  (Yesod.Routes.Class.Route
                                                     (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                               <Foundation.Balada>_N
                                                               <GHC.Types.IO>_N)))_R)_R))_R))
                              (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                        <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                         lvl124
                           `cast`
                         (<()>_R
                          ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                        <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                         eta)
                        `cast`
                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))))
                    `cast`
                  (Yesod.Core.Types.NTCo:HandlerT[0]
                       <Foundation.Balada>_N <GHC.Types.IO>_N <Text.Blaze.Html.Html>_N)
                    r)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R)
                   ipv } }) -}
cd13b0d1372b9fa00bcdc4c64350e78d
  getCaddiaR10 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\n\
                   \<input type=\"submit\" value=\"Enviar\">\n\
                   \<h1> Cadastro de dia evento Completo</h1>\n"#) -}
ea61e29879335db789efa8b180cc2f27
  getCaddiaR11 ::
    Yesod.Core.Types.HandlerT
      Foundation.Balada
      GHC.Types.IO
      (Foundation.Widget, Yesod.Form.Types.Enctype)
  {- Unfolding: (Yesod.Form.Functions.generateFormPost
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   @ Foundation.Dia_evento
                   @ Foundation.Widget
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)
                             <Yesod.Form.Types.FormMessage>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formDia1
                     `cast`
                   (<Text.Blaze.Internal.MarkupM ()>_R
                    ->_R Sym (Control.Monad.Trans.RWS.Lazy.NTCo:RWST[0]
                                  <(GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                                    Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                                    [Text.Shakespeare.I18N.Lang])>_R
                                  <Yesod.Form.Types.Enctype>_N
                                  <Yesod.Form.Types.Ints>_N
                                  <Foundation.Handler>_R
                                  ((<Yesod.Form.Types.FormResult Foundation.Dia_evento>_N,
                                    (Yesod.Core.Types.WidgetT
                                       (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                                 <Foundation.Balada>_N <GHC.Types.IO>_N))
                                       <GHC.Types.IO>_N
                                       <()>_N)_N))_N))) -}
7556b475269394560def150be65058fa
  getCaddiaR2 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ w4 :: Yesod.Core.Types.HandlerData
                           Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ (Yesod.Routes.Class.Route Foundation.Balada
                      -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                      -> Data.Text.Internal.Text)
                   @ ()
                   Handlers.getAboutR12
                     `cast`
                   (Yesod.Core.Types.WidgetT
                      <Foundation.Balada>_N
                      <GHC.Types.IO>_N
                      ((Yesod.Routes.Class.Route
                          (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                               <Foundation.Balada>_N <GHC.Types.IO>_N))_N
                       ->_N <[(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                             -> Data.Text.Internal.Text>_N))_R
                   Handlers.getCaddiaR3
                   w4) -}
2280d37a9a9fca2d684818e637f30e38
  getCaddiaR3 ::
    (Yesod.Routes.Class.Route Foundation.Balada
     -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
     -> Data.Text.Internal.Text)
    -> Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*C1(C1(U(U,U,U)))>,
     Unfolding: (\ urender :: Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text ->
                 let {
                   a36 :: Data.Text.Internal.Text
                   = urender
                       Foundation.CaddiaR
                         `cast`
                       (Sub (Sym (Foundation.TFCo:R:RouteBalada[0])))
                       (GHC.Types.[] @ (Data.Text.Internal.Text, Data.Text.Internal.Text))
                 } in
                 let {
                   a37 :: Text.Blaze.Internal.ChoiceString
                   = Text.Blaze.Internal.Text a36
                 } in
                 let {
                   x3 :: Text.Blaze.Html.Html = Text.Blaze.Internal.Content @ () a37
                 } in
                 let {
                   a38 :: Yesod.Core.Types.RY Foundation.Balada
                          -> Text.Blaze.Html.Html
                     {- Arity: 1 -}
                   = \ ds :: Yesod.Core.Types.RY Foundation.Balada -> x3
                 } in
                 let {
                   a39 :: Yesod.Core.Types.GWData
                            (Yesod.Routes.Class.Route Foundation.Balada)
                   = Yesod.Core.Types.GWData
                       @ (Yesod.Routes.Class.Route Foundation.Balada)
                       a38
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Body[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                       (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                         `cast`
                       (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Script
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Script
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Stylesheet
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Stylesheet
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (Data.Map.Base.Tip
                          @ (GHC.Base.Maybe Data.Text.Internal.Text)
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Data.Text.Internal.Builder.Builder))
                       (GHC.Base.Nothing
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Text.Julius.Javascript))
                       (Yesod.Core.Types.$fApplicativeWidgetT2
                          @ (Yesod.Routes.Class.Route Foundation.Balada))
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Head[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                 } in
                 let {
                   lvl119 :: ((),
                              Yesod.Core.Types.GWData
                                (Yesod.Routes.Class.Route
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))))
                   = (GHC.Tuple.(),
                      a39
                        `cast`
                      (Yesod.Core.Types.GWData
                         (Yesod.Routes.Class.Route
                            (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)
                 } in
                 (\ eta :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  (# eta2, lvl119 #))
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     ((<()>_R,
                                       (Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route
                                             (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                       <Foundation.Balada>_N
                                                       <GHC.Types.IO>_N)))_R)_R))_R))
                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))) -}
3934feba1421cae7d39df94c1eae511d
  getCaddiaR4 ::
    ()
    -> Yesod.Core.Types.HandlerData
         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Yesod.Core.Types.GWData
             (Yesod.Routes.Class.Route
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)))) #)
  {- Arity: 3,
     Unfolding: (\ ds :: ()
                   eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada
                            (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot]
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta2, Handlers.getCaddiaR5 #)) -}
6b19dca7abc4a4437ad7c7db0bc89694
  getCaddiaR5 ::
    ((),
     Yesod.Core.Types.GWData
       (Yesod.Routes.Class.Route
          (Yesod.Core.Class.Handler.HandlerSite
             (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))))
  {- Unfolding: ((GHC.Tuple.(),
                  Handlers.getCaddiaR6
                    `cast`
                  (Yesod.Core.Types.GWData
                     (Yesod.Routes.Class.Route
                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)) -}
9e8e852d054f37450ca89d25a7692b98
  getCaddiaR6 ::
    Yesod.Core.Types.GWData
      (Yesod.Routes.Class.Route Foundation.Balada)
  {- Unfolding: (Yesod.Core.Types.GWData
                   @ (Yesod.Routes.Class.Route Foundation.Balada)
                   Handlers.getCaddiaR7
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:Body[0]
                             <Yesod.Routes.Class.Route Foundation.Balada>_R))
                   (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                     `cast`
                   (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Script
                           (Yesod.Routes.Class.Route Foundation.Balada)])
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                             <Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Stylesheet
                           (Yesod.Routes.Class.Route Foundation.Balada)])
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                             <Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                   (Data.Map.Base.Tip
                      @ (GHC.Base.Maybe Data.Text.Internal.Text)
                      @ ((Yesod.Routes.Class.Route Foundation.Balada
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Data.Text.Internal.Builder.Builder))
                   (GHC.Base.Nothing
                      @ ((Yesod.Routes.Class.Route Foundation.Balada
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Text.Julius.Javascript))
                   (Yesod.Core.Types.$fApplicativeWidgetT2
                      @ (Yesod.Routes.Class.Route Foundation.Balada))
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:Head[0]
                             <Yesod.Routes.Class.Route Foundation.Balada>_R))) -}
9d4ea2e8cbf3903524240249ef6b7343
  getCaddiaR7 ::
    Yesod.Core.Types.RY Foundation.Balada -> Text.Blaze.Html.Html
  {- Arity: 1,
     Unfolding: (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                 Handlers.getCaddiaR_x) -}
9c6647966b7fd5dcc849d84ede3099df
  getCaddiaR8 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.PreEscaped Handlers.getCaddiaR9) -}
786c5a22b90143128a9e1eab8034cd84
  getCaddiaR9 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m3,
     Unfolding: (Text.Blaze.Internal.Text Handlers.getCaddiaR10) -}
2aa08bdc0d1ddd03435b8a8242df24bb
  getCaddiaR_x :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.getCaddiaR8) -}
026a4e3e7acabe3d5f1d0a533ad821ae
  getCadestabR :: Foundation.Handler Text.Blaze.Html.Html
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Handlers.getCadestabR1
                  `cast`
                (Trans
                     (<Yesod.Core.Types.HandlerData
                         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R))
                     (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                               <Foundation.Balada>_N
                               <GHC.Types.IO>_N
                               <Text.Blaze.Html.Html>_N))) -}
bf658470343d49bf58606dbce68d56e0
  getCadestabR1 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Text.Blaze.Html.Html #)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ r :: Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (Handlers.getCadestabR11
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Foundation.Balada>_N
                            <GHC.Types.IO>_N
                            <(Foundation.Widget, Yesod.Form.Types.Enctype)>_N)
                         r)
                        `cast`
                      (GHC.Types.NTCo:IO[0]
                           <(Foundation.Widget, Yesod.Form.Types.Enctype)>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) widget enctype ->
                 ((Foundation.$fYesodBalada_$cdefaultLayout
                     (let {
                        x3 :: Text.Blaze.Html.Html
                        = case enctype of wild1 {
                            Yesod.Form.Types.UrlEncoded -> Yesod.Form.Types.$fToMarkupEnctype4
                            Yesod.Form.Types.Multipart -> Yesod.Form.Types.$fToMarkupEnctype1 }
                      } in
                      let {
                        a36 :: Yesod.Core.Types.RY Foundation.Balada
                               -> Text.Blaze.Html.Html
                          {- Arity: 1 -}
                        = \ ds :: Yesod.Core.Types.RY Foundation.Balada -> x3
                      } in
                      let {
                        a37 :: Yesod.Core.Types.GWData
                                 (Yesod.Routes.Class.Route Foundation.Balada)
                        = Yesod.Core.Types.GWData
                            @ (Yesod.Routes.Class.Route Foundation.Balada)
                            a36
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:Body[0]
                                      <Yesod.Routes.Class.Route Foundation.Balada>_R))
                            (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                              `cast`
                            (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                            (GHC.Base.id
                               @ [Yesod.Core.Types.Script
                                    (Yesod.Routes.Class.Route Foundation.Balada)])
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                      <Yesod.Core.Types.Script
                                         (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                            (GHC.Base.id
                               @ [Yesod.Core.Types.Stylesheet
                                    (Yesod.Routes.Class.Route Foundation.Balada)])
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                      <Yesod.Core.Types.Stylesheet
                                         (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                            (Data.Map.Base.Tip
                               @ (GHC.Base.Maybe Data.Text.Internal.Text)
                               @ ((Yesod.Routes.Class.Route Foundation.Balada
                                   -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                                   -> Data.Text.Internal.Text)
                                  -> Data.Text.Internal.Builder.Builder))
                            (GHC.Base.Nothing
                               @ ((Yesod.Routes.Class.Route Foundation.Balada
                                   -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                                   -> Data.Text.Internal.Text)
                                  -> Text.Julius.Javascript))
                            (Yesod.Core.Types.$fApplicativeWidgetT2
                               @ (Yesod.Routes.Class.Route Foundation.Balada))
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:Head[0]
                                      <Yesod.Routes.Class.Route Foundation.Balada>_R))
                      } in
                      let {
                        lvl119 :: ((),
                                   Yesod.Core.Types.GWData
                                     (Yesod.Routes.Class.Route
                                        (Yesod.Core.Class.Handler.HandlerSite
                                           (Yesod.Core.Types.WidgetT
                                              Foundation.Balada GHC.Types.IO))))
                        = (GHC.Tuple.(),
                           a37
                             `cast`
                           (Yesod.Core.Types.GWData
                              (Yesod.Routes.Class.Route
                                 (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)
                      } in
                      let {
                        a38 :: Yesod.Core.Types.HandlerData
                                 Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     ((),
                                      Yesod.Core.Types.GWData
                                        (Yesod.Routes.Class.Route
                                           (Yesod.Core.Class.Handler.HandlerSite
                                              (Yesod.Core.Types.WidgetT
                                                 Foundation.Balada GHC.Types.IO)))) #)
                          {- Arity: 2, Strictness: <L,A><L,U>,
                             Unfolding: InlineRule (2, True, False)
                                        (\ eta :: Yesod.Core.Types.HandlerData
                                                    Foundation.Balada
                                                    (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                           eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                         (# eta2,
                                            (GHC.Tuple.(),
                                             (Yesod.Core.Types.GWData
                                                @ (Yesod.Routes.Class.Route Foundation.Balada)
                                                (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                                                 x3)
                                                  `cast`
                                                (Sym (Yesod.Core.Types.NTCo:Body[0]
                                                          <Yesod.Routes.Class.Route
                                                             Foundation.Balada>_R))
                                                (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                                                  `cast`
                                                (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                                                (GHC.Base.id
                                                   @ [Yesod.Core.Types.Script
                                                        (Yesod.Routes.Class.Route
                                                           Foundation.Balada)])
                                                  `cast`
                                                (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                                          <Yesod.Core.Types.Script
                                                             (Yesod.Routes.Class.Route
                                                                Foundation.Balada)>_R))
                                                (GHC.Base.id
                                                   @ [Yesod.Core.Types.Stylesheet
                                                        (Yesod.Routes.Class.Route
                                                           Foundation.Balada)])
                                                  `cast`
                                                (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                                          <Yesod.Core.Types.Stylesheet
                                                             (Yesod.Routes.Class.Route
                                                                Foundation.Balada)>_R))
                                                (Data.Map.Base.Tip
                                                   @ (GHC.Base.Maybe Data.Text.Internal.Text)
                                                   @ ((Yesod.Routes.Class.Route Foundation.Balada
                                                       -> [(Data.Text.Internal.Text,
                                                            Data.Text.Internal.Text)]
                                                       -> Data.Text.Internal.Text)
                                                      -> Data.Text.Internal.Builder.Builder))
                                                (GHC.Base.Nothing
                                                   @ ((Yesod.Routes.Class.Route Foundation.Balada
                                                       -> [(Data.Text.Internal.Text,
                                                            Data.Text.Internal.Text)]
                                                       -> Data.Text.Internal.Text)
                                                      -> Text.Julius.Javascript))
                                                (Yesod.Core.Types.$fApplicativeWidgetT2
                                                   @ (Yesod.Routes.Class.Route Foundation.Balada))
                                                  `cast`
                                                (Sym (Yesod.Core.Types.NTCo:Head[0]
                                                          <Yesod.Routes.Class.Route
                                                             Foundation.Balada>_R)))
                                               `cast`
                                             (Yesod.Core.Types.GWData
                                                (Yesod.Routes.Class.Route
                                                   (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                             <Foundation.Balada>_N
                                                             <GHC.Types.IO>_N)))_R)_R) #)) -}
                        = \ eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                            eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                          (# eta2, lvl119 #)
                      } in
                      let {
                        a39 :: Yesod.Core.Types.HandlerData
                                 Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                               -> GHC.Types.IO
                                    ((),
                                     Yesod.Core.Types.GWData
                                       (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 1, Strictness: <L,1*U(U,U,U,1*H,U)>,
                             Unfolding: InlineRule (1, True, False)
                                        (\ eta2 :: Yesod.Core.Types.HandlerData
                                                     Foundation.Balada
                                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                                         widget
                                           `cast`
                                         (Trans
                                              (Yesod.Core.Types.NTCo:WidgetT[0]
                                                   (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                             <Foundation.Balada>_N
                                                             <GHC.Types.IO>_N))
                                                   <GHC.Types.IO>_N
                                                   <()>_N)
                                              ((Yesod.Core.Types.HandlerData
                                                  (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                       <Foundation.Balada>_N <GHC.Types.IO>_N)
                                                  (Sub (Yesod.Core.Types.TFCo:R:MonadRouteIO[0])))_R
                                               ->_R (GHC.Types.IO
                                                       ((<()>_R,
                                                         (Yesod.Core.Types.GWData
                                                            (Yesod.Routes.Class.Route
                                                               (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                    <Foundation.Balada>_N
                                                                    <GHC.Types.IO>_N))_R)_R))_R)_R))
                                           (case eta2 of wild1 { Yesod.Core.Types.HandlerData ds ds2 dt ds3 dt1 ->
                                            Yesod.Core.Types.HandlerData
                                              @ Foundation.Balada
                                              @ ()
                                              ds
                                              ds2
                                              dt
                                              (Yesod.Core.Class.Handler.$fMonadHandlerHandlerT2
                                                 @ Foundation.Balada)
                                              dt1 })) -}
                        = \ eta2 :: Yesod.Core.Types.HandlerData
                                      Foundation.Balada
                                      (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                          widget
                            `cast`
                          (Trans
                               (Yesod.Core.Types.NTCo:WidgetT[0]
                                    (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                                    <GHC.Types.IO>_N
                                    <()>_N)
                               ((Yesod.Core.Types.HandlerData
                                   (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                        <Foundation.Balada>_N <GHC.Types.IO>_N)
                                   (Sub (Yesod.Core.Types.TFCo:R:MonadRouteIO[0])))_R
                                ->_R (GHC.Types.IO
                                        ((<()>_R,
                                          (Yesod.Core.Types.GWData
                                             (Yesod.Routes.Class.Route
                                                (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                     <Foundation.Balada>_N
                                                     <GHC.Types.IO>_N))_R)_R))_R)_R))
                            (case eta2 of wild1 { Yesod.Core.Types.HandlerData ds ds2 dt ds3 dt1 ->
                             Yesod.Core.Types.HandlerData
                               @ Foundation.Balada
                               @ ()
                               ds
                               ds2
                               dt
                               (Yesod.Core.Class.Handler.$fMonadHandlerHandlerT2
                                  @ Foundation.Balada)
                               dt1 })
                      } in
                      let {
                        lvl120 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            a39
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            Handlers.getCadestabR4
                              `cast`
                            (<()>_R
                             ->_R Trans
                                      (<Yesod.Core.Types.HandlerData
                                          Foundation.Balada
                                          (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                                     ((<()>_R,
                                                       (Yesod.Core.Types.GWData
                                                          (Yesod.Routes.Class.Route
                                                             (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                       <Foundation.Balada>_N
                                                                       <GHC.Types.IO>_N)))_R)_R))_R))
                                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                            eta
                      } in
                      let {
                        lvl121 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            Handlers.getCadcategoriaR12
                              `cast`
                            (Trans
                                 (<Yesod.Core.Types.HandlerData
                                     Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                                  ->_R Sym (GHC.Types.NTCo:IO[0]
                                                ((<()>_R,
                                                  (Yesod.Core.Types.GWData
                                                     (Yesod.Routes.Class.Route
                                                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                  <Foundation.Balada>_N
                                                                  <GHC.Types.IO>_N)))_R)_R))_R))
                                 (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                            lvl120
                              `cast`
                            (<()>_R
                             ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            eta
                      } in
                      let {
                        lvl122 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            Handlers.getCadestabR2
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            lvl121
                              `cast`
                            (<()>_R
                             ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            eta
                      } in
                      let {
                        lvl123 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            Handlers.getCadcategoriaR6
                              `cast`
                            (Trans
                                 (<Yesod.Core.Types.HandlerData
                                     Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                                  ->_R Sym (GHC.Types.NTCo:IO[0]
                                                ((<()>_R,
                                                  (Yesod.Core.Types.GWData
                                                     (Yesod.Routes.Class.Route
                                                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                  <Foundation.Balada>_N
                                                                  <GHC.Types.IO>_N)))_R)_R))_R))
                                 (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                            lvl122
                              `cast`
                            (<()>_R
                             ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            eta
                      } in
                      let {
                        lvl124 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            a38
                              `cast`
                            (Trans
                                 (<Yesod.Core.Types.HandlerData
                                     Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                                  ->_R Sym (GHC.Types.NTCo:IO[0]
                                                ((<()>_R,
                                                  (Yesod.Core.Types.GWData
                                                     (Yesod.Routes.Class.Route
                                                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                  <Foundation.Balada>_N
                                                                  <GHC.Types.IO>_N)))_R)_R))_R))
                                 (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                            lvl123
                              `cast`
                            (<()>_R
                             ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            eta
                      } in
                      (\ eta :: Yesod.Core.Types.HandlerData
                                  Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                       Yesod.Core.Types.$wa1
                         @ Foundation.Balada
                         @ GHC.Types.IO
                         GHC.Base.$fMonadIO
                         @ ()
                         @ ()
                         Handlers.getCadcategoriaR2
                           `cast`
                         (Trans
                              (<Yesod.Core.Types.HandlerData
                                  Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                               ->_R Sym (GHC.Types.NTCo:IO[0]
                                             ((<()>_R,
                                               (Yesod.Core.Types.GWData
                                                  (Yesod.Routes.Class.Route
                                                     (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                               <Foundation.Balada>_N
                                                               <GHC.Types.IO>_N)))_R)_R))_R))
                              (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                        <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                         lvl124
                           `cast`
                         (<()>_R
                          ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                        <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                         eta)
                        `cast`
                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))))
                    `cast`
                  (Yesod.Core.Types.NTCo:HandlerT[0]
                       <Foundation.Balada>_N <GHC.Types.IO>_N <Text.Blaze.Html.Html>_N)
                    r)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R)
                   ipv } }) -}
e83cf8ed6d8c8766b2637376797807dd
  getCadestabR10 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\n\
                   \<input type=\"submit\" value=\"Enviar\">\n\
                   \<h1> Cadastro de estabelecimento Completo</h1>\n"#) -}
7564656f4d060471dc1c369ba4c33a97
  getCadestabR11 ::
    Yesod.Core.Types.HandlerT
      Foundation.Balada
      GHC.Types.IO
      (Foundation.Widget, Yesod.Form.Types.Enctype)
  {- Unfolding: (Yesod.Form.Functions.generateFormPost
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   @ Foundation.Estabelecimento
                   @ Foundation.Widget
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)
                             <Yesod.Form.Types.FormMessage>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formEstabelecimento1
                     `cast`
                   (<Text.Blaze.Internal.MarkupM ()>_R
                    ->_R Sym (Control.Monad.Trans.RWS.Lazy.NTCo:RWST[0]
                                  <(GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                                    Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                                    [Text.Shakespeare.I18N.Lang])>_R
                                  <Yesod.Form.Types.Enctype>_N
                                  <Yesod.Form.Types.Ints>_N
                                  <Foundation.Handler>_R
                                  ((<Yesod.Form.Types.FormResult Foundation.Estabelecimento>_N,
                                    (Yesod.Core.Types.WidgetT
                                       (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                                 <Foundation.Balada>_N <GHC.Types.IO>_N))
                                       <GHC.Types.IO>_N
                                       <()>_N)_N))_N))) -}
164a772c8a07d54851fba96bc52d97da
  getCadestabR2 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ w4 :: Yesod.Core.Types.HandlerData
                           Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ (Yesod.Routes.Class.Route Foundation.Balada
                      -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                      -> Data.Text.Internal.Text)
                   @ ()
                   Handlers.getAboutR12
                     `cast`
                   (Yesod.Core.Types.WidgetT
                      <Foundation.Balada>_N
                      <GHC.Types.IO>_N
                      ((Yesod.Routes.Class.Route
                          (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                               <Foundation.Balada>_N <GHC.Types.IO>_N))_N
                       ->_N <[(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                             -> Data.Text.Internal.Text>_N))_R
                   Handlers.getCadestabR3
                   w4) -}
6418b07e9228b12f70a60a1d554578b0
  getCadestabR3 ::
    (Yesod.Routes.Class.Route Foundation.Balada
     -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
     -> Data.Text.Internal.Text)
    -> Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*C1(C1(U(U,U,U)))>,
     Unfolding: (\ urender :: Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text ->
                 let {
                   a36 :: Data.Text.Internal.Text
                   = urender
                       Foundation.CadestabR
                         `cast`
                       (Sub (Sym (Foundation.TFCo:R:RouteBalada[0])))
                       (GHC.Types.[] @ (Data.Text.Internal.Text, Data.Text.Internal.Text))
                 } in
                 let {
                   a37 :: Text.Blaze.Internal.ChoiceString
                   = Text.Blaze.Internal.Text a36
                 } in
                 let {
                   x3 :: Text.Blaze.Html.Html = Text.Blaze.Internal.Content @ () a37
                 } in
                 let {
                   a38 :: Yesod.Core.Types.RY Foundation.Balada
                          -> Text.Blaze.Html.Html
                     {- Arity: 1 -}
                   = \ ds :: Yesod.Core.Types.RY Foundation.Balada -> x3
                 } in
                 let {
                   a39 :: Yesod.Core.Types.GWData
                            (Yesod.Routes.Class.Route Foundation.Balada)
                   = Yesod.Core.Types.GWData
                       @ (Yesod.Routes.Class.Route Foundation.Balada)
                       a38
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Body[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                       (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                         `cast`
                       (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Script
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Script
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Stylesheet
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Stylesheet
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (Data.Map.Base.Tip
                          @ (GHC.Base.Maybe Data.Text.Internal.Text)
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Data.Text.Internal.Builder.Builder))
                       (GHC.Base.Nothing
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Text.Julius.Javascript))
                       (Yesod.Core.Types.$fApplicativeWidgetT2
                          @ (Yesod.Routes.Class.Route Foundation.Balada))
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Head[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                 } in
                 let {
                   lvl119 :: ((),
                              Yesod.Core.Types.GWData
                                (Yesod.Routes.Class.Route
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))))
                   = (GHC.Tuple.(),
                      a39
                        `cast`
                      (Yesod.Core.Types.GWData
                         (Yesod.Routes.Class.Route
                            (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)
                 } in
                 (\ eta :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  (# eta2, lvl119 #))
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     ((<()>_R,
                                       (Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route
                                             (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                       <Foundation.Balada>_N
                                                       <GHC.Types.IO>_N)))_R)_R))_R))
                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))) -}
6bdb2f9219b08398dcc6b5b963956de9
  getCadestabR4 ::
    ()
    -> Yesod.Core.Types.HandlerData
         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Yesod.Core.Types.GWData
             (Yesod.Routes.Class.Route
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)))) #)
  {- Arity: 3,
     Unfolding: (\ ds :: ()
                   eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada
                            (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot]
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta2, Handlers.getCadestabR5 #)) -}
141d410d12bd8ee6d7eacf58f5e47184
  getCadestabR5 ::
    ((),
     Yesod.Core.Types.GWData
       (Yesod.Routes.Class.Route
          (Yesod.Core.Class.Handler.HandlerSite
             (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))))
  {- Unfolding: ((GHC.Tuple.(),
                  Handlers.getCadestabR6
                    `cast`
                  (Yesod.Core.Types.GWData
                     (Yesod.Routes.Class.Route
                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)) -}
4ad4df1ca7641a5c850b6d1a22c8ce63
  getCadestabR6 ::
    Yesod.Core.Types.GWData
      (Yesod.Routes.Class.Route Foundation.Balada)
  {- Unfolding: (Yesod.Core.Types.GWData
                   @ (Yesod.Routes.Class.Route Foundation.Balada)
                   Handlers.getCadestabR7
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:Body[0]
                             <Yesod.Routes.Class.Route Foundation.Balada>_R))
                   (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                     `cast`
                   (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Script
                           (Yesod.Routes.Class.Route Foundation.Balada)])
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                             <Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Stylesheet
                           (Yesod.Routes.Class.Route Foundation.Balada)])
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                             <Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                   (Data.Map.Base.Tip
                      @ (GHC.Base.Maybe Data.Text.Internal.Text)
                      @ ((Yesod.Routes.Class.Route Foundation.Balada
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Data.Text.Internal.Builder.Builder))
                   (GHC.Base.Nothing
                      @ ((Yesod.Routes.Class.Route Foundation.Balada
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Text.Julius.Javascript))
                   (Yesod.Core.Types.$fApplicativeWidgetT2
                      @ (Yesod.Routes.Class.Route Foundation.Balada))
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:Head[0]
                             <Yesod.Routes.Class.Route Foundation.Balada>_R))) -}
11181447b7fd6c8ff4fe17448b30978a
  getCadestabR7 ::
    Yesod.Core.Types.RY Foundation.Balada -> Text.Blaze.Html.Html
  {- Arity: 1,
     Unfolding: (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                 Handlers.getCadestabR_x) -}
71d7a91c8bee8c761408ef422d11c8ca
  getCadestabR8 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.PreEscaped
                   Handlers.getCadestabR9) -}
d0cd7db8fbb76481118b80896ee07bbe
  getCadestabR9 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m3,
     Unfolding: (Text.Blaze.Internal.Text Handlers.getCadestabR10) -}
c1a7023c61cf3aea21c47a5d9d70dd33
  getCadestabR_x :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.getCadestabR8) -}
ee42326df4823ef779f81094018ff1b3
  getCadfaixaprecoR :: Foundation.Handler Text.Blaze.Html.Html
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Handlers.getCadfaixaprecoR1
                  `cast`
                (Trans
                     (<Yesod.Core.Types.HandlerData
                         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R))
                     (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                               <Foundation.Balada>_N
                               <GHC.Types.IO>_N
                               <Text.Blaze.Html.Html>_N))) -}
2b2081487f305611e6aaf1355597d499
  getCadfaixaprecoR1 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Text.Blaze.Html.Html #)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ r :: Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (Handlers.getCadfaixaprecoR11
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Foundation.Balada>_N
                            <GHC.Types.IO>_N
                            <(Foundation.Widget, Yesod.Form.Types.Enctype)>_N)
                         r)
                        `cast`
                      (GHC.Types.NTCo:IO[0]
                           <(Foundation.Widget, Yesod.Form.Types.Enctype)>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) widget enctype ->
                 ((Foundation.$fYesodBalada_$cdefaultLayout
                     (let {
                        x3 :: Text.Blaze.Html.Html
                        = case enctype of wild1 {
                            Yesod.Form.Types.UrlEncoded -> Yesod.Form.Types.$fToMarkupEnctype4
                            Yesod.Form.Types.Multipart -> Yesod.Form.Types.$fToMarkupEnctype1 }
                      } in
                      let {
                        a36 :: Yesod.Core.Types.RY Foundation.Balada
                               -> Text.Blaze.Html.Html
                          {- Arity: 1 -}
                        = \ ds :: Yesod.Core.Types.RY Foundation.Balada -> x3
                      } in
                      let {
                        a37 :: Yesod.Core.Types.GWData
                                 (Yesod.Routes.Class.Route Foundation.Balada)
                        = Yesod.Core.Types.GWData
                            @ (Yesod.Routes.Class.Route Foundation.Balada)
                            a36
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:Body[0]
                                      <Yesod.Routes.Class.Route Foundation.Balada>_R))
                            (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                              `cast`
                            (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                            (GHC.Base.id
                               @ [Yesod.Core.Types.Script
                                    (Yesod.Routes.Class.Route Foundation.Balada)])
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                      <Yesod.Core.Types.Script
                                         (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                            (GHC.Base.id
                               @ [Yesod.Core.Types.Stylesheet
                                    (Yesod.Routes.Class.Route Foundation.Balada)])
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                      <Yesod.Core.Types.Stylesheet
                                         (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                            (Data.Map.Base.Tip
                               @ (GHC.Base.Maybe Data.Text.Internal.Text)
                               @ ((Yesod.Routes.Class.Route Foundation.Balada
                                   -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                                   -> Data.Text.Internal.Text)
                                  -> Data.Text.Internal.Builder.Builder))
                            (GHC.Base.Nothing
                               @ ((Yesod.Routes.Class.Route Foundation.Balada
                                   -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                                   -> Data.Text.Internal.Text)
                                  -> Text.Julius.Javascript))
                            (Yesod.Core.Types.$fApplicativeWidgetT2
                               @ (Yesod.Routes.Class.Route Foundation.Balada))
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:Head[0]
                                      <Yesod.Routes.Class.Route Foundation.Balada>_R))
                      } in
                      let {
                        lvl119 :: ((),
                                   Yesod.Core.Types.GWData
                                     (Yesod.Routes.Class.Route
                                        (Yesod.Core.Class.Handler.HandlerSite
                                           (Yesod.Core.Types.WidgetT
                                              Foundation.Balada GHC.Types.IO))))
                        = (GHC.Tuple.(),
                           a37
                             `cast`
                           (Yesod.Core.Types.GWData
                              (Yesod.Routes.Class.Route
                                 (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)
                      } in
                      let {
                        a38 :: Yesod.Core.Types.HandlerData
                                 Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     ((),
                                      Yesod.Core.Types.GWData
                                        (Yesod.Routes.Class.Route
                                           (Yesod.Core.Class.Handler.HandlerSite
                                              (Yesod.Core.Types.WidgetT
                                                 Foundation.Balada GHC.Types.IO)))) #)
                          {- Arity: 2, Strictness: <L,A><L,U>,
                             Unfolding: InlineRule (2, True, False)
                                        (\ eta :: Yesod.Core.Types.HandlerData
                                                    Foundation.Balada
                                                    (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                           eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                         (# eta2,
                                            (GHC.Tuple.(),
                                             (Yesod.Core.Types.GWData
                                                @ (Yesod.Routes.Class.Route Foundation.Balada)
                                                (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                                                 x3)
                                                  `cast`
                                                (Sym (Yesod.Core.Types.NTCo:Body[0]
                                                          <Yesod.Routes.Class.Route
                                                             Foundation.Balada>_R))
                                                (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                                                  `cast`
                                                (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                                                (GHC.Base.id
                                                   @ [Yesod.Core.Types.Script
                                                        (Yesod.Routes.Class.Route
                                                           Foundation.Balada)])
                                                  `cast`
                                                (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                                          <Yesod.Core.Types.Script
                                                             (Yesod.Routes.Class.Route
                                                                Foundation.Balada)>_R))
                                                (GHC.Base.id
                                                   @ [Yesod.Core.Types.Stylesheet
                                                        (Yesod.Routes.Class.Route
                                                           Foundation.Balada)])
                                                  `cast`
                                                (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                                          <Yesod.Core.Types.Stylesheet
                                                             (Yesod.Routes.Class.Route
                                                                Foundation.Balada)>_R))
                                                (Data.Map.Base.Tip
                                                   @ (GHC.Base.Maybe Data.Text.Internal.Text)
                                                   @ ((Yesod.Routes.Class.Route Foundation.Balada
                                                       -> [(Data.Text.Internal.Text,
                                                            Data.Text.Internal.Text)]
                                                       -> Data.Text.Internal.Text)
                                                      -> Data.Text.Internal.Builder.Builder))
                                                (GHC.Base.Nothing
                                                   @ ((Yesod.Routes.Class.Route Foundation.Balada
                                                       -> [(Data.Text.Internal.Text,
                                                            Data.Text.Internal.Text)]
                                                       -> Data.Text.Internal.Text)
                                                      -> Text.Julius.Javascript))
                                                (Yesod.Core.Types.$fApplicativeWidgetT2
                                                   @ (Yesod.Routes.Class.Route Foundation.Balada))
                                                  `cast`
                                                (Sym (Yesod.Core.Types.NTCo:Head[0]
                                                          <Yesod.Routes.Class.Route
                                                             Foundation.Balada>_R)))
                                               `cast`
                                             (Yesod.Core.Types.GWData
                                                (Yesod.Routes.Class.Route
                                                   (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                             <Foundation.Balada>_N
                                                             <GHC.Types.IO>_N)))_R)_R) #)) -}
                        = \ eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                            eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                          (# eta2, lvl119 #)
                      } in
                      let {
                        a39 :: Yesod.Core.Types.HandlerData
                                 Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                               -> GHC.Types.IO
                                    ((),
                                     Yesod.Core.Types.GWData
                                       (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 1, Strictness: <L,1*U(U,U,U,1*H,U)>,
                             Unfolding: InlineRule (1, True, False)
                                        (\ eta2 :: Yesod.Core.Types.HandlerData
                                                     Foundation.Balada
                                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                                         widget
                                           `cast`
                                         (Trans
                                              (Yesod.Core.Types.NTCo:WidgetT[0]
                                                   (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                             <Foundation.Balada>_N
                                                             <GHC.Types.IO>_N))
                                                   <GHC.Types.IO>_N
                                                   <()>_N)
                                              ((Yesod.Core.Types.HandlerData
                                                  (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                       <Foundation.Balada>_N <GHC.Types.IO>_N)
                                                  (Sub (Yesod.Core.Types.TFCo:R:MonadRouteIO[0])))_R
                                               ->_R (GHC.Types.IO
                                                       ((<()>_R,
                                                         (Yesod.Core.Types.GWData
                                                            (Yesod.Routes.Class.Route
                                                               (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                    <Foundation.Balada>_N
                                                                    <GHC.Types.IO>_N))_R)_R))_R)_R))
                                           (case eta2 of wild1 { Yesod.Core.Types.HandlerData ds ds2 dt ds3 dt1 ->
                                            Yesod.Core.Types.HandlerData
                                              @ Foundation.Balada
                                              @ ()
                                              ds
                                              ds2
                                              dt
                                              (Yesod.Core.Class.Handler.$fMonadHandlerHandlerT2
                                                 @ Foundation.Balada)
                                              dt1 })) -}
                        = \ eta2 :: Yesod.Core.Types.HandlerData
                                      Foundation.Balada
                                      (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                          widget
                            `cast`
                          (Trans
                               (Yesod.Core.Types.NTCo:WidgetT[0]
                                    (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                                    <GHC.Types.IO>_N
                                    <()>_N)
                               ((Yesod.Core.Types.HandlerData
                                   (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                        <Foundation.Balada>_N <GHC.Types.IO>_N)
                                   (Sub (Yesod.Core.Types.TFCo:R:MonadRouteIO[0])))_R
                                ->_R (GHC.Types.IO
                                        ((<()>_R,
                                          (Yesod.Core.Types.GWData
                                             (Yesod.Routes.Class.Route
                                                (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                     <Foundation.Balada>_N
                                                     <GHC.Types.IO>_N))_R)_R))_R)_R))
                            (case eta2 of wild1 { Yesod.Core.Types.HandlerData ds ds2 dt ds3 dt1 ->
                             Yesod.Core.Types.HandlerData
                               @ Foundation.Balada
                               @ ()
                               ds
                               ds2
                               dt
                               (Yesod.Core.Class.Handler.$fMonadHandlerHandlerT2
                                  @ Foundation.Balada)
                               dt1 })
                      } in
                      let {
                        lvl120 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            a39
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            Handlers.getCadfaixaprecoR4
                              `cast`
                            (<()>_R
                             ->_R Trans
                                      (<Yesod.Core.Types.HandlerData
                                          Foundation.Balada
                                          (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                                     ((<()>_R,
                                                       (Yesod.Core.Types.GWData
                                                          (Yesod.Routes.Class.Route
                                                             (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                       <Foundation.Balada>_N
                                                                       <GHC.Types.IO>_N)))_R)_R))_R))
                                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                            eta
                      } in
                      let {
                        lvl121 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            Handlers.getCadcategoriaR12
                              `cast`
                            (Trans
                                 (<Yesod.Core.Types.HandlerData
                                     Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                                  ->_R Sym (GHC.Types.NTCo:IO[0]
                                                ((<()>_R,
                                                  (Yesod.Core.Types.GWData
                                                     (Yesod.Routes.Class.Route
                                                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                  <Foundation.Balada>_N
                                                                  <GHC.Types.IO>_N)))_R)_R))_R))
                                 (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                            lvl120
                              `cast`
                            (<()>_R
                             ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            eta
                      } in
                      let {
                        lvl122 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            Handlers.getCadfaixaprecoR2
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            lvl121
                              `cast`
                            (<()>_R
                             ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            eta
                      } in
                      let {
                        lvl123 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            Handlers.getCadcategoriaR6
                              `cast`
                            (Trans
                                 (<Yesod.Core.Types.HandlerData
                                     Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                                  ->_R Sym (GHC.Types.NTCo:IO[0]
                                                ((<()>_R,
                                                  (Yesod.Core.Types.GWData
                                                     (Yesod.Routes.Class.Route
                                                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                  <Foundation.Balada>_N
                                                                  <GHC.Types.IO>_N)))_R)_R))_R))
                                 (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                            lvl122
                              `cast`
                            (<()>_R
                             ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            eta
                      } in
                      let {
                        lvl124 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            a38
                              `cast`
                            (Trans
                                 (<Yesod.Core.Types.HandlerData
                                     Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                                  ->_R Sym (GHC.Types.NTCo:IO[0]
                                                ((<()>_R,
                                                  (Yesod.Core.Types.GWData
                                                     (Yesod.Routes.Class.Route
                                                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                  <Foundation.Balada>_N
                                                                  <GHC.Types.IO>_N)))_R)_R))_R))
                                 (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                            lvl123
                              `cast`
                            (<()>_R
                             ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            eta
                      } in
                      (\ eta :: Yesod.Core.Types.HandlerData
                                  Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                       Yesod.Core.Types.$wa1
                         @ Foundation.Balada
                         @ GHC.Types.IO
                         GHC.Base.$fMonadIO
                         @ ()
                         @ ()
                         Handlers.getCadcategoriaR2
                           `cast`
                         (Trans
                              (<Yesod.Core.Types.HandlerData
                                  Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                               ->_R Sym (GHC.Types.NTCo:IO[0]
                                             ((<()>_R,
                                               (Yesod.Core.Types.GWData
                                                  (Yesod.Routes.Class.Route
                                                     (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                               <Foundation.Balada>_N
                                                               <GHC.Types.IO>_N)))_R)_R))_R))
                              (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                        <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                         lvl124
                           `cast`
                         (<()>_R
                          ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                        <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                         eta)
                        `cast`
                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))))
                    `cast`
                  (Yesod.Core.Types.NTCo:HandlerT[0]
                       <Foundation.Balada>_N <GHC.Types.IO>_N <Text.Blaze.Html.Html>_N)
                    r)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R)
                   ipv } }) -}
6f0dab61a744896c06803a826dd5968d
  getCadfaixaprecoR10 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\n\
                   \<input type=\"submit\" value=\"Enviar\">\n\
                   \<h1> Faixa de preco estabelecido</h1>\n"#) -}
e2cfc98e2cb6222b9e8ca8d3aa225f52
  getCadfaixaprecoR11 ::
    Yesod.Core.Types.HandlerT
      Foundation.Balada
      GHC.Types.IO
      (Foundation.Widget, Yesod.Form.Types.Enctype)
  {- Unfolding: (Yesod.Form.Functions.generateFormPost
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   @ Foundation.Faixa_preco
                   @ Foundation.Widget
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)
                             <Yesod.Form.Types.FormMessage>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formFaixapreco1
                     `cast`
                   (<Text.Blaze.Internal.MarkupM ()>_R
                    ->_R Sym (Control.Monad.Trans.RWS.Lazy.NTCo:RWST[0]
                                  <(GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                                    Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                                    [Text.Shakespeare.I18N.Lang])>_R
                                  <Yesod.Form.Types.Enctype>_N
                                  <Yesod.Form.Types.Ints>_N
                                  <Foundation.Handler>_R
                                  ((<Yesod.Form.Types.FormResult Foundation.Faixa_preco>_N,
                                    (Yesod.Core.Types.WidgetT
                                       (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                                 <Foundation.Balada>_N <GHC.Types.IO>_N))
                                       <GHC.Types.IO>_N
                                       <()>_N)_N))_N))) -}
f87f1c4593e36f6d4a22185f59df34d6
  getCadfaixaprecoR2 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ w4 :: Yesod.Core.Types.HandlerData
                           Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ (Yesod.Routes.Class.Route Foundation.Balada
                      -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                      -> Data.Text.Internal.Text)
                   @ ()
                   Handlers.getAboutR12
                     `cast`
                   (Yesod.Core.Types.WidgetT
                      <Foundation.Balada>_N
                      <GHC.Types.IO>_N
                      ((Yesod.Routes.Class.Route
                          (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                               <Foundation.Balada>_N <GHC.Types.IO>_N))_N
                       ->_N <[(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                             -> Data.Text.Internal.Text>_N))_R
                   Handlers.getCadfaixaprecoR3
                   w4) -}
e2f38070660f723d990c3e16b7ac1a1e
  getCadfaixaprecoR3 ::
    (Yesod.Routes.Class.Route Foundation.Balada
     -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
     -> Data.Text.Internal.Text)
    -> Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*C1(C1(U(U,U,U)))>,
     Unfolding: (\ urender :: Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text ->
                 let {
                   a36 :: Data.Text.Internal.Text
                   = urender
                       Foundation.CadfaixaprecoR
                         `cast`
                       (Sub (Sym (Foundation.TFCo:R:RouteBalada[0])))
                       (GHC.Types.[] @ (Data.Text.Internal.Text, Data.Text.Internal.Text))
                 } in
                 let {
                   a37 :: Text.Blaze.Internal.ChoiceString
                   = Text.Blaze.Internal.Text a36
                 } in
                 let {
                   x3 :: Text.Blaze.Html.Html = Text.Blaze.Internal.Content @ () a37
                 } in
                 let {
                   a38 :: Yesod.Core.Types.RY Foundation.Balada
                          -> Text.Blaze.Html.Html
                     {- Arity: 1 -}
                   = \ ds :: Yesod.Core.Types.RY Foundation.Balada -> x3
                 } in
                 let {
                   a39 :: Yesod.Core.Types.GWData
                            (Yesod.Routes.Class.Route Foundation.Balada)
                   = Yesod.Core.Types.GWData
                       @ (Yesod.Routes.Class.Route Foundation.Balada)
                       a38
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Body[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                       (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                         `cast`
                       (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Script
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Script
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Stylesheet
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Stylesheet
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (Data.Map.Base.Tip
                          @ (GHC.Base.Maybe Data.Text.Internal.Text)
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Data.Text.Internal.Builder.Builder))
                       (GHC.Base.Nothing
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Text.Julius.Javascript))
                       (Yesod.Core.Types.$fApplicativeWidgetT2
                          @ (Yesod.Routes.Class.Route Foundation.Balada))
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Head[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                 } in
                 let {
                   lvl119 :: ((),
                              Yesod.Core.Types.GWData
                                (Yesod.Routes.Class.Route
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))))
                   = (GHC.Tuple.(),
                      a39
                        `cast`
                      (Yesod.Core.Types.GWData
                         (Yesod.Routes.Class.Route
                            (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)
                 } in
                 (\ eta :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  (# eta2, lvl119 #))
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     ((<()>_R,
                                       (Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route
                                             (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                       <Foundation.Balada>_N
                                                       <GHC.Types.IO>_N)))_R)_R))_R))
                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))) -}
7858c3f48e5e8aaede44a0b1a943e6f7
  getCadfaixaprecoR4 ::
    ()
    -> Yesod.Core.Types.HandlerData
         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Yesod.Core.Types.GWData
             (Yesod.Routes.Class.Route
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)))) #)
  {- Arity: 3,
     Unfolding: (\ ds :: ()
                   eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada
                            (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot]
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta2, Handlers.getCadfaixaprecoR5 #)) -}
428c9efa2bff959055f5d4bc4124c00d
  getCadfaixaprecoR5 ::
    ((),
     Yesod.Core.Types.GWData
       (Yesod.Routes.Class.Route
          (Yesod.Core.Class.Handler.HandlerSite
             (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))))
  {- Unfolding: ((GHC.Tuple.(),
                  Handlers.getCadfaixaprecoR6
                    `cast`
                  (Yesod.Core.Types.GWData
                     (Yesod.Routes.Class.Route
                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)) -}
f09d8e79cc2a67dbaa2422d61ba4846e
  getCadfaixaprecoR6 ::
    Yesod.Core.Types.GWData
      (Yesod.Routes.Class.Route Foundation.Balada)
  {- Unfolding: (Yesod.Core.Types.GWData
                   @ (Yesod.Routes.Class.Route Foundation.Balada)
                   Handlers.getCadfaixaprecoR7
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:Body[0]
                             <Yesod.Routes.Class.Route Foundation.Balada>_R))
                   (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                     `cast`
                   (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Script
                           (Yesod.Routes.Class.Route Foundation.Balada)])
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                             <Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Stylesheet
                           (Yesod.Routes.Class.Route Foundation.Balada)])
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                             <Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                   (Data.Map.Base.Tip
                      @ (GHC.Base.Maybe Data.Text.Internal.Text)
                      @ ((Yesod.Routes.Class.Route Foundation.Balada
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Data.Text.Internal.Builder.Builder))
                   (GHC.Base.Nothing
                      @ ((Yesod.Routes.Class.Route Foundation.Balada
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Text.Julius.Javascript))
                   (Yesod.Core.Types.$fApplicativeWidgetT2
                      @ (Yesod.Routes.Class.Route Foundation.Balada))
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:Head[0]
                             <Yesod.Routes.Class.Route Foundation.Balada>_R))) -}
7755f563aa4985ffeb4d09c2d58c18a3
  getCadfaixaprecoR7 ::
    Yesod.Core.Types.RY Foundation.Balada -> Text.Blaze.Html.Html
  {- Arity: 1,
     Unfolding: (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                 Handlers.getCadfaixaprecoR_x) -}
20d6d9f95e051f75ce86f04d5a9a8eda
  getCadfaixaprecoR8 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.PreEscaped
                   Handlers.getCadfaixaprecoR9) -}
e075bec228e5a7724fed4b5843e213b6
  getCadfaixaprecoR9 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m3,
     Unfolding: (Text.Blaze.Internal.Text
                   Handlers.getCadfaixaprecoR10) -}
3e28a17c8a0e60a34c899115a19bd62e
  getCadfaixaprecoR_x :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.getCadfaixaprecoR8) -}
42f800a2fde0147df3cb2c9c8fcb3b87
  getCadpessoaR :: Foundation.Handler Text.Blaze.Html.Html
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Handlers.getCadpessoaR1
                  `cast`
                (Trans
                     (<Yesod.Core.Types.HandlerData
                         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R))
                     (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                               <Foundation.Balada>_N
                               <GHC.Types.IO>_N
                               <Text.Blaze.Html.Html>_N))) -}
e85e733555c6715649b3a0045168fc2e
  getCadpessoaR1 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Text.Blaze.Html.Html #)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ r :: Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (Handlers.getCadpessoaR11
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Foundation.Balada>_N
                            <GHC.Types.IO>_N
                            <(Foundation.Widget, Yesod.Form.Types.Enctype)>_N)
                         r)
                        `cast`
                      (GHC.Types.NTCo:IO[0]
                           <(Foundation.Widget, Yesod.Form.Types.Enctype)>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) widget enctype ->
                 ((Foundation.$fYesodBalada_$cdefaultLayout
                     (let {
                        x3 :: Text.Blaze.Html.Html
                        = case enctype of wild1 {
                            Yesod.Form.Types.UrlEncoded -> Yesod.Form.Types.$fToMarkupEnctype4
                            Yesod.Form.Types.Multipart -> Yesod.Form.Types.$fToMarkupEnctype1 }
                      } in
                      let {
                        a36 :: Yesod.Core.Types.RY Foundation.Balada
                               -> Text.Blaze.Html.Html
                          {- Arity: 1 -}
                        = \ ds :: Yesod.Core.Types.RY Foundation.Balada -> x3
                      } in
                      let {
                        a37 :: Yesod.Core.Types.GWData
                                 (Yesod.Routes.Class.Route Foundation.Balada)
                        = Yesod.Core.Types.GWData
                            @ (Yesod.Routes.Class.Route Foundation.Balada)
                            a36
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:Body[0]
                                      <Yesod.Routes.Class.Route Foundation.Balada>_R))
                            (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                              `cast`
                            (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                            (GHC.Base.id
                               @ [Yesod.Core.Types.Script
                                    (Yesod.Routes.Class.Route Foundation.Balada)])
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                      <Yesod.Core.Types.Script
                                         (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                            (GHC.Base.id
                               @ [Yesod.Core.Types.Stylesheet
                                    (Yesod.Routes.Class.Route Foundation.Balada)])
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                      <Yesod.Core.Types.Stylesheet
                                         (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                            (Data.Map.Base.Tip
                               @ (GHC.Base.Maybe Data.Text.Internal.Text)
                               @ ((Yesod.Routes.Class.Route Foundation.Balada
                                   -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                                   -> Data.Text.Internal.Text)
                                  -> Data.Text.Internal.Builder.Builder))
                            (GHC.Base.Nothing
                               @ ((Yesod.Routes.Class.Route Foundation.Balada
                                   -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                                   -> Data.Text.Internal.Text)
                                  -> Text.Julius.Javascript))
                            (Yesod.Core.Types.$fApplicativeWidgetT2
                               @ (Yesod.Routes.Class.Route Foundation.Balada))
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:Head[0]
                                      <Yesod.Routes.Class.Route Foundation.Balada>_R))
                      } in
                      let {
                        lvl119 :: ((),
                                   Yesod.Core.Types.GWData
                                     (Yesod.Routes.Class.Route
                                        (Yesod.Core.Class.Handler.HandlerSite
                                           (Yesod.Core.Types.WidgetT
                                              Foundation.Balada GHC.Types.IO))))
                        = (GHC.Tuple.(),
                           a37
                             `cast`
                           (Yesod.Core.Types.GWData
                              (Yesod.Routes.Class.Route
                                 (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)
                      } in
                      let {
                        a38 :: Yesod.Core.Types.HandlerData
                                 Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     ((),
                                      Yesod.Core.Types.GWData
                                        (Yesod.Routes.Class.Route
                                           (Yesod.Core.Class.Handler.HandlerSite
                                              (Yesod.Core.Types.WidgetT
                                                 Foundation.Balada GHC.Types.IO)))) #)
                          {- Arity: 2, Strictness: <L,A><L,U>,
                             Unfolding: InlineRule (2, True, False)
                                        (\ eta :: Yesod.Core.Types.HandlerData
                                                    Foundation.Balada
                                                    (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                           eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                         (# eta2,
                                            (GHC.Tuple.(),
                                             (Yesod.Core.Types.GWData
                                                @ (Yesod.Routes.Class.Route Foundation.Balada)
                                                (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                                                 x3)
                                                  `cast`
                                                (Sym (Yesod.Core.Types.NTCo:Body[0]
                                                          <Yesod.Routes.Class.Route
                                                             Foundation.Balada>_R))
                                                (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                                                  `cast`
                                                (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                                                (GHC.Base.id
                                                   @ [Yesod.Core.Types.Script
                                                        (Yesod.Routes.Class.Route
                                                           Foundation.Balada)])
                                                  `cast`
                                                (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                                          <Yesod.Core.Types.Script
                                                             (Yesod.Routes.Class.Route
                                                                Foundation.Balada)>_R))
                                                (GHC.Base.id
                                                   @ [Yesod.Core.Types.Stylesheet
                                                        (Yesod.Routes.Class.Route
                                                           Foundation.Balada)])
                                                  `cast`
                                                (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                                          <Yesod.Core.Types.Stylesheet
                                                             (Yesod.Routes.Class.Route
                                                                Foundation.Balada)>_R))
                                                (Data.Map.Base.Tip
                                                   @ (GHC.Base.Maybe Data.Text.Internal.Text)
                                                   @ ((Yesod.Routes.Class.Route Foundation.Balada
                                                       -> [(Data.Text.Internal.Text,
                                                            Data.Text.Internal.Text)]
                                                       -> Data.Text.Internal.Text)
                                                      -> Data.Text.Internal.Builder.Builder))
                                                (GHC.Base.Nothing
                                                   @ ((Yesod.Routes.Class.Route Foundation.Balada
                                                       -> [(Data.Text.Internal.Text,
                                                            Data.Text.Internal.Text)]
                                                       -> Data.Text.Internal.Text)
                                                      -> Text.Julius.Javascript))
                                                (Yesod.Core.Types.$fApplicativeWidgetT2
                                                   @ (Yesod.Routes.Class.Route Foundation.Balada))
                                                  `cast`
                                                (Sym (Yesod.Core.Types.NTCo:Head[0]
                                                          <Yesod.Routes.Class.Route
                                                             Foundation.Balada>_R)))
                                               `cast`
                                             (Yesod.Core.Types.GWData
                                                (Yesod.Routes.Class.Route
                                                   (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                             <Foundation.Balada>_N
                                                             <GHC.Types.IO>_N)))_R)_R) #)) -}
                        = \ eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                            eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                          (# eta2, lvl119 #)
                      } in
                      let {
                        a39 :: Yesod.Core.Types.HandlerData
                                 Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                               -> GHC.Types.IO
                                    ((),
                                     Yesod.Core.Types.GWData
                                       (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 1, Strictness: <L,1*U(U,U,U,1*H,U)>,
                             Unfolding: InlineRule (1, True, False)
                                        (\ eta2 :: Yesod.Core.Types.HandlerData
                                                     Foundation.Balada
                                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                                         widget
                                           `cast`
                                         (Trans
                                              (Yesod.Core.Types.NTCo:WidgetT[0]
                                                   (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                             <Foundation.Balada>_N
                                                             <GHC.Types.IO>_N))
                                                   <GHC.Types.IO>_N
                                                   <()>_N)
                                              ((Yesod.Core.Types.HandlerData
                                                  (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                       <Foundation.Balada>_N <GHC.Types.IO>_N)
                                                  (Sub (Yesod.Core.Types.TFCo:R:MonadRouteIO[0])))_R
                                               ->_R (GHC.Types.IO
                                                       ((<()>_R,
                                                         (Yesod.Core.Types.GWData
                                                            (Yesod.Routes.Class.Route
                                                               (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                    <Foundation.Balada>_N
                                                                    <GHC.Types.IO>_N))_R)_R))_R)_R))
                                           (case eta2 of wild1 { Yesod.Core.Types.HandlerData ds ds2 dt ds3 dt1 ->
                                            Yesod.Core.Types.HandlerData
                                              @ Foundation.Balada
                                              @ ()
                                              ds
                                              ds2
                                              dt
                                              (Yesod.Core.Class.Handler.$fMonadHandlerHandlerT2
                                                 @ Foundation.Balada)
                                              dt1 })) -}
                        = \ eta2 :: Yesod.Core.Types.HandlerData
                                      Foundation.Balada
                                      (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                          widget
                            `cast`
                          (Trans
                               (Yesod.Core.Types.NTCo:WidgetT[0]
                                    (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                                    <GHC.Types.IO>_N
                                    <()>_N)
                               ((Yesod.Core.Types.HandlerData
                                   (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                        <Foundation.Balada>_N <GHC.Types.IO>_N)
                                   (Sub (Yesod.Core.Types.TFCo:R:MonadRouteIO[0])))_R
                                ->_R (GHC.Types.IO
                                        ((<()>_R,
                                          (Yesod.Core.Types.GWData
                                             (Yesod.Routes.Class.Route
                                                (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                     <Foundation.Balada>_N
                                                     <GHC.Types.IO>_N))_R)_R))_R)_R))
                            (case eta2 of wild1 { Yesod.Core.Types.HandlerData ds ds2 dt ds3 dt1 ->
                             Yesod.Core.Types.HandlerData
                               @ Foundation.Balada
                               @ ()
                               ds
                               ds2
                               dt
                               (Yesod.Core.Class.Handler.$fMonadHandlerHandlerT2
                                  @ Foundation.Balada)
                               dt1 })
                      } in
                      let {
                        lvl120 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            a39
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            Handlers.getCadpessoaR4
                              `cast`
                            (<()>_R
                             ->_R Trans
                                      (<Yesod.Core.Types.HandlerData
                                          Foundation.Balada
                                          (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                                     ((<()>_R,
                                                       (Yesod.Core.Types.GWData
                                                          (Yesod.Routes.Class.Route
                                                             (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                       <Foundation.Balada>_N
                                                                       <GHC.Types.IO>_N)))_R)_R))_R))
                                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                            eta
                      } in
                      let {
                        lvl121 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            Handlers.getCadcategoriaR12
                              `cast`
                            (Trans
                                 (<Yesod.Core.Types.HandlerData
                                     Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                                  ->_R Sym (GHC.Types.NTCo:IO[0]
                                                ((<()>_R,
                                                  (Yesod.Core.Types.GWData
                                                     (Yesod.Routes.Class.Route
                                                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                  <Foundation.Balada>_N
                                                                  <GHC.Types.IO>_N)))_R)_R))_R))
                                 (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                            lvl120
                              `cast`
                            (<()>_R
                             ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            eta
                      } in
                      let {
                        lvl122 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            Handlers.getCadpessoaR2
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            lvl121
                              `cast`
                            (<()>_R
                             ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            eta
                      } in
                      let {
                        lvl123 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            Handlers.getCadcategoriaR6
                              `cast`
                            (Trans
                                 (<Yesod.Core.Types.HandlerData
                                     Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                                  ->_R Sym (GHC.Types.NTCo:IO[0]
                                                ((<()>_R,
                                                  (Yesod.Core.Types.GWData
                                                     (Yesod.Routes.Class.Route
                                                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                  <Foundation.Balada>_N
                                                                  <GHC.Types.IO>_N)))_R)_R))_R))
                                 (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                            lvl122
                              `cast`
                            (<()>_R
                             ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            eta
                      } in
                      let {
                        lvl124 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            a38
                              `cast`
                            (Trans
                                 (<Yesod.Core.Types.HandlerData
                                     Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                                  ->_R Sym (GHC.Types.NTCo:IO[0]
                                                ((<()>_R,
                                                  (Yesod.Core.Types.GWData
                                                     (Yesod.Routes.Class.Route
                                                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                  <Foundation.Balada>_N
                                                                  <GHC.Types.IO>_N)))_R)_R))_R))
                                 (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                            lvl123
                              `cast`
                            (<()>_R
                             ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            eta
                      } in
                      (\ eta :: Yesod.Core.Types.HandlerData
                                  Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                       Yesod.Core.Types.$wa1
                         @ Foundation.Balada
                         @ GHC.Types.IO
                         GHC.Base.$fMonadIO
                         @ ()
                         @ ()
                         Handlers.getCadcategoriaR2
                           `cast`
                         (Trans
                              (<Yesod.Core.Types.HandlerData
                                  Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                               ->_R Sym (GHC.Types.NTCo:IO[0]
                                             ((<()>_R,
                                               (Yesod.Core.Types.GWData
                                                  (Yesod.Routes.Class.Route
                                                     (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                               <Foundation.Balada>_N
                                                               <GHC.Types.IO>_N)))_R)_R))_R))
                              (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                        <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                         lvl124
                           `cast`
                         (<()>_R
                          ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                        <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                         eta)
                        `cast`
                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))))
                    `cast`
                  (Yesod.Core.Types.NTCo:HandlerT[0]
                       <Foundation.Balada>_N <GHC.Types.IO>_N <Text.Blaze.Html.Html>_N)
                    r)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R)
                   ipv } }) -}
35c45c080dde4d012744069f020ea45d
  getCadpessoaR10 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\n\
                   \<input type=\"submit\" value=\"Enviar\">\n\
                   \<h1> Cadastro Completo</h1>\n"#) -}
fc7a4131eed6842db2fec76a42d32567
  getCadpessoaR11 ::
    Yesod.Core.Types.HandlerT
      Foundation.Balada
      GHC.Types.IO
      (Foundation.Widget, Yesod.Form.Types.Enctype)
  {- Unfolding: (Yesod.Form.Functions.generateFormPost
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   @ Foundation.Pessoas
                   @ Foundation.Widget
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)
                             <Yesod.Form.Types.FormMessage>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formPessoa1
                     `cast`
                   (<Text.Blaze.Internal.MarkupM ()>_R
                    ->_R Sym (Control.Monad.Trans.RWS.Lazy.NTCo:RWST[0]
                                  <(GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                                    Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                                    [Text.Shakespeare.I18N.Lang])>_R
                                  <Yesod.Form.Types.Enctype>_N
                                  <Yesod.Form.Types.Ints>_N
                                  <Foundation.Handler>_R
                                  ((<Yesod.Form.Types.FormResult Foundation.Pessoas>_N,
                                    (Yesod.Core.Types.WidgetT
                                       (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                                 <Foundation.Balada>_N <GHC.Types.IO>_N))
                                       <GHC.Types.IO>_N
                                       <()>_N)_N))_N))) -}
6d5b410724cc95a1559c070041200e6a
  getCadpessoaR2 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ w4 :: Yesod.Core.Types.HandlerData
                           Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ (Yesod.Routes.Class.Route Foundation.Balada
                      -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                      -> Data.Text.Internal.Text)
                   @ ()
                   Handlers.getAboutR12
                     `cast`
                   (Yesod.Core.Types.WidgetT
                      <Foundation.Balada>_N
                      <GHC.Types.IO>_N
                      ((Yesod.Routes.Class.Route
                          (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                               <Foundation.Balada>_N <GHC.Types.IO>_N))_N
                       ->_N <[(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                             -> Data.Text.Internal.Text>_N))_R
                   Handlers.getCadpessoaR3
                   w4) -}
e36e183b58ef1bba0e7f2b734f84b774
  getCadpessoaR3 ::
    (Yesod.Routes.Class.Route Foundation.Balada
     -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
     -> Data.Text.Internal.Text)
    -> Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*C1(C1(U(U,U,U)))>,
     Unfolding: (\ urender :: Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text ->
                 let {
                   a36 :: Data.Text.Internal.Text
                   = urender
                       Foundation.CadpessoaR
                         `cast`
                       (Sub (Sym (Foundation.TFCo:R:RouteBalada[0])))
                       (GHC.Types.[] @ (Data.Text.Internal.Text, Data.Text.Internal.Text))
                 } in
                 let {
                   a37 :: Text.Blaze.Internal.ChoiceString
                   = Text.Blaze.Internal.Text a36
                 } in
                 let {
                   x3 :: Text.Blaze.Html.Html = Text.Blaze.Internal.Content @ () a37
                 } in
                 let {
                   a38 :: Yesod.Core.Types.RY Foundation.Balada
                          -> Text.Blaze.Html.Html
                     {- Arity: 1 -}
                   = \ ds :: Yesod.Core.Types.RY Foundation.Balada -> x3
                 } in
                 let {
                   a39 :: Yesod.Core.Types.GWData
                            (Yesod.Routes.Class.Route Foundation.Balada)
                   = Yesod.Core.Types.GWData
                       @ (Yesod.Routes.Class.Route Foundation.Balada)
                       a38
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Body[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                       (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                         `cast`
                       (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Script
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Script
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Stylesheet
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Stylesheet
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (Data.Map.Base.Tip
                          @ (GHC.Base.Maybe Data.Text.Internal.Text)
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Data.Text.Internal.Builder.Builder))
                       (GHC.Base.Nothing
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Text.Julius.Javascript))
                       (Yesod.Core.Types.$fApplicativeWidgetT2
                          @ (Yesod.Routes.Class.Route Foundation.Balada))
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Head[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                 } in
                 let {
                   lvl119 :: ((),
                              Yesod.Core.Types.GWData
                                (Yesod.Routes.Class.Route
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))))
                   = (GHC.Tuple.(),
                      a39
                        `cast`
                      (Yesod.Core.Types.GWData
                         (Yesod.Routes.Class.Route
                            (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)
                 } in
                 (\ eta :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  (# eta2, lvl119 #))
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     ((<()>_R,
                                       (Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route
                                             (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                       <Foundation.Balada>_N
                                                       <GHC.Types.IO>_N)))_R)_R))_R))
                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))) -}
8f36eaf8e5b2fe1af09485955b03084e
  getCadpessoaR4 ::
    ()
    -> Yesod.Core.Types.HandlerData
         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Yesod.Core.Types.GWData
             (Yesod.Routes.Class.Route
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)))) #)
  {- Arity: 3,
     Unfolding: (\ ds :: ()
                   eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada
                            (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot]
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta2, Handlers.getCadpessoaR5 #)) -}
b9a7e9870bd8904ebef6d2cfec87f176
  getCadpessoaR5 ::
    ((),
     Yesod.Core.Types.GWData
       (Yesod.Routes.Class.Route
          (Yesod.Core.Class.Handler.HandlerSite
             (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))))
  {- Unfolding: ((GHC.Tuple.(),
                  Handlers.getCadpessoaR6
                    `cast`
                  (Yesod.Core.Types.GWData
                     (Yesod.Routes.Class.Route
                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)) -}
dee47c56c6668b8db60b620290385f41
  getCadpessoaR6 ::
    Yesod.Core.Types.GWData
      (Yesod.Routes.Class.Route Foundation.Balada)
  {- Unfolding: (Yesod.Core.Types.GWData
                   @ (Yesod.Routes.Class.Route Foundation.Balada)
                   Handlers.getCadpessoaR7
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:Body[0]
                             <Yesod.Routes.Class.Route Foundation.Balada>_R))
                   (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                     `cast`
                   (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Script
                           (Yesod.Routes.Class.Route Foundation.Balada)])
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                             <Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Stylesheet
                           (Yesod.Routes.Class.Route Foundation.Balada)])
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                             <Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                   (Data.Map.Base.Tip
                      @ (GHC.Base.Maybe Data.Text.Internal.Text)
                      @ ((Yesod.Routes.Class.Route Foundation.Balada
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Data.Text.Internal.Builder.Builder))
                   (GHC.Base.Nothing
                      @ ((Yesod.Routes.Class.Route Foundation.Balada
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Text.Julius.Javascript))
                   (Yesod.Core.Types.$fApplicativeWidgetT2
                      @ (Yesod.Routes.Class.Route Foundation.Balada))
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:Head[0]
                             <Yesod.Routes.Class.Route Foundation.Balada>_R))) -}
2a553b4c421d7eee893101611f2a25d2
  getCadpessoaR7 ::
    Yesod.Core.Types.RY Foundation.Balada -> Text.Blaze.Html.Html
  {- Arity: 1,
     Unfolding: (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                 Handlers.getCadpessoaR_x) -}
153391ad3ed99b5553ea442b5c2088ec
  getCadpessoaR8 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.PreEscaped
                   Handlers.getCadpessoaR9) -}
a579a90013c5cd028f1779d03f784cf4
  getCadpessoaR9 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m3,
     Unfolding: (Text.Blaze.Internal.Text Handlers.getCadpessoaR10) -}
2808c8f498d8bf1310c2fc720bd3d9c3
  getCadpessoaR_x :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.getCadpessoaR8) -}
7cf6b157b5e81500b1b3d8891fb2b47b
  getCadsubcategR :: Foundation.Handler Text.Blaze.Html.Html
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Handlers.getCadsubcategR1
                  `cast`
                (Trans
                     (<Yesod.Core.Types.HandlerData
                         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R))
                     (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                               <Foundation.Balada>_N
                               <GHC.Types.IO>_N
                               <Text.Blaze.Html.Html>_N))) -}
7f67be3a460daca64ecbeaba92afec4b
  getCadsubcategR1 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Text.Blaze.Html.Html #)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ r :: Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (Handlers.getCadsubcategR11
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Foundation.Balada>_N
                            <GHC.Types.IO>_N
                            <(Foundation.Widget, Yesod.Form.Types.Enctype)>_N)
                         r)
                        `cast`
                      (GHC.Types.NTCo:IO[0]
                           <(Foundation.Widget, Yesod.Form.Types.Enctype)>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) widget enctype ->
                 ((Foundation.$fYesodBalada_$cdefaultLayout
                     (let {
                        x3 :: Text.Blaze.Html.Html
                        = case enctype of wild1 {
                            Yesod.Form.Types.UrlEncoded -> Yesod.Form.Types.$fToMarkupEnctype4
                            Yesod.Form.Types.Multipart -> Yesod.Form.Types.$fToMarkupEnctype1 }
                      } in
                      let {
                        a36 :: Yesod.Core.Types.RY Foundation.Balada
                               -> Text.Blaze.Html.Html
                          {- Arity: 1 -}
                        = \ ds :: Yesod.Core.Types.RY Foundation.Balada -> x3
                      } in
                      let {
                        a37 :: Yesod.Core.Types.GWData
                                 (Yesod.Routes.Class.Route Foundation.Balada)
                        = Yesod.Core.Types.GWData
                            @ (Yesod.Routes.Class.Route Foundation.Balada)
                            a36
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:Body[0]
                                      <Yesod.Routes.Class.Route Foundation.Balada>_R))
                            (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                              `cast`
                            (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                            (GHC.Base.id
                               @ [Yesod.Core.Types.Script
                                    (Yesod.Routes.Class.Route Foundation.Balada)])
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                      <Yesod.Core.Types.Script
                                         (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                            (GHC.Base.id
                               @ [Yesod.Core.Types.Stylesheet
                                    (Yesod.Routes.Class.Route Foundation.Balada)])
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                      <Yesod.Core.Types.Stylesheet
                                         (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                            (Data.Map.Base.Tip
                               @ (GHC.Base.Maybe Data.Text.Internal.Text)
                               @ ((Yesod.Routes.Class.Route Foundation.Balada
                                   -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                                   -> Data.Text.Internal.Text)
                                  -> Data.Text.Internal.Builder.Builder))
                            (GHC.Base.Nothing
                               @ ((Yesod.Routes.Class.Route Foundation.Balada
                                   -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                                   -> Data.Text.Internal.Text)
                                  -> Text.Julius.Javascript))
                            (Yesod.Core.Types.$fApplicativeWidgetT2
                               @ (Yesod.Routes.Class.Route Foundation.Balada))
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:Head[0]
                                      <Yesod.Routes.Class.Route Foundation.Balada>_R))
                      } in
                      let {
                        lvl119 :: ((),
                                   Yesod.Core.Types.GWData
                                     (Yesod.Routes.Class.Route
                                        (Yesod.Core.Class.Handler.HandlerSite
                                           (Yesod.Core.Types.WidgetT
                                              Foundation.Balada GHC.Types.IO))))
                        = (GHC.Tuple.(),
                           a37
                             `cast`
                           (Yesod.Core.Types.GWData
                              (Yesod.Routes.Class.Route
                                 (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)
                      } in
                      let {
                        a38 :: Yesod.Core.Types.HandlerData
                                 Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     ((),
                                      Yesod.Core.Types.GWData
                                        (Yesod.Routes.Class.Route
                                           (Yesod.Core.Class.Handler.HandlerSite
                                              (Yesod.Core.Types.WidgetT
                                                 Foundation.Balada GHC.Types.IO)))) #)
                          {- Arity: 2, Strictness: <L,A><L,U>,
                             Unfolding: InlineRule (2, True, False)
                                        (\ eta :: Yesod.Core.Types.HandlerData
                                                    Foundation.Balada
                                                    (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                           eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                         (# eta2,
                                            (GHC.Tuple.(),
                                             (Yesod.Core.Types.GWData
                                                @ (Yesod.Routes.Class.Route Foundation.Balada)
                                                (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                                                 x3)
                                                  `cast`
                                                (Sym (Yesod.Core.Types.NTCo:Body[0]
                                                          <Yesod.Routes.Class.Route
                                                             Foundation.Balada>_R))
                                                (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                                                  `cast`
                                                (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                                                (GHC.Base.id
                                                   @ [Yesod.Core.Types.Script
                                                        (Yesod.Routes.Class.Route
                                                           Foundation.Balada)])
                                                  `cast`
                                                (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                                          <Yesod.Core.Types.Script
                                                             (Yesod.Routes.Class.Route
                                                                Foundation.Balada)>_R))
                                                (GHC.Base.id
                                                   @ [Yesod.Core.Types.Stylesheet
                                                        (Yesod.Routes.Class.Route
                                                           Foundation.Balada)])
                                                  `cast`
                                                (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                                          <Yesod.Core.Types.Stylesheet
                                                             (Yesod.Routes.Class.Route
                                                                Foundation.Balada)>_R))
                                                (Data.Map.Base.Tip
                                                   @ (GHC.Base.Maybe Data.Text.Internal.Text)
                                                   @ ((Yesod.Routes.Class.Route Foundation.Balada
                                                       -> [(Data.Text.Internal.Text,
                                                            Data.Text.Internal.Text)]
                                                       -> Data.Text.Internal.Text)
                                                      -> Data.Text.Internal.Builder.Builder))
                                                (GHC.Base.Nothing
                                                   @ ((Yesod.Routes.Class.Route Foundation.Balada
                                                       -> [(Data.Text.Internal.Text,
                                                            Data.Text.Internal.Text)]
                                                       -> Data.Text.Internal.Text)
                                                      -> Text.Julius.Javascript))
                                                (Yesod.Core.Types.$fApplicativeWidgetT2
                                                   @ (Yesod.Routes.Class.Route Foundation.Balada))
                                                  `cast`
                                                (Sym (Yesod.Core.Types.NTCo:Head[0]
                                                          <Yesod.Routes.Class.Route
                                                             Foundation.Balada>_R)))
                                               `cast`
                                             (Yesod.Core.Types.GWData
                                                (Yesod.Routes.Class.Route
                                                   (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                             <Foundation.Balada>_N
                                                             <GHC.Types.IO>_N)))_R)_R) #)) -}
                        = \ eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                            eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                          (# eta2, lvl119 #)
                      } in
                      let {
                        a39 :: Yesod.Core.Types.HandlerData
                                 Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                               -> GHC.Types.IO
                                    ((),
                                     Yesod.Core.Types.GWData
                                       (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 1, Strictness: <L,1*U(U,U,U,1*H,U)>,
                             Unfolding: InlineRule (1, True, False)
                                        (\ eta2 :: Yesod.Core.Types.HandlerData
                                                     Foundation.Balada
                                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                                         widget
                                           `cast`
                                         (Trans
                                              (Yesod.Core.Types.NTCo:WidgetT[0]
                                                   (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                             <Foundation.Balada>_N
                                                             <GHC.Types.IO>_N))
                                                   <GHC.Types.IO>_N
                                                   <()>_N)
                                              ((Yesod.Core.Types.HandlerData
                                                  (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                       <Foundation.Balada>_N <GHC.Types.IO>_N)
                                                  (Sub (Yesod.Core.Types.TFCo:R:MonadRouteIO[0])))_R
                                               ->_R (GHC.Types.IO
                                                       ((<()>_R,
                                                         (Yesod.Core.Types.GWData
                                                            (Yesod.Routes.Class.Route
                                                               (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                    <Foundation.Balada>_N
                                                                    <GHC.Types.IO>_N))_R)_R))_R)_R))
                                           (case eta2 of wild1 { Yesod.Core.Types.HandlerData ds ds2 dt ds3 dt1 ->
                                            Yesod.Core.Types.HandlerData
                                              @ Foundation.Balada
                                              @ ()
                                              ds
                                              ds2
                                              dt
                                              (Yesod.Core.Class.Handler.$fMonadHandlerHandlerT2
                                                 @ Foundation.Balada)
                                              dt1 })) -}
                        = \ eta2 :: Yesod.Core.Types.HandlerData
                                      Foundation.Balada
                                      (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                          widget
                            `cast`
                          (Trans
                               (Yesod.Core.Types.NTCo:WidgetT[0]
                                    (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                                    <GHC.Types.IO>_N
                                    <()>_N)
                               ((Yesod.Core.Types.HandlerData
                                   (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                        <Foundation.Balada>_N <GHC.Types.IO>_N)
                                   (Sub (Yesod.Core.Types.TFCo:R:MonadRouteIO[0])))_R
                                ->_R (GHC.Types.IO
                                        ((<()>_R,
                                          (Yesod.Core.Types.GWData
                                             (Yesod.Routes.Class.Route
                                                (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                     <Foundation.Balada>_N
                                                     <GHC.Types.IO>_N))_R)_R))_R)_R))
                            (case eta2 of wild1 { Yesod.Core.Types.HandlerData ds ds2 dt ds3 dt1 ->
                             Yesod.Core.Types.HandlerData
                               @ Foundation.Balada
                               @ ()
                               ds
                               ds2
                               dt
                               (Yesod.Core.Class.Handler.$fMonadHandlerHandlerT2
                                  @ Foundation.Balada)
                               dt1 })
                      } in
                      let {
                        lvl120 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            a39
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            Handlers.getCadsubcategR4
                              `cast`
                            (<()>_R
                             ->_R Trans
                                      (<Yesod.Core.Types.HandlerData
                                          Foundation.Balada
                                          (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                                     ((<()>_R,
                                                       (Yesod.Core.Types.GWData
                                                          (Yesod.Routes.Class.Route
                                                             (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                       <Foundation.Balada>_N
                                                                       <GHC.Types.IO>_N)))_R)_R))_R))
                                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                            eta
                      } in
                      let {
                        lvl121 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            Handlers.getCadcategoriaR12
                              `cast`
                            (Trans
                                 (<Yesod.Core.Types.HandlerData
                                     Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                                  ->_R Sym (GHC.Types.NTCo:IO[0]
                                                ((<()>_R,
                                                  (Yesod.Core.Types.GWData
                                                     (Yesod.Routes.Class.Route
                                                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                  <Foundation.Balada>_N
                                                                  <GHC.Types.IO>_N)))_R)_R))_R))
                                 (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                            lvl120
                              `cast`
                            (<()>_R
                             ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            eta
                      } in
                      let {
                        lvl122 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            Handlers.getCadsubcategR2
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            lvl121
                              `cast`
                            (<()>_R
                             ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            eta
                      } in
                      let {
                        lvl123 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            Handlers.getCadcategoriaR6
                              `cast`
                            (Trans
                                 (<Yesod.Core.Types.HandlerData
                                     Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                                  ->_R Sym (GHC.Types.NTCo:IO[0]
                                                ((<()>_R,
                                                  (Yesod.Core.Types.GWData
                                                     (Yesod.Routes.Class.Route
                                                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                  <Foundation.Balada>_N
                                                                  <GHC.Types.IO>_N)))_R)_R))_R))
                                 (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                            lvl122
                              `cast`
                            (<()>_R
                             ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            eta
                      } in
                      let {
                        lvl124 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            a38
                              `cast`
                            (Trans
                                 (<Yesod.Core.Types.HandlerData
                                     Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                                  ->_R Sym (GHC.Types.NTCo:IO[0]
                                                ((<()>_R,
                                                  (Yesod.Core.Types.GWData
                                                     (Yesod.Routes.Class.Route
                                                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                  <Foundation.Balada>_N
                                                                  <GHC.Types.IO>_N)))_R)_R))_R))
                                 (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                            lvl123
                              `cast`
                            (<()>_R
                             ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            eta
                      } in
                      (\ eta :: Yesod.Core.Types.HandlerData
                                  Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                       Yesod.Core.Types.$wa1
                         @ Foundation.Balada
                         @ GHC.Types.IO
                         GHC.Base.$fMonadIO
                         @ ()
                         @ ()
                         Handlers.getCadcategoriaR2
                           `cast`
                         (Trans
                              (<Yesod.Core.Types.HandlerData
                                  Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                               ->_R Sym (GHC.Types.NTCo:IO[0]
                                             ((<()>_R,
                                               (Yesod.Core.Types.GWData
                                                  (Yesod.Routes.Class.Route
                                                     (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                               <Foundation.Balada>_N
                                                               <GHC.Types.IO>_N)))_R)_R))_R))
                              (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                        <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                         lvl124
                           `cast`
                         (<()>_R
                          ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                        <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                         eta)
                        `cast`
                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))))
                    `cast`
                  (Yesod.Core.Types.NTCo:HandlerT[0]
                       <Foundation.Balada>_N <GHC.Types.IO>_N <Text.Blaze.Html.Html>_N)
                    r)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R)
                   ipv } }) -}
5f2739df7f9d78e4ef0e8374e66d65cc
  getCadsubcategR10 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\n\
                   \<input type=\"submit\" value=\"Enviar\">\n\
                   \<h1> Cadastro de subcategoria Completo</h1>\n"#) -}
ea5288a22b71291d9331af98fae72ab4
  getCadsubcategR11 ::
    Yesod.Core.Types.HandlerT
      Foundation.Balada
      GHC.Types.IO
      (Foundation.Widget, Yesod.Form.Types.Enctype)
  {- Unfolding: (Yesod.Form.Functions.generateFormPost
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   @ Foundation.Sub_categ_estab
                   @ Foundation.Widget
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)
                             <Yesod.Form.Types.FormMessage>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formSubcategoria1
                     `cast`
                   (<Text.Blaze.Internal.MarkupM ()>_R
                    ->_R Sym (Control.Monad.Trans.RWS.Lazy.NTCo:RWST[0]
                                  <(GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                                    Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                                    [Text.Shakespeare.I18N.Lang])>_R
                                  <Yesod.Form.Types.Enctype>_N
                                  <Yesod.Form.Types.Ints>_N
                                  <Foundation.Handler>_R
                                  ((<Yesod.Form.Types.FormResult Foundation.Sub_categ_estab>_N,
                                    (Yesod.Core.Types.WidgetT
                                       (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                                 <Foundation.Balada>_N <GHC.Types.IO>_N))
                                       <GHC.Types.IO>_N
                                       <()>_N)_N))_N))) -}
78a7f3da5c8e370dec825a911e85814b
  getCadsubcategR2 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ w4 :: Yesod.Core.Types.HandlerData
                           Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ (Yesod.Routes.Class.Route Foundation.Balada
                      -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                      -> Data.Text.Internal.Text)
                   @ ()
                   Handlers.getAboutR12
                     `cast`
                   (Yesod.Core.Types.WidgetT
                      <Foundation.Balada>_N
                      <GHC.Types.IO>_N
                      ((Yesod.Routes.Class.Route
                          (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                               <Foundation.Balada>_N <GHC.Types.IO>_N))_N
                       ->_N <[(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                             -> Data.Text.Internal.Text>_N))_R
                   Handlers.getCadsubcategR3
                   w4) -}
bba7b418af30865b4b1c29b7493b37c9
  getCadsubcategR3 ::
    (Yesod.Routes.Class.Route Foundation.Balada
     -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
     -> Data.Text.Internal.Text)
    -> Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*C1(C1(U(U,U,U)))>,
     Unfolding: (\ urender :: Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text ->
                 let {
                   a36 :: Data.Text.Internal.Text
                   = urender
                       Foundation.CadsubcategR
                         `cast`
                       (Sub (Sym (Foundation.TFCo:R:RouteBalada[0])))
                       (GHC.Types.[] @ (Data.Text.Internal.Text, Data.Text.Internal.Text))
                 } in
                 let {
                   a37 :: Text.Blaze.Internal.ChoiceString
                   = Text.Blaze.Internal.Text a36
                 } in
                 let {
                   x3 :: Text.Blaze.Html.Html = Text.Blaze.Internal.Content @ () a37
                 } in
                 let {
                   a38 :: Yesod.Core.Types.RY Foundation.Balada
                          -> Text.Blaze.Html.Html
                     {- Arity: 1 -}
                   = \ ds :: Yesod.Core.Types.RY Foundation.Balada -> x3
                 } in
                 let {
                   a39 :: Yesod.Core.Types.GWData
                            (Yesod.Routes.Class.Route Foundation.Balada)
                   = Yesod.Core.Types.GWData
                       @ (Yesod.Routes.Class.Route Foundation.Balada)
                       a38
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Body[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                       (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                         `cast`
                       (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Script
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Script
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Stylesheet
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Stylesheet
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (Data.Map.Base.Tip
                          @ (GHC.Base.Maybe Data.Text.Internal.Text)
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Data.Text.Internal.Builder.Builder))
                       (GHC.Base.Nothing
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Text.Julius.Javascript))
                       (Yesod.Core.Types.$fApplicativeWidgetT2
                          @ (Yesod.Routes.Class.Route Foundation.Balada))
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Head[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                 } in
                 let {
                   lvl119 :: ((),
                              Yesod.Core.Types.GWData
                                (Yesod.Routes.Class.Route
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))))
                   = (GHC.Tuple.(),
                      a39
                        `cast`
                      (Yesod.Core.Types.GWData
                         (Yesod.Routes.Class.Route
                            (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)
                 } in
                 (\ eta :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  (# eta2, lvl119 #))
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     ((<()>_R,
                                       (Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route
                                             (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                       <Foundation.Balada>_N
                                                       <GHC.Types.IO>_N)))_R)_R))_R))
                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))) -}
20ae32398940214bc8b973e22abc903c
  getCadsubcategR4 ::
    ()
    -> Yesod.Core.Types.HandlerData
         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Yesod.Core.Types.GWData
             (Yesod.Routes.Class.Route
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)))) #)
  {- Arity: 3,
     Unfolding: (\ ds :: ()
                   eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada
                            (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot]
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta2, Handlers.getCadsubcategR5 #)) -}
da2d4d0b7d94bdb2ad7a7d3bae00aa1b
  getCadsubcategR5 ::
    ((),
     Yesod.Core.Types.GWData
       (Yesod.Routes.Class.Route
          (Yesod.Core.Class.Handler.HandlerSite
             (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))))
  {- Unfolding: ((GHC.Tuple.(),
                  Handlers.getCadsubcategR6
                    `cast`
                  (Yesod.Core.Types.GWData
                     (Yesod.Routes.Class.Route
                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)) -}
e486117c87567ce24f8590a1e108dbfb
  getCadsubcategR6 ::
    Yesod.Core.Types.GWData
      (Yesod.Routes.Class.Route Foundation.Balada)
  {- Unfolding: (Yesod.Core.Types.GWData
                   @ (Yesod.Routes.Class.Route Foundation.Balada)
                   Handlers.getCadsubcategR7
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:Body[0]
                             <Yesod.Routes.Class.Route Foundation.Balada>_R))
                   (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                     `cast`
                   (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Script
                           (Yesod.Routes.Class.Route Foundation.Balada)])
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                             <Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Stylesheet
                           (Yesod.Routes.Class.Route Foundation.Balada)])
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                             <Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                   (Data.Map.Base.Tip
                      @ (GHC.Base.Maybe Data.Text.Internal.Text)
                      @ ((Yesod.Routes.Class.Route Foundation.Balada
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Data.Text.Internal.Builder.Builder))
                   (GHC.Base.Nothing
                      @ ((Yesod.Routes.Class.Route Foundation.Balada
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Text.Julius.Javascript))
                   (Yesod.Core.Types.$fApplicativeWidgetT2
                      @ (Yesod.Routes.Class.Route Foundation.Balada))
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:Head[0]
                             <Yesod.Routes.Class.Route Foundation.Balada>_R))) -}
595acc52b65045ca165b0c2f1d0aaf34
  getCadsubcategR7 ::
    Yesod.Core.Types.RY Foundation.Balada -> Text.Blaze.Html.Html
  {- Arity: 1,
     Unfolding: (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                 Handlers.getCadsubcategR_x) -}
ff491b2bb953e787bd4c041b234b3571
  getCadsubcategR8 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.PreEscaped
                   Handlers.getCadsubcategR9) -}
10a5b8fb2276c6cc56800c97fd02cba9
  getCadsubcategR9 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m3,
     Unfolding: (Text.Blaze.Internal.Text Handlers.getCadsubcategR10) -}
eaf5469680460e96c7a3508612637ff8
  getCadsubcategR_x :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.getCadsubcategR8) -}
079d00a93dd005f0038166bb6f314fb6
  getErroR :: Foundation.Handler Text.Blaze.Html.Html
  {- Unfolding: (Foundation.$fYesodBalada_$cdefaultLayout
                   Handlers.getErroR1
                     `cast`
                   (Trans
                        (<Yesod.Core.Types.HandlerData
                            Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0]
                                       ((<()>_R,
                                         (Yesod.Core.Types.GWData
                                            (Yesod.Routes.Class.Route
                                               (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                         <Foundation.Balada>_N
                                                         <GHC.Types.IO>_N)))_R)_R))_R))
                        (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))) -}
45d9359feb45c2e094fa27fd356609a6
  getErroR1 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Yesod.Core.Types.GWData
             (Yesod.Routes.Class.Route
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)))) #)
  {- Arity: 2,
     Unfolding: (\ eta2 :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta, Handlers.getErroR2 #)) -}
f8ea2def1efb2f1e868fb636e12fdd2e
  getErroR2 ::
    ((),
     Yesod.Core.Types.GWData
       (Yesod.Routes.Class.Route
          (Yesod.Core.Class.Handler.HandlerSite
             (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))))
  {- Unfolding: ((GHC.Tuple.(),
                  Handlers.getErroR3
                    `cast`
                  (Yesod.Core.Types.GWData
                     (Yesod.Routes.Class.Route
                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)) -}
578fba33d8b8b87a4ff45198fc47ff65
  getErroR3 ::
    Yesod.Core.Types.GWData
      (Yesod.Routes.Class.Route Foundation.Balada)
  {- Unfolding: (Yesod.Core.Types.GWData
                   @ (Yesod.Routes.Class.Route Foundation.Balada)
                   Handlers.getErroR4
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:Body[0]
                             <Yesod.Routes.Class.Route Foundation.Balada>_R))
                   (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                     `cast`
                   (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Script
                           (Yesod.Routes.Class.Route Foundation.Balada)])
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                             <Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Stylesheet
                           (Yesod.Routes.Class.Route Foundation.Balada)])
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                             <Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                   (Data.Map.Base.Tip
                      @ (GHC.Base.Maybe Data.Text.Internal.Text)
                      @ ((Yesod.Routes.Class.Route Foundation.Balada
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Data.Text.Internal.Builder.Builder))
                   (GHC.Base.Nothing
                      @ ((Yesod.Routes.Class.Route Foundation.Balada
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Text.Julius.Javascript))
                   (Yesod.Core.Types.$fApplicativeWidgetT2
                      @ (Yesod.Routes.Class.Route Foundation.Balada))
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:Head[0]
                             <Yesod.Routes.Class.Route Foundation.Balada>_R))) -}
879655e0cdbd6f5d6044f200e1b545c3
  getErroR4 ::
    Yesod.Core.Types.RY Foundation.Balada -> Text.Blaze.Html.Html
  {- Arity: 1,
     Unfolding: (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                 Handlers.getErroR_x) -}
05dcf41ce91cf1975d47a89acf65ede5
  getErroR5 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.PreEscaped
                   Handlers.getErroR6) -}
b97ccf9274ea531d10d76a06911be084
  getErroR6 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.Text Handlers.getErroR7) -}
fbfad99899cc28fe64b4d6ab02349341
  getErroR7 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "<h1> Erro de cadastro</h1>\n"#) -}
9814b330025e65885d1bdaf4a784eab4
  getErroR_x :: Text.Blaze.Html.Html
  {- Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.getErroR5) -}
a5a6c97bc1c184834b94edd97c997a62
  getHomeR :: Foundation.Handler Text.Blaze.Html.Html
  {- Unfolding: (Foundation.$fYesodBalada_$cdefaultLayout
                   Handlers.getHomeR1
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                             <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))) -}
00468bed772a2ac0831eb2a164e238dd
  getHomeR1 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 1,
     Unfolding: (\ eta2 :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ ()
                   @ ()
                   Handlers.getHomeR76
                     `cast`
                   (Trans
                        (<Yesod.Core.Types.HandlerData
                            Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0]
                                       ((<()>_R,
                                         (Yesod.Core.Types.GWData
                                            (Yesod.Routes.Class.Route
                                               (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                         <Foundation.Balada>_N
                                                         <GHC.Types.IO>_N)))_R)_R))_R))
                        (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                   Handlers.getHomeR2
                     `cast`
                   (<()>_R
                    ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                   (case eta2 of wild1 { Yesod.Core.Types.HandlerData ds ds1 dt ds2 dt1 ->
                    (Yesod.Core.Types.HandlerData
                       @ Foundation.Balada
                       @ ()
                       ds
                       ds1
                       dt
                       (Yesod.Core.Class.Handler.$fMonadHandlerHandlerT2
                          @ Foundation.Balada)
                       dt1)
                      `cast`
                    (Yesod.Core.Types.HandlerData
                       <Foundation.Balada>_N
                       (Sub (Sym (Yesod.Core.Types.TFCo:R:MonadRouteIO[0]))))_R })) -}
e8e153a0611ee1fab14bb7253072df11
  getHomeR10 ::
    ()
    -> Yesod.Core.Types.HandlerData
         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 2,
     Unfolding: (\ ds :: ()
                   eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada
                            (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ ()
                   @ ()
                   Handlers.getHomeR50
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                             <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                   Handlers.getHomeR11
                     `cast`
                   (<()>_R
                    ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                   eta) -}
c2ba6156d3948110434cc7c5c5042deb
  getHomeR11 ::
    ()
    -> Yesod.Core.Types.HandlerData
         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 2,
     Unfolding: (\ ds :: ()
                   eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada
                            (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ ()
                   @ ()
                   Handlers.getHomeR46
                     `cast`
                   (Trans
                        (<Yesod.Core.Types.HandlerData
                            Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0]
                                       ((<()>_R,
                                         (Yesod.Core.Types.GWData
                                            (Yesod.Routes.Class.Route
                                               (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                         <Foundation.Balada>_N
                                                         <GHC.Types.IO>_N)))_R)_R))_R))
                        (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                   Handlers.getHomeR12
                     `cast`
                   (<()>_R
                    ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                   eta) -}
a740f5245503b0934fe0ca1b1bc78fa8
  getHomeR12 ::
    ()
    -> Yesod.Core.Types.HandlerData
         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 2,
     Unfolding: (\ ds :: ()
                   eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada
                            (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ ()
                   @ ()
                   Handlers.getHomeR44
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                             <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                   Handlers.getHomeR13
                     `cast`
                   (<()>_R
                    ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                   eta) -}
4159dc4a8ef9d58850be6356332647b7
  getHomeR13 ::
    ()
    -> Yesod.Core.Types.HandlerData
         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 2,
     Unfolding: (\ ds :: ()
                   eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada
                            (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ ()
                   @ ()
                   Handlers.getHomeR40
                     `cast`
                   (Trans
                        (<Yesod.Core.Types.HandlerData
                            Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0]
                                       ((<()>_R,
                                         (Yesod.Core.Types.GWData
                                            (Yesod.Routes.Class.Route
                                               (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                         <Foundation.Balada>_N
                                                         <GHC.Types.IO>_N)))_R)_R))_R))
                        (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                   Handlers.getHomeR14
                     `cast`
                   (<()>_R
                    ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                   eta) -}
945deca0981c540a06f3482552b3f2d2
  getHomeR14 ::
    ()
    -> Yesod.Core.Types.HandlerData
         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 2,
     Unfolding: (\ ds :: ()
                   eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada
                            (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ ()
                   @ ()
                   Handlers.getHomeR38
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                             <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                   Handlers.getHomeR15
                     `cast`
                   (<()>_R
                    ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                   eta) -}
d4a46dff01146c44be1c9cbfd29d37f1
  getHomeR15 ::
    ()
    -> Yesod.Core.Types.HandlerData
         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 2,
     Unfolding: (\ ds :: ()
                   eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada
                            (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ ()
                   @ ()
                   Handlers.getHomeR34
                     `cast`
                   (Trans
                        (<Yesod.Core.Types.HandlerData
                            Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0]
                                       ((<()>_R,
                                         (Yesod.Core.Types.GWData
                                            (Yesod.Routes.Class.Route
                                               (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                         <Foundation.Balada>_N
                                                         <GHC.Types.IO>_N)))_R)_R))_R))
                        (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                   Handlers.getHomeR16
                     `cast`
                   (<()>_R
                    ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                   eta) -}
760fa7c7a81ff081efd0c61ecec34297
  getHomeR16 ::
    ()
    -> Yesod.Core.Types.HandlerData
         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 2,
     Unfolding: (\ ds :: ()
                   eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada
                            (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ ()
                   @ ()
                   Handlers.getHomeR32
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                             <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                   Handlers.getHomeR17
                     `cast`
                   (<()>_R
                    ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                   eta) -}
0bc84a7a012122f707f52f9dbcf3c424
  getHomeR17 ::
    ()
    -> Yesod.Core.Types.HandlerData
         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 2,
     Unfolding: (\ ds :: ()
                   eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada
                            (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ ()
                   @ ()
                   Handlers.getHomeR28
                     `cast`
                   (Trans
                        (<Yesod.Core.Types.HandlerData
                            Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0]
                                       ((<()>_R,
                                         (Yesod.Core.Types.GWData
                                            (Yesod.Routes.Class.Route
                                               (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                         <Foundation.Balada>_N
                                                         <GHC.Types.IO>_N)))_R)_R))_R))
                        (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                   Handlers.getHomeR18
                     `cast`
                   (<()>_R
                    ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                   eta) -}
32358cee52c66fcf66001387f401ab8d
  getHomeR18 ::
    ()
    -> Yesod.Core.Types.HandlerData
         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 2,
     Unfolding: (\ ds :: ()
                   eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada
                            (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ ()
                   @ ()
                   Handlers.getHomeR26
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                             <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                   Handlers.getHomeR19
                     `cast`
                   (<()>_R
                    ->_R Trans
                             (<Yesod.Core.Types.HandlerData
                                 Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                              ->_R Sym (GHC.Types.NTCo:IO[0]
                                            ((<()>_R,
                                              (Yesod.Core.Types.GWData
                                                 (Yesod.Routes.Class.Route
                                                    (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                              <Foundation.Balada>_N
                                                              <GHC.Types.IO>_N)))_R)_R))_R))
                             (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                       <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                   eta) -}
250dca9358dc086ce710497fc3837915
  getHomeR19 ::
    ()
    -> Yesod.Core.Types.HandlerData
         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Yesod.Core.Types.GWData
             (Yesod.Routes.Class.Route
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)))) #)
  {- Arity: 3,
     Unfolding: (\ ds :: ()
                   eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada
                            (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot]
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta2, Handlers.getHomeR20 #)) -}
6ae18b929ec77052bce452de4ac94b5c
  getHomeR2 ::
    ()
    -> Yesod.Core.Types.HandlerData
         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 2,
     Unfolding: (\ ds :: ()
                   eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada
                            (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ ()
                   @ ()
                   Handlers.getHomeR74
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                             <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                   Handlers.getHomeR3
                     `cast`
                   (<()>_R
                    ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                   eta) -}
a9946b39c85e5585aeb7dfeb32b47105
  getHomeR20 ::
    ((),
     Yesod.Core.Types.GWData
       (Yesod.Routes.Class.Route
          (Yesod.Core.Class.Handler.HandlerSite
             (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))))
  {- Unfolding: ((GHC.Tuple.(),
                  Handlers.getHomeR21
                    `cast`
                  (Yesod.Core.Types.GWData
                     (Yesod.Routes.Class.Route
                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)) -}
01657f3f391253eacbeada091f8a42a3
  getHomeR21 ::
    Yesod.Core.Types.GWData
      (Yesod.Routes.Class.Route Foundation.Balada)
  {- Unfolding: (Yesod.Core.Types.GWData
                   @ (Yesod.Routes.Class.Route Foundation.Balada)
                   Handlers.getHomeR22
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:Body[0]
                             <Yesod.Routes.Class.Route Foundation.Balada>_R))
                   (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                     `cast`
                   (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Script
                           (Yesod.Routes.Class.Route Foundation.Balada)])
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                             <Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Stylesheet
                           (Yesod.Routes.Class.Route Foundation.Balada)])
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                             <Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                   (Data.Map.Base.Tip
                      @ (GHC.Base.Maybe Data.Text.Internal.Text)
                      @ ((Yesod.Routes.Class.Route Foundation.Balada
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Data.Text.Internal.Builder.Builder))
                   (GHC.Base.Nothing
                      @ ((Yesod.Routes.Class.Route Foundation.Balada
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Text.Julius.Javascript))
                   (Yesod.Core.Types.$fApplicativeWidgetT2
                      @ (Yesod.Routes.Class.Route Foundation.Balada))
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:Head[0]
                             <Yesod.Routes.Class.Route Foundation.Balada>_R))) -}
3e949bbd260c2ffb56e3fc80e49d2af3
  getHomeR22 ::
    Yesod.Core.Types.RY Foundation.Balada -> Text.Blaze.Html.Html
  {- Arity: 1,
     Unfolding: (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                 Handlers.getHomeR_x) -}
bb88e35e8688a559012a8e9426f1eb28
  getHomeR23 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.PreEscaped
                   Handlers.getHomeR24) -}
4a422abd75789f2e8e345b0c2a9844d2
  getHomeR24 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.Text Handlers.getHomeR25) -}
f6fe61c32f46916108ade099c8cee829
  getHomeR25 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   ">Saiba Mais</li>\n"#) -}
73b711b97be7199b54e1d8bdead629c4
  getHomeR26 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ w4 :: Yesod.Core.Types.HandlerData
                           Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ (Yesod.Routes.Class.Route Foundation.Balada
                      -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                      -> Data.Text.Internal.Text)
                   @ ()
                   Handlers.getAboutR12
                     `cast`
                   (Yesod.Core.Types.WidgetT
                      <Foundation.Balada>_N
                      <GHC.Types.IO>_N
                      ((Yesod.Routes.Class.Route
                          (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                               <Foundation.Balada>_N <GHC.Types.IO>_N))_N
                       ->_N <[(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                             -> Data.Text.Internal.Text>_N))_R
                   Handlers.getHomeR27
                   w4) -}
2a7215857233bb867a263868d473f3d0
  getHomeR27 ::
    (Yesod.Routes.Class.Route Foundation.Balada
     -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
     -> Data.Text.Internal.Text)
    -> Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*C1(C1(U(U,U,U)))>,
     Unfolding: (\ urender :: Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text ->
                 let {
                   a36 :: Data.Text.Internal.Text
                   = urender
                       Foundation.AboutR
                         `cast`
                       (Sub (Sym (Foundation.TFCo:R:RouteBalada[0])))
                       (GHC.Types.[] @ (Data.Text.Internal.Text, Data.Text.Internal.Text))
                 } in
                 let {
                   a37 :: Text.Blaze.Internal.ChoiceString
                   = Text.Blaze.Internal.Text a36
                 } in
                 let {
                   x3 :: Text.Blaze.Html.Html = Text.Blaze.Internal.Content @ () a37
                 } in
                 let {
                   a38 :: Yesod.Core.Types.RY Foundation.Balada
                          -> Text.Blaze.Html.Html
                     {- Arity: 1 -}
                   = \ ds :: Yesod.Core.Types.RY Foundation.Balada -> x3
                 } in
                 let {
                   a39 :: Yesod.Core.Types.GWData
                            (Yesod.Routes.Class.Route Foundation.Balada)
                   = Yesod.Core.Types.GWData
                       @ (Yesod.Routes.Class.Route Foundation.Balada)
                       a38
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Body[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                       (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                         `cast`
                       (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Script
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Script
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Stylesheet
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Stylesheet
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (Data.Map.Base.Tip
                          @ (GHC.Base.Maybe Data.Text.Internal.Text)
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Data.Text.Internal.Builder.Builder))
                       (GHC.Base.Nothing
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Text.Julius.Javascript))
                       (Yesod.Core.Types.$fApplicativeWidgetT2
                          @ (Yesod.Routes.Class.Route Foundation.Balada))
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Head[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                 } in
                 let {
                   lvl119 :: ((),
                              Yesod.Core.Types.GWData
                                (Yesod.Routes.Class.Route
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))))
                   = (GHC.Tuple.(),
                      a39
                        `cast`
                      (Yesod.Core.Types.GWData
                         (Yesod.Routes.Class.Route
                            (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)
                 } in
                 (\ eta :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  (# eta2, lvl119 #))
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     ((<()>_R,
                                       (Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route
                                             (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                       <Foundation.Balada>_N
                                                       <GHC.Types.IO>_N)))_R)_R))_R))
                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))) -}
aef9ca502bbf8f9452ecb4a881cb04fb
  getHomeR28 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Yesod.Core.Types.GWData
             (Yesod.Routes.Class.Route
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)))) #)
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta2 :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta,
                    (GHC.Tuple.(),
                     (Yesod.Core.Types.GWData
                        @ (Yesod.Routes.Class.Route Foundation.Balada)
                        (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                         Handlers.getHomeR_x1)
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Body[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R))
                        (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                          `cast`
                        (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Script
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Stylesheet
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (Data.Map.Base.Tip
                           @ (GHC.Base.Maybe Data.Text.Internal.Text)
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Data.Text.Internal.Builder.Builder))
                        (GHC.Base.Nothing
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Text.Julius.Javascript))
                        (Yesod.Core.Types.$fApplicativeWidgetT2
                           @ (Yesod.Routes.Class.Route Foundation.Balada))
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Head[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R)))
                       `cast`
                     (Yesod.Core.Types.GWData
                        (Yesod.Routes.Class.Route
                           (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                     <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R) #)) -}
79a05df4d64199b1d7db282d08a99dcd
  getHomeR29 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.PreEscaped
                   Handlers.getHomeR30) -}
d51e855190a98dd5afd44f0a11a5b6a5
  getHomeR3 ::
    ()
    -> Yesod.Core.Types.HandlerData
         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 2,
     Unfolding: (\ ds :: ()
                   eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada
                            (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ ()
                   @ ()
                   Handlers.getHomeR70
                     `cast`
                   (Trans
                        (<Yesod.Core.Types.HandlerData
                            Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0]
                                       ((<()>_R,
                                         (Yesod.Core.Types.GWData
                                            (Yesod.Routes.Class.Route
                                               (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                         <Foundation.Balada>_N
                                                         <GHC.Types.IO>_N)))_R)_R))_R))
                        (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                   Handlers.getHomeR4
                     `cast`
                   (<()>_R
                    ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                   eta) -}
54eca5797106d424ff2fdf05aa02b268
  getHomeR30 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.Text Handlers.getHomeR31) -}
a5a83d597e450125e83fd0cde1bfac6f
  getHomeR31 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   ">Cadastro de pre\\195\\167os</li>\n\
                   \<li><a href="#) -}
1269079c690e4663c6998213b1e31f07
  getHomeR32 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ w4 :: Yesod.Core.Types.HandlerData
                           Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ (Yesod.Routes.Class.Route Foundation.Balada
                      -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                      -> Data.Text.Internal.Text)
                   @ ()
                   Handlers.getAboutR12
                     `cast`
                   (Yesod.Core.Types.WidgetT
                      <Foundation.Balada>_N
                      <GHC.Types.IO>_N
                      ((Yesod.Routes.Class.Route
                          (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                               <Foundation.Balada>_N <GHC.Types.IO>_N))_N
                       ->_N <[(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                             -> Data.Text.Internal.Text>_N))_R
                   Handlers.getHomeR33
                   w4) -}
68df89ecd680528d073464de86d1c7f9
  getHomeR33 ::
    (Yesod.Routes.Class.Route Foundation.Balada
     -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
     -> Data.Text.Internal.Text)
    -> Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*C1(C1(U(U,U,U)))>,
     Unfolding: (\ urender :: Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text ->
                 let {
                   a36 :: Data.Text.Internal.Text
                   = urender
                       Foundation.CadfaixaprecoR
                         `cast`
                       (Sub (Sym (Foundation.TFCo:R:RouteBalada[0])))
                       (GHC.Types.[] @ (Data.Text.Internal.Text, Data.Text.Internal.Text))
                 } in
                 let {
                   a37 :: Text.Blaze.Internal.ChoiceString
                   = Text.Blaze.Internal.Text a36
                 } in
                 let {
                   x3 :: Text.Blaze.Html.Html = Text.Blaze.Internal.Content @ () a37
                 } in
                 let {
                   a38 :: Yesod.Core.Types.RY Foundation.Balada
                          -> Text.Blaze.Html.Html
                     {- Arity: 1 -}
                   = \ ds :: Yesod.Core.Types.RY Foundation.Balada -> x3
                 } in
                 let {
                   a39 :: Yesod.Core.Types.GWData
                            (Yesod.Routes.Class.Route Foundation.Balada)
                   = Yesod.Core.Types.GWData
                       @ (Yesod.Routes.Class.Route Foundation.Balada)
                       a38
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Body[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                       (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                         `cast`
                       (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Script
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Script
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Stylesheet
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Stylesheet
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (Data.Map.Base.Tip
                          @ (GHC.Base.Maybe Data.Text.Internal.Text)
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Data.Text.Internal.Builder.Builder))
                       (GHC.Base.Nothing
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Text.Julius.Javascript))
                       (Yesod.Core.Types.$fApplicativeWidgetT2
                          @ (Yesod.Routes.Class.Route Foundation.Balada))
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Head[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                 } in
                 let {
                   lvl119 :: ((),
                              Yesod.Core.Types.GWData
                                (Yesod.Routes.Class.Route
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))))
                   = (GHC.Tuple.(),
                      a39
                        `cast`
                      (Yesod.Core.Types.GWData
                         (Yesod.Routes.Class.Route
                            (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)
                 } in
                 (\ eta :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  (# eta2, lvl119 #))
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     ((<()>_R,
                                       (Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route
                                             (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                       <Foundation.Balada>_N
                                                       <GHC.Types.IO>_N)))_R)_R))_R))
                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))) -}
0460c87c8d3caa23214d48c79b23d663
  getHomeR34 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Yesod.Core.Types.GWData
             (Yesod.Routes.Class.Route
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)))) #)
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta2 :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta,
                    (GHC.Tuple.(),
                     (Yesod.Core.Types.GWData
                        @ (Yesod.Routes.Class.Route Foundation.Balada)
                        (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                         Handlers.getHomeR_x2)
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Body[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R))
                        (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                          `cast`
                        (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Script
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Stylesheet
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (Data.Map.Base.Tip
                           @ (GHC.Base.Maybe Data.Text.Internal.Text)
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Data.Text.Internal.Builder.Builder))
                        (GHC.Base.Nothing
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Text.Julius.Javascript))
                        (Yesod.Core.Types.$fApplicativeWidgetT2
                           @ (Yesod.Routes.Class.Route Foundation.Balada))
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Head[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R)))
                       `cast`
                     (Yesod.Core.Types.GWData
                        (Yesod.Routes.Class.Route
                           (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                     <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R) #)) -}
42d7944f28149c35acc5d69bdbd31235
  getHomeR35 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.PreEscaped
                   Handlers.getHomeR36) -}
31419559c456a77480b9f40c0a3a87e4
  getHomeR36 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.Text Handlers.getHomeR37) -}
e434401942d6e0c31f993a15dab2e137
  getHomeR37 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   ">Cadastro dia</li>\n\
                   \<li><a href="#) -}
e01bc68c486fbd60e4ed80f9df3eb97a
  getHomeR38 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ w4 :: Yesod.Core.Types.HandlerData
                           Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ (Yesod.Routes.Class.Route Foundation.Balada
                      -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                      -> Data.Text.Internal.Text)
                   @ ()
                   Handlers.getAboutR12
                     `cast`
                   (Yesod.Core.Types.WidgetT
                      <Foundation.Balada>_N
                      <GHC.Types.IO>_N
                      ((Yesod.Routes.Class.Route
                          (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                               <Foundation.Balada>_N <GHC.Types.IO>_N))_N
                       ->_N <[(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                             -> Data.Text.Internal.Text>_N))_R
                   Handlers.getHomeR39
                   w4) -}
31752446231111ae6a830875af9d0716
  getHomeR39 ::
    (Yesod.Routes.Class.Route Foundation.Balada
     -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
     -> Data.Text.Internal.Text)
    -> Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*C1(C1(U(U,U,U)))>,
     Unfolding: (\ urender :: Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text ->
                 let {
                   a36 :: Data.Text.Internal.Text
                   = urender
                       Foundation.CaddiaR
                         `cast`
                       (Sub (Sym (Foundation.TFCo:R:RouteBalada[0])))
                       (GHC.Types.[] @ (Data.Text.Internal.Text, Data.Text.Internal.Text))
                 } in
                 let {
                   a37 :: Text.Blaze.Internal.ChoiceString
                   = Text.Blaze.Internal.Text a36
                 } in
                 let {
                   x3 :: Text.Blaze.Html.Html = Text.Blaze.Internal.Content @ () a37
                 } in
                 let {
                   a38 :: Yesod.Core.Types.RY Foundation.Balada
                          -> Text.Blaze.Html.Html
                     {- Arity: 1 -}
                   = \ ds :: Yesod.Core.Types.RY Foundation.Balada -> x3
                 } in
                 let {
                   a39 :: Yesod.Core.Types.GWData
                            (Yesod.Routes.Class.Route Foundation.Balada)
                   = Yesod.Core.Types.GWData
                       @ (Yesod.Routes.Class.Route Foundation.Balada)
                       a38
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Body[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                       (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                         `cast`
                       (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Script
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Script
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Stylesheet
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Stylesheet
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (Data.Map.Base.Tip
                          @ (GHC.Base.Maybe Data.Text.Internal.Text)
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Data.Text.Internal.Builder.Builder))
                       (GHC.Base.Nothing
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Text.Julius.Javascript))
                       (Yesod.Core.Types.$fApplicativeWidgetT2
                          @ (Yesod.Routes.Class.Route Foundation.Balada))
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Head[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                 } in
                 let {
                   lvl119 :: ((),
                              Yesod.Core.Types.GWData
                                (Yesod.Routes.Class.Route
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))))
                   = (GHC.Tuple.(),
                      a39
                        `cast`
                      (Yesod.Core.Types.GWData
                         (Yesod.Routes.Class.Route
                            (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)
                 } in
                 (\ eta :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  (# eta2, lvl119 #))
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     ((<()>_R,
                                       (Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route
                                             (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                       <Foundation.Balada>_N
                                                       <GHC.Types.IO>_N)))_R)_R))_R))
                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))) -}
5969eb377a8e355a01a71ce4df9ff54f
  getHomeR4 ::
    ()
    -> Yesod.Core.Types.HandlerData
         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 2,
     Unfolding: (\ ds :: ()
                   eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada
                            (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ ()
                   @ ()
                   Handlers.getHomeR68
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                             <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                   Handlers.getHomeR5
                     `cast`
                   (<()>_R
                    ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                   eta) -}
671a2668055098c3889b2fdb798d19ac
  getHomeR40 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Yesod.Core.Types.GWData
             (Yesod.Routes.Class.Route
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)))) #)
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta2 :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta,
                    (GHC.Tuple.(),
                     (Yesod.Core.Types.GWData
                        @ (Yesod.Routes.Class.Route Foundation.Balada)
                        (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                         Handlers.getHomeR_x3)
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Body[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R))
                        (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                          `cast`
                        (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Script
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Stylesheet
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (Data.Map.Base.Tip
                           @ (GHC.Base.Maybe Data.Text.Internal.Text)
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Data.Text.Internal.Builder.Builder))
                        (GHC.Base.Nothing
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Text.Julius.Javascript))
                        (Yesod.Core.Types.$fApplicativeWidgetT2
                           @ (Yesod.Routes.Class.Route Foundation.Balada))
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Head[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R)))
                       `cast`
                     (Yesod.Core.Types.GWData
                        (Yesod.Routes.Class.Route
                           (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                     <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R) #)) -}
2e58b17e089b41f8c30e2238795cdf88
  getHomeR41 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.PreEscaped
                   Handlers.getHomeR42) -}
7ff52e24667980ed0ba9888b4bc72f64
  getHomeR42 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.Text Handlers.getHomeR43) -}
8c18a92836be039f5bab2822b152e304
  getHomeR43 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   ">Cadastro SubCategoria</li>\n\
                   \<li><a href="#) -}
937d12b163f89d52a3142d2fb7ad6657
  getHomeR44 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ w4 :: Yesod.Core.Types.HandlerData
                           Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ (Yesod.Routes.Class.Route Foundation.Balada
                      -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                      -> Data.Text.Internal.Text)
                   @ ()
                   Handlers.getAboutR12
                     `cast`
                   (Yesod.Core.Types.WidgetT
                      <Foundation.Balada>_N
                      <GHC.Types.IO>_N
                      ((Yesod.Routes.Class.Route
                          (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                               <Foundation.Balada>_N <GHC.Types.IO>_N))_N
                       ->_N <[(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                             -> Data.Text.Internal.Text>_N))_R
                   Handlers.getHomeR45
                   w4) -}
14c673defc6fcd33f9dcd9f382a89469
  getHomeR45 ::
    (Yesod.Routes.Class.Route Foundation.Balada
     -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
     -> Data.Text.Internal.Text)
    -> Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*C1(C1(U(U,U,U)))>,
     Unfolding: (\ urender :: Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text ->
                 let {
                   a36 :: Data.Text.Internal.Text
                   = urender
                       Foundation.CadsubcategR
                         `cast`
                       (Sub (Sym (Foundation.TFCo:R:RouteBalada[0])))
                       (GHC.Types.[] @ (Data.Text.Internal.Text, Data.Text.Internal.Text))
                 } in
                 let {
                   a37 :: Text.Blaze.Internal.ChoiceString
                   = Text.Blaze.Internal.Text a36
                 } in
                 let {
                   x3 :: Text.Blaze.Html.Html = Text.Blaze.Internal.Content @ () a37
                 } in
                 let {
                   a38 :: Yesod.Core.Types.RY Foundation.Balada
                          -> Text.Blaze.Html.Html
                     {- Arity: 1 -}
                   = \ ds :: Yesod.Core.Types.RY Foundation.Balada -> x3
                 } in
                 let {
                   a39 :: Yesod.Core.Types.GWData
                            (Yesod.Routes.Class.Route Foundation.Balada)
                   = Yesod.Core.Types.GWData
                       @ (Yesod.Routes.Class.Route Foundation.Balada)
                       a38
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Body[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                       (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                         `cast`
                       (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Script
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Script
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Stylesheet
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Stylesheet
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (Data.Map.Base.Tip
                          @ (GHC.Base.Maybe Data.Text.Internal.Text)
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Data.Text.Internal.Builder.Builder))
                       (GHC.Base.Nothing
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Text.Julius.Javascript))
                       (Yesod.Core.Types.$fApplicativeWidgetT2
                          @ (Yesod.Routes.Class.Route Foundation.Balada))
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Head[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                 } in
                 let {
                   lvl119 :: ((),
                              Yesod.Core.Types.GWData
                                (Yesod.Routes.Class.Route
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))))
                   = (GHC.Tuple.(),
                      a39
                        `cast`
                      (Yesod.Core.Types.GWData
                         (Yesod.Routes.Class.Route
                            (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)
                 } in
                 (\ eta :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  (# eta2, lvl119 #))
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     ((<()>_R,
                                       (Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route
                                             (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                       <Foundation.Balada>_N
                                                       <GHC.Types.IO>_N)))_R)_R))_R))
                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))) -}
8365446af5a5d9e95c35a0544bf5aae2
  getHomeR46 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Yesod.Core.Types.GWData
             (Yesod.Routes.Class.Route
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)))) #)
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta2 :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta,
                    (GHC.Tuple.(),
                     (Yesod.Core.Types.GWData
                        @ (Yesod.Routes.Class.Route Foundation.Balada)
                        (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                         Handlers.getHomeR_x4)
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Body[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R))
                        (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                          `cast`
                        (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Script
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Stylesheet
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (Data.Map.Base.Tip
                           @ (GHC.Base.Maybe Data.Text.Internal.Text)
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Data.Text.Internal.Builder.Builder))
                        (GHC.Base.Nothing
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Text.Julius.Javascript))
                        (Yesod.Core.Types.$fApplicativeWidgetT2
                           @ (Yesod.Routes.Class.Route Foundation.Balada))
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Head[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R)))
                       `cast`
                     (Yesod.Core.Types.GWData
                        (Yesod.Routes.Class.Route
                           (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                     <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R) #)) -}
6c9ba348828c8231b731388dca6cf2d6
  getHomeR47 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.PreEscaped
                   Handlers.getHomeR48) -}
b437028a7981830566815f2a5c7b1077
  getHomeR48 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.Text Handlers.getHomeR49) -}
493c16eddb9dcdce1ddda9a23409866b
  getHomeR49 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   ">Cadastro categoria</li>\n\
                   \<li><a href="#) -}
32cb0d6d0d8aee6af7e4a3af8eb3be3d
  getHomeR5 ::
    ()
    -> Yesod.Core.Types.HandlerData
         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 2,
     Unfolding: (\ ds :: ()
                   eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada
                            (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ ()
                   @ ()
                   Handlers.getHomeR64
                     `cast`
                   (Trans
                        (<Yesod.Core.Types.HandlerData
                            Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0]
                                       ((<()>_R,
                                         (Yesod.Core.Types.GWData
                                            (Yesod.Routes.Class.Route
                                               (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                         <Foundation.Balada>_N
                                                         <GHC.Types.IO>_N)))_R)_R))_R))
                        (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                   Handlers.getHomeR6
                     `cast`
                   (<()>_R
                    ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                   eta) -}
c2cbddce43ccd301b0e6fb6f0e286efd
  getHomeR50 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ w4 :: Yesod.Core.Types.HandlerData
                           Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ (Yesod.Routes.Class.Route Foundation.Balada
                      -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                      -> Data.Text.Internal.Text)
                   @ ()
                   Handlers.getAboutR12
                     `cast`
                   (Yesod.Core.Types.WidgetT
                      <Foundation.Balada>_N
                      <GHC.Types.IO>_N
                      ((Yesod.Routes.Class.Route
                          (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                               <Foundation.Balada>_N <GHC.Types.IO>_N))_N
                       ->_N <[(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                             -> Data.Text.Internal.Text>_N))_R
                   Handlers.getHomeR51
                   w4) -}
41a056ff79272e468a9a711e321b651a
  getHomeR51 ::
    (Yesod.Routes.Class.Route Foundation.Balada
     -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
     -> Data.Text.Internal.Text)
    -> Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*C1(C1(U(U,U,U)))>,
     Unfolding: (\ urender :: Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text ->
                 let {
                   a36 :: Data.Text.Internal.Text
                   = urender
                       Foundation.CadcategoriaR
                         `cast`
                       (Sub (Sym (Foundation.TFCo:R:RouteBalada[0])))
                       (GHC.Types.[] @ (Data.Text.Internal.Text, Data.Text.Internal.Text))
                 } in
                 let {
                   a37 :: Text.Blaze.Internal.ChoiceString
                   = Text.Blaze.Internal.Text a36
                 } in
                 let {
                   x3 :: Text.Blaze.Html.Html = Text.Blaze.Internal.Content @ () a37
                 } in
                 let {
                   a38 :: Yesod.Core.Types.RY Foundation.Balada
                          -> Text.Blaze.Html.Html
                     {- Arity: 1 -}
                   = \ ds :: Yesod.Core.Types.RY Foundation.Balada -> x3
                 } in
                 let {
                   a39 :: Yesod.Core.Types.GWData
                            (Yesod.Routes.Class.Route Foundation.Balada)
                   = Yesod.Core.Types.GWData
                       @ (Yesod.Routes.Class.Route Foundation.Balada)
                       a38
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Body[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                       (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                         `cast`
                       (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Script
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Script
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Stylesheet
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Stylesheet
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (Data.Map.Base.Tip
                          @ (GHC.Base.Maybe Data.Text.Internal.Text)
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Data.Text.Internal.Builder.Builder))
                       (GHC.Base.Nothing
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Text.Julius.Javascript))
                       (Yesod.Core.Types.$fApplicativeWidgetT2
                          @ (Yesod.Routes.Class.Route Foundation.Balada))
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Head[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                 } in
                 let {
                   lvl119 :: ((),
                              Yesod.Core.Types.GWData
                                (Yesod.Routes.Class.Route
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))))
                   = (GHC.Tuple.(),
                      a39
                        `cast`
                      (Yesod.Core.Types.GWData
                         (Yesod.Routes.Class.Route
                            (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)
                 } in
                 (\ eta :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  (# eta2, lvl119 #))
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     ((<()>_R,
                                       (Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route
                                             (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                       <Foundation.Balada>_N
                                                       <GHC.Types.IO>_N)))_R)_R))_R))
                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))) -}
da2751af92b57c2b817f017015921ba2
  getHomeR52 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Yesod.Core.Types.GWData
             (Yesod.Routes.Class.Route
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)))) #)
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta2 :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta,
                    (GHC.Tuple.(),
                     (Yesod.Core.Types.GWData
                        @ (Yesod.Routes.Class.Route Foundation.Balada)
                        (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                         Handlers.getHomeR_x5)
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Body[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R))
                        (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                          `cast`
                        (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Script
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Stylesheet
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (Data.Map.Base.Tip
                           @ (GHC.Base.Maybe Data.Text.Internal.Text)
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Data.Text.Internal.Builder.Builder))
                        (GHC.Base.Nothing
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Text.Julius.Javascript))
                        (Yesod.Core.Types.$fApplicativeWidgetT2
                           @ (Yesod.Routes.Class.Route Foundation.Balada))
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Head[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R)))
                       `cast`
                     (Yesod.Core.Types.GWData
                        (Yesod.Routes.Class.Route
                           (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                     <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R) #)) -}
e8ca2045847788480d17453cab934d7d
  getHomeR53 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.PreEscaped
                   Handlers.getHomeR54) -}
4e4444e93dda1ae9c670349fb1fb3a90
  getHomeR54 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.Text Handlers.getHomeR55) -}
a621e555ef803436a2a682757a6ac9ab
  getHomeR55 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   ">Cadastro estabelecimento</li>\n\
                   \<li><a href="#) -}
34982f3c30119b11ba2aa92ef805cee5
  getHomeR56 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ w4 :: Yesod.Core.Types.HandlerData
                           Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ (Yesod.Routes.Class.Route Foundation.Balada
                      -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                      -> Data.Text.Internal.Text)
                   @ ()
                   Handlers.getAboutR12
                     `cast`
                   (Yesod.Core.Types.WidgetT
                      <Foundation.Balada>_N
                      <GHC.Types.IO>_N
                      ((Yesod.Routes.Class.Route
                          (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                               <Foundation.Balada>_N <GHC.Types.IO>_N))_N
                       ->_N <[(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                             -> Data.Text.Internal.Text>_N))_R
                   Handlers.getHomeR57
                   w4) -}
7d2056bb3bf7d722ad3c32c34521462a
  getHomeR57 ::
    (Yesod.Routes.Class.Route Foundation.Balada
     -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
     -> Data.Text.Internal.Text)
    -> Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*C1(C1(U(U,U,U)))>,
     Unfolding: (\ urender :: Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text ->
                 let {
                   a36 :: Data.Text.Internal.Text
                   = urender
                       Foundation.CadestabR
                         `cast`
                       (Sub (Sym (Foundation.TFCo:R:RouteBalada[0])))
                       (GHC.Types.[] @ (Data.Text.Internal.Text, Data.Text.Internal.Text))
                 } in
                 let {
                   a37 :: Text.Blaze.Internal.ChoiceString
                   = Text.Blaze.Internal.Text a36
                 } in
                 let {
                   x3 :: Text.Blaze.Html.Html = Text.Blaze.Internal.Content @ () a37
                 } in
                 let {
                   a38 :: Yesod.Core.Types.RY Foundation.Balada
                          -> Text.Blaze.Html.Html
                     {- Arity: 1 -}
                   = \ ds :: Yesod.Core.Types.RY Foundation.Balada -> x3
                 } in
                 let {
                   a39 :: Yesod.Core.Types.GWData
                            (Yesod.Routes.Class.Route Foundation.Balada)
                   = Yesod.Core.Types.GWData
                       @ (Yesod.Routes.Class.Route Foundation.Balada)
                       a38
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Body[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                       (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                         `cast`
                       (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Script
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Script
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Stylesheet
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Stylesheet
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (Data.Map.Base.Tip
                          @ (GHC.Base.Maybe Data.Text.Internal.Text)
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Data.Text.Internal.Builder.Builder))
                       (GHC.Base.Nothing
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Text.Julius.Javascript))
                       (Yesod.Core.Types.$fApplicativeWidgetT2
                          @ (Yesod.Routes.Class.Route Foundation.Balada))
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Head[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                 } in
                 let {
                   lvl119 :: ((),
                              Yesod.Core.Types.GWData
                                (Yesod.Routes.Class.Route
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))))
                   = (GHC.Tuple.(),
                      a39
                        `cast`
                      (Yesod.Core.Types.GWData
                         (Yesod.Routes.Class.Route
                            (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)
                 } in
                 (\ eta :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  (# eta2, lvl119 #))
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     ((<()>_R,
                                       (Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route
                                             (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                       <Foundation.Balada>_N
                                                       <GHC.Types.IO>_N)))_R)_R))_R))
                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))) -}
a58448827d488202455030d0a5dd87a8
  getHomeR58 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Yesod.Core.Types.GWData
             (Yesod.Routes.Class.Route
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)))) #)
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta2 :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta,
                    (GHC.Tuple.(),
                     (Yesod.Core.Types.GWData
                        @ (Yesod.Routes.Class.Route Foundation.Balada)
                        (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                         Handlers.getHomeR_x6)
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Body[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R))
                        (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                          `cast`
                        (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Script
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Stylesheet
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (Data.Map.Base.Tip
                           @ (GHC.Base.Maybe Data.Text.Internal.Text)
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Data.Text.Internal.Builder.Builder))
                        (GHC.Base.Nothing
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Text.Julius.Javascript))
                        (Yesod.Core.Types.$fApplicativeWidgetT2
                           @ (Yesod.Routes.Class.Route Foundation.Balada))
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Head[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R)))
                       `cast`
                     (Yesod.Core.Types.GWData
                        (Yesod.Routes.Class.Route
                           (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                     <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R) #)) -}
3ed8d4f151a48c733271855f9f04892f
  getHomeR59 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.PreEscaped
                   Handlers.getHomeR60) -}
842c72d32655ebf831e00bcc1d542325
  getHomeR6 ::
    ()
    -> Yesod.Core.Types.HandlerData
         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 2,
     Unfolding: (\ ds :: ()
                   eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada
                            (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ ()
                   @ ()
                   Handlers.getHomeR62
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                             <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                   Handlers.getHomeR7
                     `cast`
                   (<()>_R
                    ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                   eta) -}
9a6d323cbf2eec4e8f640fb89293f535
  getHomeR60 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.Text Handlers.getHomeR61) -}
8b823fabef01493aad140593a0113cf5
  getHomeR61 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   ">CADASTRE-SE</li>\n\
                   \<li><a href="#) -}
0cb8d565e870de03f246da4fb9289e76
  getHomeR62 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ w4 :: Yesod.Core.Types.HandlerData
                           Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ (Yesod.Routes.Class.Route Foundation.Balada
                      -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                      -> Data.Text.Internal.Text)
                   @ ()
                   Handlers.getAboutR12
                     `cast`
                   (Yesod.Core.Types.WidgetT
                      <Foundation.Balada>_N
                      <GHC.Types.IO>_N
                      ((Yesod.Routes.Class.Route
                          (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                               <Foundation.Balada>_N <GHC.Types.IO>_N))_N
                       ->_N <[(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                             -> Data.Text.Internal.Text>_N))_R
                   Handlers.getHomeR63
                   w4) -}
f1b877214b11523b973343fa4a0eafb0
  getHomeR63 ::
    (Yesod.Routes.Class.Route Foundation.Balada
     -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
     -> Data.Text.Internal.Text)
    -> Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*C1(C1(U(U,U,U)))>,
     Unfolding: (\ urender :: Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text ->
                 let {
                   a36 :: Data.Text.Internal.Text
                   = urender
                       Foundation.CadpessoaR
                         `cast`
                       (Sub (Sym (Foundation.TFCo:R:RouteBalada[0])))
                       (GHC.Types.[] @ (Data.Text.Internal.Text, Data.Text.Internal.Text))
                 } in
                 let {
                   a37 :: Text.Blaze.Internal.ChoiceString
                   = Text.Blaze.Internal.Text a36
                 } in
                 let {
                   x3 :: Text.Blaze.Html.Html = Text.Blaze.Internal.Content @ () a37
                 } in
                 let {
                   a38 :: Yesod.Core.Types.RY Foundation.Balada
                          -> Text.Blaze.Html.Html
                     {- Arity: 1 -}
                   = \ ds :: Yesod.Core.Types.RY Foundation.Balada -> x3
                 } in
                 let {
                   a39 :: Yesod.Core.Types.GWData
                            (Yesod.Routes.Class.Route Foundation.Balada)
                   = Yesod.Core.Types.GWData
                       @ (Yesod.Routes.Class.Route Foundation.Balada)
                       a38
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Body[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                       (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                         `cast`
                       (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Script
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Script
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Stylesheet
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Stylesheet
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (Data.Map.Base.Tip
                          @ (GHC.Base.Maybe Data.Text.Internal.Text)
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Data.Text.Internal.Builder.Builder))
                       (GHC.Base.Nothing
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Text.Julius.Javascript))
                       (Yesod.Core.Types.$fApplicativeWidgetT2
                          @ (Yesod.Routes.Class.Route Foundation.Balada))
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Head[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                 } in
                 let {
                   lvl119 :: ((),
                              Yesod.Core.Types.GWData
                                (Yesod.Routes.Class.Route
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))))
                   = (GHC.Tuple.(),
                      a39
                        `cast`
                      (Yesod.Core.Types.GWData
                         (Yesod.Routes.Class.Route
                            (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)
                 } in
                 (\ eta :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  (# eta2, lvl119 #))
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     ((<()>_R,
                                       (Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route
                                             (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                       <Foundation.Balada>_N
                                                       <GHC.Types.IO>_N)))_R)_R))_R))
                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))) -}
83420ce26456e31f0e3ea9c48b85f23f
  getHomeR64 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Yesod.Core.Types.GWData
             (Yesod.Routes.Class.Route
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)))) #)
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta2 :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta,
                    (GHC.Tuple.(),
                     (Yesod.Core.Types.GWData
                        @ (Yesod.Routes.Class.Route Foundation.Balada)
                        (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                         Handlers.getHomeR_x7)
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Body[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R))
                        (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                          `cast`
                        (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Script
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Stylesheet
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (Data.Map.Base.Tip
                           @ (GHC.Base.Maybe Data.Text.Internal.Text)
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Data.Text.Internal.Builder.Builder))
                        (GHC.Base.Nothing
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Text.Julius.Javascript))
                        (Yesod.Core.Types.$fApplicativeWidgetT2
                           @ (Yesod.Routes.Class.Route Foundation.Balada))
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Head[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R)))
                       `cast`
                     (Yesod.Core.Types.GWData
                        (Yesod.Routes.Class.Route
                           (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                     <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R) #)) -}
2ec52d819fe267951191cf9122ccbe7f
  getHomeR65 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.PreEscaped
                   Handlers.getHomeR66) -}
2e25200c03dec4c5e4706ae584763b8b
  getHomeR66 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.Text Handlers.getHomeR67) -}
544ce509c8b014843d07ddd6645a8e47
  getHomeR67 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   ">LOGIN></li>\n\
                   \<li><a href="#) -}
ce72358a78408c560f5eb0683e074e9e
  getHomeR68 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ w4 :: Yesod.Core.Types.HandlerData
                           Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ (Yesod.Routes.Class.Route Foundation.Balada
                      -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                      -> Data.Text.Internal.Text)
                   @ ()
                   Handlers.getAboutR12
                     `cast`
                   (Yesod.Core.Types.WidgetT
                      <Foundation.Balada>_N
                      <GHC.Types.IO>_N
                      ((Yesod.Routes.Class.Route
                          (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                               <Foundation.Balada>_N <GHC.Types.IO>_N))_N
                       ->_N <[(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                             -> Data.Text.Internal.Text>_N))_R
                   Handlers.getHomeR69
                   w4) -}
1e691b720a5a6f94cf1c93b0dab68a93
  getHomeR69 ::
    (Yesod.Routes.Class.Route Foundation.Balada
     -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
     -> Data.Text.Internal.Text)
    -> Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*C1(C1(U(U,U,U)))>,
     Unfolding: (\ urender :: Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text ->
                 let {
                   a36 :: Data.Text.Internal.Text
                   = urender
                       Foundation.LoginR
                         `cast`
                       (Sub (Sym (Foundation.TFCo:R:RouteBalada[0])))
                       (GHC.Types.[] @ (Data.Text.Internal.Text, Data.Text.Internal.Text))
                 } in
                 let {
                   a37 :: Text.Blaze.Internal.ChoiceString
                   = Text.Blaze.Internal.Text a36
                 } in
                 let {
                   x3 :: Text.Blaze.Html.Html = Text.Blaze.Internal.Content @ () a37
                 } in
                 let {
                   a38 :: Yesod.Core.Types.RY Foundation.Balada
                          -> Text.Blaze.Html.Html
                     {- Arity: 1 -}
                   = \ ds :: Yesod.Core.Types.RY Foundation.Balada -> x3
                 } in
                 let {
                   a39 :: Yesod.Core.Types.GWData
                            (Yesod.Routes.Class.Route Foundation.Balada)
                   = Yesod.Core.Types.GWData
                       @ (Yesod.Routes.Class.Route Foundation.Balada)
                       a38
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Body[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                       (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                         `cast`
                       (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Script
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Script
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Stylesheet
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Stylesheet
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (Data.Map.Base.Tip
                          @ (GHC.Base.Maybe Data.Text.Internal.Text)
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Data.Text.Internal.Builder.Builder))
                       (GHC.Base.Nothing
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Text.Julius.Javascript))
                       (Yesod.Core.Types.$fApplicativeWidgetT2
                          @ (Yesod.Routes.Class.Route Foundation.Balada))
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Head[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                 } in
                 let {
                   lvl119 :: ((),
                              Yesod.Core.Types.GWData
                                (Yesod.Routes.Class.Route
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))))
                   = (GHC.Tuple.(),
                      a39
                        `cast`
                      (Yesod.Core.Types.GWData
                         (Yesod.Routes.Class.Route
                            (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)
                 } in
                 (\ eta :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  (# eta2, lvl119 #))
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     ((<()>_R,
                                       (Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route
                                             (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                       <Foundation.Balada>_N
                                                       <GHC.Types.IO>_N)))_R)_R))_R))
                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))) -}
d82a74f5c7c73a4fc0921ede8bb43db8
  getHomeR7 ::
    ()
    -> Yesod.Core.Types.HandlerData
         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 2,
     Unfolding: (\ ds :: ()
                   eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada
                            (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ ()
                   @ ()
                   Handlers.getHomeR58
                     `cast`
                   (Trans
                        (<Yesod.Core.Types.HandlerData
                            Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0]
                                       ((<()>_R,
                                         (Yesod.Core.Types.GWData
                                            (Yesod.Routes.Class.Route
                                               (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                         <Foundation.Balada>_N
                                                         <GHC.Types.IO>_N)))_R)_R))_R))
                        (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                   Handlers.getHomeR8
                     `cast`
                   (<()>_R
                    ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                   eta) -}
ed81d8d696949074443a3c3caed6aff8
  getHomeR70 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Yesod.Core.Types.GWData
             (Yesod.Routes.Class.Route
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)))) #)
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta2 :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta,
                    (GHC.Tuple.(),
                     (Yesod.Core.Types.GWData
                        @ (Yesod.Routes.Class.Route Foundation.Balada)
                        (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                         Handlers.getHomeR_x8)
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Body[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R))
                        (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                          `cast`
                        (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Script
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Stylesheet
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (Data.Map.Base.Tip
                           @ (GHC.Base.Maybe Data.Text.Internal.Text)
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Data.Text.Internal.Builder.Builder))
                        (GHC.Base.Nothing
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Text.Julius.Javascript))
                        (Yesod.Core.Types.$fApplicativeWidgetT2
                           @ (Yesod.Routes.Class.Route Foundation.Balada))
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Head[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R)))
                       `cast`
                     (Yesod.Core.Types.GWData
                        (Yesod.Routes.Class.Route
                           (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                     <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R) #)) -}
46d11c81ed182b6e88b3cdfa396c88d3
  getHomeR71 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.PreEscaped
                   Handlers.getHomeR72) -}
45c34d7927b56e98a89c913b2785d680
  getHomeR72 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.Text Handlers.getHomeR73) -}
3b75b5c9ebc5e5a1440d27485469a8bf
  getHomeR73 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   ">In\\195\\173cio</li>\n\
                   \<li><a href="#) -}
f641b78df086b029cba0b714d865d7f4
  getHomeR74 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ w4 :: Yesod.Core.Types.HandlerData
                           Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ (Yesod.Routes.Class.Route Foundation.Balada
                      -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                      -> Data.Text.Internal.Text)
                   @ ()
                   Handlers.getAboutR12
                     `cast`
                   (Yesod.Core.Types.WidgetT
                      <Foundation.Balada>_N
                      <GHC.Types.IO>_N
                      ((Yesod.Routes.Class.Route
                          (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                               <Foundation.Balada>_N <GHC.Types.IO>_N))_N
                       ->_N <[(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                             -> Data.Text.Internal.Text>_N))_R
                   Handlers.getHomeR75
                   w4) -}
25c31833a54c8417bd87d3684c236334
  getHomeR75 ::
    (Yesod.Routes.Class.Route Foundation.Balada
     -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
     -> Data.Text.Internal.Text)
    -> Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*C1(C1(U(U,U,U)))>,
     Unfolding: (\ urender :: Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text ->
                 let {
                   a36 :: Data.Text.Internal.Text
                   = urender
                       Foundation.HomeR
                         `cast`
                       (Sub (Sym (Foundation.TFCo:R:RouteBalada[0])))
                       (GHC.Types.[] @ (Data.Text.Internal.Text, Data.Text.Internal.Text))
                 } in
                 let {
                   a37 :: Text.Blaze.Internal.ChoiceString
                   = Text.Blaze.Internal.Text a36
                 } in
                 let {
                   x3 :: Text.Blaze.Html.Html = Text.Blaze.Internal.Content @ () a37
                 } in
                 let {
                   a38 :: Yesod.Core.Types.RY Foundation.Balada
                          -> Text.Blaze.Html.Html
                     {- Arity: 1 -}
                   = \ ds :: Yesod.Core.Types.RY Foundation.Balada -> x3
                 } in
                 let {
                   a39 :: Yesod.Core.Types.GWData
                            (Yesod.Routes.Class.Route Foundation.Balada)
                   = Yesod.Core.Types.GWData
                       @ (Yesod.Routes.Class.Route Foundation.Balada)
                       a38
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Body[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                       (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                         `cast`
                       (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Script
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Script
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Stylesheet
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Stylesheet
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (Data.Map.Base.Tip
                          @ (GHC.Base.Maybe Data.Text.Internal.Text)
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Data.Text.Internal.Builder.Builder))
                       (GHC.Base.Nothing
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Text.Julius.Javascript))
                       (Yesod.Core.Types.$fApplicativeWidgetT2
                          @ (Yesod.Routes.Class.Route Foundation.Balada))
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Head[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                 } in
                 let {
                   lvl119 :: ((),
                              Yesod.Core.Types.GWData
                                (Yesod.Routes.Class.Route
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))))
                   = (GHC.Tuple.(),
                      a39
                        `cast`
                      (Yesod.Core.Types.GWData
                         (Yesod.Routes.Class.Route
                            (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)
                 } in
                 (\ eta :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  (# eta2, lvl119 #))
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     ((<()>_R,
                                       (Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route
                                             (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                       <Foundation.Balada>_N
                                                       <GHC.Types.IO>_N)))_R)_R))_R))
                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))) -}
d2ed017fea5690c6ec6de0119efb24a2
  getHomeR76 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Yesod.Core.Types.GWData
             (Yesod.Routes.Class.Route
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)))) #)
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta2 :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta,
                    (GHC.Tuple.(),
                     (Yesod.Core.Types.GWData
                        @ (Yesod.Routes.Class.Route Foundation.Balada)
                        (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                         Handlers.getHomeR_x9)
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Body[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R))
                        (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                          `cast`
                        (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Script
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Stylesheet
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (Data.Map.Base.Tip
                           @ (GHC.Base.Maybe Data.Text.Internal.Text)
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Data.Text.Internal.Builder.Builder))
                        (GHC.Base.Nothing
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Text.Julius.Javascript))
                        (Yesod.Core.Types.$fApplicativeWidgetT2
                           @ (Yesod.Routes.Class.Route Foundation.Balada))
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Head[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R)))
                       `cast`
                     (Yesod.Core.Types.GWData
                        (Yesod.Routes.Class.Route
                           (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                     <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R) #)) -}
be54cec87bdf711152b6ec7b66bcf5ce
  getHomeR77 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.PreEscaped
                   Handlers.getHomeR78) -}
e791b36e2129fdb33a5e7a3124ca0bdb
  getHomeR78 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.Text Handlers.getHomeR79) -}
ce883c6ed13548fdcf6b304f8e3e63c0
  getHomeR79 :: Data.Text.Internal.Text
68cae463f294a6412a9c36df0ba5272e
  getHomeR8 ::
    ()
    -> Yesod.Core.Types.HandlerData
         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 2,
     Unfolding: (\ ds :: ()
                   eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada
                            (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ ()
                   @ ()
                   Handlers.getHomeR56
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                             <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                   Handlers.getHomeR9
                     `cast`
                   (<()>_R
                    ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                   eta) -}
9cc49a4f128f6854d3f165a4b5c8b203
  getHomeR9 ::
    ()
    -> Yesod.Core.Types.HandlerData
         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 2,
     Unfolding: (\ ds :: ()
                   eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada
                            (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ ()
                   @ ()
                   Handlers.getHomeR52
                     `cast`
                   (Trans
                        (<Yesod.Core.Types.HandlerData
                            Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0]
                                       ((<()>_R,
                                         (Yesod.Core.Types.GWData
                                            (Yesod.Routes.Class.Route
                                               (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                         <Foundation.Balada>_N
                                                         <GHC.Types.IO>_N)))_R)_R))_R))
                        (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                   Handlers.getHomeR10
                     `cast`
                   (<()>_R
                    ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                   eta) -}
d83a21ef8fb2755542b819afa47df26f
  getHomeR_x :: Text.Blaze.Html.Html
  {- Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.getHomeR23) -}
61c66f50394c4cd1fe2dfe48536eac19
  getHomeR_x1 :: Text.Blaze.Html.Html
  {- Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.getHomeR29) -}
6c59d5f2c37d2ad8bb4c4db5027031a5
  getHomeR_x2 :: Text.Blaze.Html.Html
  {- Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.getHomeR35) -}
29b9dbe7d60559fd78b7fcb1516a196a
  getHomeR_x3 :: Text.Blaze.Html.Html
  {- Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.getHomeR41) -}
a98d279cd2d95d2ab5a3e1d26739b7bd
  getHomeR_x4 :: Text.Blaze.Html.Html
  {- Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.getHomeR47) -}
8c7995129c021532c54a0513e864050c
  getHomeR_x5 :: Text.Blaze.Html.Html
  {- Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.getHomeR53) -}
ba3fab832f1265818c165ebf1a6afdb5
  getHomeR_x6 :: Text.Blaze.Html.Html
  {- Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.getHomeR59) -}
639fdb25d094974852568dc07a9979da
  getHomeR_x7 :: Text.Blaze.Html.Html
  {- Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.getHomeR65) -}
e6c687f26481f25a42b842872fe91357
  getHomeR_x8 :: Text.Blaze.Html.Html
  {- Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.getHomeR71) -}
f997231f7be4797070a63999c7557256
  getHomeR_x9 :: Text.Blaze.Html.Html
  {- Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.getHomeR77) -}
fe1f3eefce31db27685a4ac3398d3f5b
  getLoginR :: Foundation.Handler Text.Blaze.Html.Html
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Handlers.getLoginR1
                  `cast`
                (Trans
                     (<Yesod.Core.Types.HandlerData
                         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R))
                     (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                               <Foundation.Balada>_N
                               <GHC.Types.IO>_N
                               <Text.Blaze.Html.Html>_N))) -}
80ffe027ef26a62e4ecd490cf8000739
  getLoginR1 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Text.Blaze.Html.Html #)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ r :: Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (Handlers.getLoginR31
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Foundation.Balada>_N
                            <GHC.Types.IO>_N
                            <(Foundation.Widget, Yesod.Form.Types.Enctype)>_N)
                         r)
                        `cast`
                      (GHC.Types.NTCo:IO[0]
                           <(Foundation.Widget, Yesod.Form.Types.Enctype)>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) widget enctype ->
                 ((Foundation.$fYesodBalada_$cdefaultLayout
                     (let {
                        x3 :: Text.Blaze.Html.Html
                        = case enctype of wild1 {
                            Yesod.Form.Types.UrlEncoded -> Yesod.Form.Types.$fToMarkupEnctype4
                            Yesod.Form.Types.Multipart -> Yesod.Form.Types.$fToMarkupEnctype1 }
                      } in
                      let {
                        a36 :: Yesod.Core.Types.RY Foundation.Balada
                               -> Text.Blaze.Html.Html
                          {- Arity: 1 -}
                        = \ ds :: Yesod.Core.Types.RY Foundation.Balada -> x3
                      } in
                      let {
                        a37 :: Yesod.Core.Types.GWData
                                 (Yesod.Routes.Class.Route Foundation.Balada)
                        = Yesod.Core.Types.GWData
                            @ (Yesod.Routes.Class.Route Foundation.Balada)
                            a36
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:Body[0]
                                      <Yesod.Routes.Class.Route Foundation.Balada>_R))
                            (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                              `cast`
                            (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                            (GHC.Base.id
                               @ [Yesod.Core.Types.Script
                                    (Yesod.Routes.Class.Route Foundation.Balada)])
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                      <Yesod.Core.Types.Script
                                         (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                            (GHC.Base.id
                               @ [Yesod.Core.Types.Stylesheet
                                    (Yesod.Routes.Class.Route Foundation.Balada)])
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                      <Yesod.Core.Types.Stylesheet
                                         (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                            (Data.Map.Base.Tip
                               @ (GHC.Base.Maybe Data.Text.Internal.Text)
                               @ ((Yesod.Routes.Class.Route Foundation.Balada
                                   -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                                   -> Data.Text.Internal.Text)
                                  -> Data.Text.Internal.Builder.Builder))
                            (GHC.Base.Nothing
                               @ ((Yesod.Routes.Class.Route Foundation.Balada
                                   -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                                   -> Data.Text.Internal.Text)
                                  -> Text.Julius.Javascript))
                            (Yesod.Core.Types.$fApplicativeWidgetT2
                               @ (Yesod.Routes.Class.Route Foundation.Balada))
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:Head[0]
                                      <Yesod.Routes.Class.Route Foundation.Balada>_R))
                      } in
                      let {
                        lvl119 :: ((),
                                   Yesod.Core.Types.GWData
                                     (Yesod.Routes.Class.Route
                                        (Yesod.Core.Class.Handler.HandlerSite
                                           (Yesod.Core.Types.WidgetT
                                              Foundation.Balada GHC.Types.IO))))
                        = (GHC.Tuple.(),
                           a37
                             `cast`
                           (Yesod.Core.Types.GWData
                              (Yesod.Routes.Class.Route
                                 (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)
                      } in
                      let {
                        a38 :: Yesod.Core.Types.HandlerData
                                 Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     ((),
                                      Yesod.Core.Types.GWData
                                        (Yesod.Routes.Class.Route
                                           (Yesod.Core.Class.Handler.HandlerSite
                                              (Yesod.Core.Types.WidgetT
                                                 Foundation.Balada GHC.Types.IO)))) #)
                          {- Arity: 2, Strictness: <L,A><L,U>,
                             Unfolding: InlineRule (2, True, False)
                                        (\ eta :: Yesod.Core.Types.HandlerData
                                                    Foundation.Balada
                                                    (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                           eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                         (# eta2,
                                            (GHC.Tuple.(),
                                             (Yesod.Core.Types.GWData
                                                @ (Yesod.Routes.Class.Route Foundation.Balada)
                                                (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                                                 x3)
                                                  `cast`
                                                (Sym (Yesod.Core.Types.NTCo:Body[0]
                                                          <Yesod.Routes.Class.Route
                                                             Foundation.Balada>_R))
                                                (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                                                  `cast`
                                                (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                                                (GHC.Base.id
                                                   @ [Yesod.Core.Types.Script
                                                        (Yesod.Routes.Class.Route
                                                           Foundation.Balada)])
                                                  `cast`
                                                (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                                          <Yesod.Core.Types.Script
                                                             (Yesod.Routes.Class.Route
                                                                Foundation.Balada)>_R))
                                                (GHC.Base.id
                                                   @ [Yesod.Core.Types.Stylesheet
                                                        (Yesod.Routes.Class.Route
                                                           Foundation.Balada)])
                                                  `cast`
                                                (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                                          <Yesod.Core.Types.Stylesheet
                                                             (Yesod.Routes.Class.Route
                                                                Foundation.Balada)>_R))
                                                (Data.Map.Base.Tip
                                                   @ (GHC.Base.Maybe Data.Text.Internal.Text)
                                                   @ ((Yesod.Routes.Class.Route Foundation.Balada
                                                       -> [(Data.Text.Internal.Text,
                                                            Data.Text.Internal.Text)]
                                                       -> Data.Text.Internal.Text)
                                                      -> Data.Text.Internal.Builder.Builder))
                                                (GHC.Base.Nothing
                                                   @ ((Yesod.Routes.Class.Route Foundation.Balada
                                                       -> [(Data.Text.Internal.Text,
                                                            Data.Text.Internal.Text)]
                                                       -> Data.Text.Internal.Text)
                                                      -> Text.Julius.Javascript))
                                                (Yesod.Core.Types.$fApplicativeWidgetT2
                                                   @ (Yesod.Routes.Class.Route Foundation.Balada))
                                                  `cast`
                                                (Sym (Yesod.Core.Types.NTCo:Head[0]
                                                          <Yesod.Routes.Class.Route
                                                             Foundation.Balada>_R)))
                                               `cast`
                                             (Yesod.Core.Types.GWData
                                                (Yesod.Routes.Class.Route
                                                   (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                             <Foundation.Balada>_N
                                                             <GHC.Types.IO>_N)))_R)_R) #)) -}
                        = \ eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                            eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                          (# eta2, lvl119 #)
                      } in
                      let {
                        a39 :: Yesod.Core.Types.HandlerData
                                 Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                               -> GHC.Types.IO
                                    ((),
                                     Yesod.Core.Types.GWData
                                       (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 1, Strictness: <L,1*U(U,U,U,1*H,U)>,
                             Unfolding: InlineRule (1, True, False)
                                        (\ eta2 :: Yesod.Core.Types.HandlerData
                                                     Foundation.Balada
                                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                                         widget
                                           `cast`
                                         (Trans
                                              (Yesod.Core.Types.NTCo:WidgetT[0]
                                                   (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                             <Foundation.Balada>_N
                                                             <GHC.Types.IO>_N))
                                                   <GHC.Types.IO>_N
                                                   <()>_N)
                                              ((Yesod.Core.Types.HandlerData
                                                  (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                       <Foundation.Balada>_N <GHC.Types.IO>_N)
                                                  (Sub (Yesod.Core.Types.TFCo:R:MonadRouteIO[0])))_R
                                               ->_R (GHC.Types.IO
                                                       ((<()>_R,
                                                         (Yesod.Core.Types.GWData
                                                            (Yesod.Routes.Class.Route
                                                               (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                    <Foundation.Balada>_N
                                                                    <GHC.Types.IO>_N))_R)_R))_R)_R))
                                           (case eta2 of wild1 { Yesod.Core.Types.HandlerData ds ds2 dt ds3 dt1 ->
                                            Yesod.Core.Types.HandlerData
                                              @ Foundation.Balada
                                              @ ()
                                              ds
                                              ds2
                                              dt
                                              (Yesod.Core.Class.Handler.$fMonadHandlerHandlerT2
                                                 @ Foundation.Balada)
                                              dt1 })) -}
                        = \ eta2 :: Yesod.Core.Types.HandlerData
                                      Foundation.Balada
                                      (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                          widget
                            `cast`
                          (Trans
                               (Yesod.Core.Types.NTCo:WidgetT[0]
                                    (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                              <Foundation.Balada>_N <GHC.Types.IO>_N))
                                    <GHC.Types.IO>_N
                                    <()>_N)
                               ((Yesod.Core.Types.HandlerData
                                   (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                        <Foundation.Balada>_N <GHC.Types.IO>_N)
                                   (Sub (Yesod.Core.Types.TFCo:R:MonadRouteIO[0])))_R
                                ->_R (GHC.Types.IO
                                        ((<()>_R,
                                          (Yesod.Core.Types.GWData
                                             (Yesod.Routes.Class.Route
                                                (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                     <Foundation.Balada>_N
                                                     <GHC.Types.IO>_N))_R)_R))_R)_R))
                            (case eta2 of wild1 { Yesod.Core.Types.HandlerData ds ds2 dt ds3 dt1 ->
                             Yesod.Core.Types.HandlerData
                               @ Foundation.Balada
                               @ ()
                               ds
                               ds2
                               dt
                               (Yesod.Core.Class.Handler.$fMonadHandlerHandlerT2
                                  @ Foundation.Balada)
                               dt1 })
                      } in
                      let {
                        lvl120 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            a39
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            Handlers.getLoginR16
                              `cast`
                            (<()>_R
                             ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            eta
                      } in
                      let {
                        lvl121 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            Handlers.getLoginR12
                              `cast`
                            (Trans
                                 (<Yesod.Core.Types.HandlerData
                                     Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                                  ->_R Sym (GHC.Types.NTCo:IO[0]
                                                ((<()>_R,
                                                  (Yesod.Core.Types.GWData
                                                     (Yesod.Routes.Class.Route
                                                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                  <Foundation.Balada>_N
                                                                  <GHC.Types.IO>_N)))_R)_R))_R))
                                 (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                            lvl120
                              `cast`
                            (<()>_R
                             ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            eta
                      } in
                      let {
                        lvl122 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            Handlers.getLoginR10
                              `cast`
                            (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            lvl121
                              `cast`
                            (<()>_R
                             ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            eta
                      } in
                      let {
                        lvl123 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            Handlers.getLoginR6
                              `cast`
                            (Trans
                                 (<Yesod.Core.Types.HandlerData
                                     Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                                  ->_R Sym (GHC.Types.NTCo:IO[0]
                                                ((<()>_R,
                                                  (Yesod.Core.Types.GWData
                                                     (Yesod.Routes.Class.Route
                                                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                  <Foundation.Balada>_N
                                                                  <GHC.Types.IO>_N)))_R)_R))_R))
                                 (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                            lvl122
                              `cast`
                            (<()>_R
                             ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            eta
                      } in
                      let {
                        lvl124 :: ()
                                  -> Yesod.Core.Types.HandlerData
                                       Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                                  -> GHC.Types.IO
                                       ((),
                                        Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route Foundation.Balada))
                          {- Arity: 2 -}
                        = \ ds :: ()
                            eta :: Yesod.Core.Types.HandlerData
                                     Foundation.Balada
                                     (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                          Yesod.Core.Types.$wa1
                            @ Foundation.Balada
                            @ GHC.Types.IO
                            GHC.Base.$fMonadIO
                            @ ()
                            @ ()
                            a38
                              `cast`
                            (Trans
                                 (<Yesod.Core.Types.HandlerData
                                     Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                                  ->_R Sym (GHC.Types.NTCo:IO[0]
                                                ((<()>_R,
                                                  (Yesod.Core.Types.GWData
                                                     (Yesod.Routes.Class.Route
                                                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                                  <Foundation.Balada>_N
                                                                  <GHC.Types.IO>_N)))_R)_R))_R))
                                 (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                            lvl123
                              `cast`
                            (<()>_R
                             ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                           <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                            eta
                      } in
                      (\ eta :: Yesod.Core.Types.HandlerData
                                  Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                       Yesod.Core.Types.$wa1
                         @ Foundation.Balada
                         @ GHC.Types.IO
                         GHC.Base.$fMonadIO
                         @ ()
                         @ ()
                         Handlers.getLoginR2
                           `cast`
                         (Trans
                              (<Yesod.Core.Types.HandlerData
                                  Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                               ->_R Sym (GHC.Types.NTCo:IO[0]
                                             ((<()>_R,
                                               (Yesod.Core.Types.GWData
                                                  (Yesod.Routes.Class.Route
                                                     (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                               <Foundation.Balada>_N
                                                               <GHC.Types.IO>_N)))_R)_R))_R))
                              (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                        <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                         lvl124
                           `cast`
                         (<()>_R
                          ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                        <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                         eta)
                        `cast`
                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))))
                    `cast`
                  (Yesod.Core.Types.NTCo:HandlerT[0]
                       <Foundation.Balada>_N <GHC.Types.IO>_N <Text.Blaze.Html.Html>_N)
                    r)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R)
                   ipv } }) -}
289aebdd7f23ee22b071366695f829ef
  getLoginR10 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ w4 :: Yesod.Core.Types.HandlerData
                           Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ (Yesod.Routes.Class.Route Foundation.Balada
                      -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                      -> Data.Text.Internal.Text)
                   @ ()
                   Handlers.getAboutR12
                     `cast`
                   (Yesod.Core.Types.WidgetT
                      <Foundation.Balada>_N
                      <GHC.Types.IO>_N
                      ((Yesod.Routes.Class.Route
                          (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                               <Foundation.Balada>_N <GHC.Types.IO>_N))_N
                       ->_N <[(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                             -> Data.Text.Internal.Text>_N))_R
                   Handlers.getLoginR11
                   w4) -}
0fda3e159cb85a44284b92af3cfc7510
  getLoginR11 ::
    (Yesod.Routes.Class.Route Foundation.Balada
     -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
     -> Data.Text.Internal.Text)
    -> Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*C1(C1(U(U,U,U)))>,
     Unfolding: (\ urender :: Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text ->
                 let {
                   a36 :: Data.Text.Internal.Text
                   = urender
                       Foundation.LoginR
                         `cast`
                       (Sub (Sym (Foundation.TFCo:R:RouteBalada[0])))
                       (GHC.Types.[] @ (Data.Text.Internal.Text, Data.Text.Internal.Text))
                 } in
                 let {
                   a37 :: Text.Blaze.Internal.ChoiceString
                   = Text.Blaze.Internal.Text a36
                 } in
                 let {
                   x3 :: Text.Blaze.Html.Html = Text.Blaze.Internal.Content @ () a37
                 } in
                 let {
                   a38 :: Yesod.Core.Types.RY Foundation.Balada
                          -> Text.Blaze.Html.Html
                     {- Arity: 1 -}
                   = \ ds :: Yesod.Core.Types.RY Foundation.Balada -> x3
                 } in
                 let {
                   a39 :: Yesod.Core.Types.GWData
                            (Yesod.Routes.Class.Route Foundation.Balada)
                   = Yesod.Core.Types.GWData
                       @ (Yesod.Routes.Class.Route Foundation.Balada)
                       a38
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Body[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                       (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                         `cast`
                       (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Script
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Script
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Stylesheet
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Stylesheet
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (Data.Map.Base.Tip
                          @ (GHC.Base.Maybe Data.Text.Internal.Text)
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Data.Text.Internal.Builder.Builder))
                       (GHC.Base.Nothing
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Text.Julius.Javascript))
                       (Yesod.Core.Types.$fApplicativeWidgetT2
                          @ (Yesod.Routes.Class.Route Foundation.Balada))
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Head[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                 } in
                 let {
                   lvl119 :: ((),
                              Yesod.Core.Types.GWData
                                (Yesod.Routes.Class.Route
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))))
                   = (GHC.Tuple.(),
                      a39
                        `cast`
                      (Yesod.Core.Types.GWData
                         (Yesod.Routes.Class.Route
                            (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)
                 } in
                 (\ eta :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  (# eta2, lvl119 #))
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     ((<()>_R,
                                       (Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route
                                             (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                       <Foundation.Balada>_N
                                                       <GHC.Types.IO>_N)))_R)_R))_R))
                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))) -}
8530aec0318d8da8d86bbdd7ede92991
  getLoginR12 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Yesod.Core.Types.GWData
             (Yesod.Routes.Class.Route
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)))) #)
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta2 :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta,
                    (GHC.Tuple.(),
                     (Yesod.Core.Types.GWData
                        @ (Yesod.Routes.Class.Route Foundation.Balada)
                        (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                         Handlers.getLoginR_x2)
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Body[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R))
                        (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                          `cast`
                        (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Script
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Stylesheet
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (Data.Map.Base.Tip
                           @ (GHC.Base.Maybe Data.Text.Internal.Text)
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Data.Text.Internal.Builder.Builder))
                        (GHC.Base.Nothing
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Text.Julius.Javascript))
                        (Yesod.Core.Types.$fApplicativeWidgetT2
                           @ (Yesod.Routes.Class.Route Foundation.Balada))
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Head[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R)))
                       `cast`
                     (Yesod.Core.Types.GWData
                        (Yesod.Routes.Class.Route
                           (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                     <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R) #)) -}
b46ae1434e2cb827e8fb322c6076ef3b
  getLoginR13 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.PreEscaped Handlers.getLoginR14) -}
dbe3066a5dd82535cf3b503b0732acbc
  getLoginR14 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m3,
     Unfolding: (Text.Blaze.Internal.Text Handlers.getLoginR15) -}
20ea2df7e90752f156810177b66cbc76
  getLoginR15 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "\">"#) -}
d35d9d7724836e2683290ade15b3145e
  getLoginR16 ::
    ()
    -> Yesod.Core.Types.HandlerData
         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 2,
     Unfolding: (\ ds :: ()
                   eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada
                            (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ ()
                   @ ()
                   Handlers.getLoginR27
                     `cast`
                   (Trans
                        (<Yesod.Core.Types.HandlerData
                            Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0]
                                       ((<()>_R,
                                         (Yesod.Core.Types.GWData
                                            (Yesod.Routes.Class.Route
                                               (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                         <Foundation.Balada>_N
                                                         <GHC.Types.IO>_N)))_R)_R))_R))
                        (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                   Handlers.getLoginR17
                     `cast`
                   (<()>_R
                    ->_R Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                   eta) -}
fe931a9b3facc18cb4fc4edaa1ed5bfd
  getLoginR17 ::
    ()
    -> Yesod.Core.Types.HandlerData
         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 2,
     Unfolding: (\ ds :: ()
                   eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada
                            (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot] ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ ()
                   @ ()
                   Handlers.getLoginR25
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                             <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N))
                   Handlers.getLoginR18
                     `cast`
                   (<()>_R
                    ->_R Trans
                             (<Yesod.Core.Types.HandlerData
                                 Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                              ->_R Sym (GHC.Types.NTCo:IO[0]
                                            ((<()>_R,
                                              (Yesod.Core.Types.GWData
                                                 (Yesod.Routes.Class.Route
                                                    (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                              <Foundation.Balada>_N
                                                              <GHC.Types.IO>_N)))_R)_R))_R))
                             (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                       <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))
                   eta) -}
1e3761cf97205dbaa86d4d4e071b00bc
  getLoginR18 ::
    ()
    -> Yesod.Core.Types.HandlerData
         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Yesod.Core.Types.GWData
             (Yesod.Routes.Class.Route
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)))) #)
  {- Arity: 3,
     Unfolding: (\ ds :: ()
                   eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada
                            (Yesod.Core.Types.MonadRoute GHC.Types.IO)[OneShot]
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta2, Handlers.getLoginR19 #)) -}
c4d2d2449c550662a71bec2e612f6c47
  getLoginR19 ::
    ((),
     Yesod.Core.Types.GWData
       (Yesod.Routes.Class.Route
          (Yesod.Core.Class.Handler.HandlerSite
             (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))))
  {- Unfolding: ((GHC.Tuple.(),
                  Handlers.getLoginR20
                    `cast`
                  (Yesod.Core.Types.GWData
                     (Yesod.Routes.Class.Route
                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)) -}
2f1685232cae949a15a822d760f9e2a6
  getLoginR2 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Yesod.Core.Types.GWData
             (Yesod.Routes.Class.Route
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)))) #)
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta2 :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta,
                    (GHC.Tuple.(),
                     (Yesod.Core.Types.GWData
                        @ (Yesod.Routes.Class.Route Foundation.Balada)
                        (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                         Handlers.getLoginR_x)
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Body[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R))
                        (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                          `cast`
                        (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Script
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Stylesheet
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (Data.Map.Base.Tip
                           @ (GHC.Base.Maybe Data.Text.Internal.Text)
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Data.Text.Internal.Builder.Builder))
                        (GHC.Base.Nothing
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Text.Julius.Javascript))
                        (Yesod.Core.Types.$fApplicativeWidgetT2
                           @ (Yesod.Routes.Class.Route Foundation.Balada))
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Head[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R)))
                       `cast`
                     (Yesod.Core.Types.GWData
                        (Yesod.Routes.Class.Route
                           (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                     <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R) #)) -}
eb9398200c7d7298ad67de3ec1fb53a0
  getLoginR20 ::
    Yesod.Core.Types.GWData
      (Yesod.Routes.Class.Route Foundation.Balada)
  {- Unfolding: (Yesod.Core.Types.GWData
                   @ (Yesod.Routes.Class.Route Foundation.Balada)
                   Handlers.getLoginR21
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:Body[0]
                             <Yesod.Routes.Class.Route Foundation.Balada>_R))
                   (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                     `cast`
                   (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Script
                           (Yesod.Routes.Class.Route Foundation.Balada)])
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                             <Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Stylesheet
                           (Yesod.Routes.Class.Route Foundation.Balada)])
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                             <Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                   (Data.Map.Base.Tip
                      @ (GHC.Base.Maybe Data.Text.Internal.Text)
                      @ ((Yesod.Routes.Class.Route Foundation.Balada
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Data.Text.Internal.Builder.Builder))
                   (GHC.Base.Nothing
                      @ ((Yesod.Routes.Class.Route Foundation.Balada
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Text.Julius.Javascript))
                   (Yesod.Core.Types.$fApplicativeWidgetT2
                      @ (Yesod.Routes.Class.Route Foundation.Balada))
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:Head[0]
                             <Yesod.Routes.Class.Route Foundation.Balada>_R))) -}
44e562f12363d01a975e8e2a7fc62204
  getLoginR21 ::
    Yesod.Core.Types.RY Foundation.Balada -> Text.Blaze.Html.Html
  {- Arity: 1,
     Unfolding: (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                 Handlers.getLoginR_x3) -}
f9da9c6d864cf5aeca52b851fa25a1af
  getLoginR22 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.PreEscaped Handlers.getLoginR23) -}
79ccd14f7a842814d28512894e4051de
  getLoginR23 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m3,
     Unfolding: (Text.Blaze.Internal.Text Handlers.getLoginR24) -}
bfeb01d456e7f9a6cf6af13c11a8b28b
  getLoginR24 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\">Pagina Inicial</a>\n\
                   \</form>\n"#) -}
d012e0d1811d1db6d355795a64aed771
  getLoginR25 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Types.IO
         ((),
          Yesod.Core.Types.GWData
            (Yesod.Routes.Class.Route Foundation.Balada))
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ w4 :: Yesod.Core.Types.HandlerData
                           Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                 Yesod.Core.Types.$wa1
                   @ Foundation.Balada
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ (Yesod.Routes.Class.Route Foundation.Balada
                      -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                      -> Data.Text.Internal.Text)
                   @ ()
                   Handlers.getAboutR12
                     `cast`
                   (Yesod.Core.Types.WidgetT
                      <Foundation.Balada>_N
                      <GHC.Types.IO>_N
                      ((Yesod.Routes.Class.Route
                          (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                               <Foundation.Balada>_N <GHC.Types.IO>_N))_N
                       ->_N <[(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                             -> Data.Text.Internal.Text>_N))_R
                   Handlers.getLoginR26
                   w4) -}
a50c8b58cdc4dfe7939841e4760bf5bf
  getLoginR26 ::
    (Yesod.Routes.Class.Route Foundation.Balada
     -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
     -> Data.Text.Internal.Text)
    -> Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*C1(C1(U(U,U,U)))>,
     Unfolding: (\ urender :: Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text ->
                 let {
                   a36 :: Data.Text.Internal.Text
                   = urender
                       Foundation.HomeR
                         `cast`
                       (Sub (Sym (Foundation.TFCo:R:RouteBalada[0])))
                       (GHC.Types.[] @ (Data.Text.Internal.Text, Data.Text.Internal.Text))
                 } in
                 let {
                   a37 :: Text.Blaze.Internal.ChoiceString
                   = Text.Blaze.Internal.Text a36
                 } in
                 let {
                   x3 :: Text.Blaze.Html.Html = Text.Blaze.Internal.Content @ () a37
                 } in
                 let {
                   a38 :: Yesod.Core.Types.RY Foundation.Balada
                          -> Text.Blaze.Html.Html
                     {- Arity: 1 -}
                   = \ ds :: Yesod.Core.Types.RY Foundation.Balada -> x3
                 } in
                 let {
                   a39 :: Yesod.Core.Types.GWData
                            (Yesod.Routes.Class.Route Foundation.Balada)
                   = Yesod.Core.Types.GWData
                       @ (Yesod.Routes.Class.Route Foundation.Balada)
                       a38
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Body[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                       (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                         `cast`
                       (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Script
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Script
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (GHC.Base.id
                          @ [Yesod.Core.Types.Stylesheet
                               (Yesod.Routes.Class.Route Foundation.Balada)])
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                 <Yesod.Core.Types.Stylesheet
                                    (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                       (Data.Map.Base.Tip
                          @ (GHC.Base.Maybe Data.Text.Internal.Text)
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Data.Text.Internal.Builder.Builder))
                       (GHC.Base.Nothing
                          @ ((Yesod.Routes.Class.Route Foundation.Balada
                              -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                              -> Data.Text.Internal.Text)
                             -> Text.Julius.Javascript))
                       (Yesod.Core.Types.$fApplicativeWidgetT2
                          @ (Yesod.Routes.Class.Route Foundation.Balada))
                         `cast`
                       (Sym (Yesod.Core.Types.NTCo:Head[0]
                                 <Yesod.Routes.Class.Route Foundation.Balada>_R))
                 } in
                 let {
                   lvl119 :: ((),
                              Yesod.Core.Types.GWData
                                (Yesod.Routes.Class.Route
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))))
                   = (GHC.Tuple.(),
                      a39
                        `cast`
                      (Yesod.Core.Types.GWData
                         (Yesod.Routes.Class.Route
                            (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)
                 } in
                 (\ eta :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  (# eta2, lvl119 #))
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     ((<()>_R,
                                       (Yesod.Core.Types.GWData
                                          (Yesod.Routes.Class.Route
                                             (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                       <Foundation.Balada>_N
                                                       <GHC.Types.IO>_N)))_R)_R))_R))
                      (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))) -}
ace737d0a94b659810f5123278a341fb
  getLoginR27 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Yesod.Core.Types.GWData
             (Yesod.Routes.Class.Route
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)))) #)
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta2 :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta,
                    (GHC.Tuple.(),
                     (Yesod.Core.Types.GWData
                        @ (Yesod.Routes.Class.Route Foundation.Balada)
                        (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                         Handlers.getLoginR_x4)
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Body[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R))
                        (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                          `cast`
                        (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Script
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Stylesheet
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (Data.Map.Base.Tip
                           @ (GHC.Base.Maybe Data.Text.Internal.Text)
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Data.Text.Internal.Builder.Builder))
                        (GHC.Base.Nothing
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Text.Julius.Javascript))
                        (Yesod.Core.Types.$fApplicativeWidgetT2
                           @ (Yesod.Routes.Class.Route Foundation.Balada))
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Head[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R)))
                       `cast`
                     (Yesod.Core.Types.GWData
                        (Yesod.Routes.Class.Route
                           (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                     <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R) #)) -}
f59caff2dbfb64155d2d00ee69179890
  getLoginR28 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.PreEscaped Handlers.getLoginR29) -}
2d11363c8777d7bd4f07d8dc53375f9b
  getLoginR29 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m3,
     Unfolding: (Text.Blaze.Internal.Text Handlers.getLoginR30) -}
c05d1747559d3b9b99ad47ccb84ada9b
  getLoginR3 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.PreEscaped Handlers.getLoginR4) -}
cfb77ece03531fb68be8c7d399b56a70
  getLoginR30 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\n\
                   \<input type=\"submit\" value=\"Login\">\n\
                   \<a href=\""#) -}
285cbcf1a0adddf9c512774452f94ffd
  getLoginR31 ::
    Yesod.Core.Types.HandlerT
      Foundation.Balada
      GHC.Types.IO
      (Foundation.Widget, Yesod.Form.Types.Enctype)
  {- Unfolding: (Yesod.Form.Functions.generateFormPost
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   @ (Data.Text.Internal.Text, Data.Text.Internal.Text)
                   @ Foundation.Widget
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)
                             <Yesod.Form.Types.FormMessage>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formLogin1
                     `cast`
                   (<Text.Blaze.Internal.MarkupM ()>_R
                    ->_R Sym (Control.Monad.Trans.RWS.Lazy.NTCo:RWST[0]
                                  <(GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                                    Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                                    [Text.Shakespeare.I18N.Lang])>_R
                                  <Yesod.Form.Types.Enctype>_N
                                  <Yesod.Form.Types.Ints>_N
                                  <Foundation.Handler>_R
                                  ((<Yesod.Form.Types.FormResult
                                       (Data.Text.Internal.Text, Data.Text.Internal.Text)>_N,
                                    (Yesod.Core.Types.WidgetT
                                       (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                                 <Foundation.Balada>_N <GHC.Types.IO>_N))
                                       <GHC.Types.IO>_N
                                       <()>_N)_N))_N))) -}
fa4236829d1d4a9e8c7c5adb20f15662
  getLoginR4 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m3,
     Unfolding: (Text.Blaze.Internal.Text Handlers.getLoginR5) -}
03ef479e73b80250c3ee98e34f3ec708
  getLoginR5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "<form method=\"post\" enctype=\""#) -}
b7ec3e7a3420580de234cb00298334d8
  getLoginR6 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Yesod.Core.Types.GWData
             (Yesod.Routes.Class.Route
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)))) #)
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta2 :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta,
                    (GHC.Tuple.(),
                     (Yesod.Core.Types.GWData
                        @ (Yesod.Routes.Class.Route Foundation.Balada)
                        (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                         Handlers.getLoginR_x1)
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Body[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R))
                        (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                          `cast`
                        (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Script
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (GHC.Base.id
                           @ [Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.Balada)])
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                                  <Yesod.Core.Types.Stylesheet
                                     (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                        (Data.Map.Base.Tip
                           @ (GHC.Base.Maybe Data.Text.Internal.Text)
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Data.Text.Internal.Builder.Builder))
                        (GHC.Base.Nothing
                           @ ((Yesod.Routes.Class.Route Foundation.Balada
                               -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                               -> Data.Text.Internal.Text)
                              -> Text.Julius.Javascript))
                        (Yesod.Core.Types.$fApplicativeWidgetT2
                           @ (Yesod.Routes.Class.Route Foundation.Balada))
                          `cast`
                        (Sym (Yesod.Core.Types.NTCo:Head[0]
                                  <Yesod.Routes.Class.Route Foundation.Balada>_R)))
                       `cast`
                     (Yesod.Core.Types.GWData
                        (Yesod.Routes.Class.Route
                           (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                     <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R) #)) -}
38c7aa189fa96af8e1ab7fab7f6cb3e7
  getLoginR7 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.PreEscaped Handlers.getLoginR8) -}
20cb5226ccfa4fe56a373e13da0c3007
  getLoginR8 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m3,
     Unfolding: (Text.Blaze.Internal.Text Handlers.getLoginR9) -}
3a1ec683839abe87d8c5bcfb49525be7
  getLoginR9 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "\" action=\""#) -}
c95ebd369f06784e385b3e11d6f0eb3b
  getLoginR_x :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.getLoginR3) -}
6387c23e930e659578a54bc6956cca62
  getLoginR_x1 :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.getLoginR7) -}
996973e97288c8c44e7823f8d3476aed
  getLoginR_x2 :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.getLoginR13) -}
46bb286b102d22556d1e821e3a1d46d0
  getLoginR_x3 :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.getLoginR22) -}
1778cedb942d88bece181229abf3ac67
  getLoginR_x4 :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.getLoginR28) -}
6fbf73a52fd8c4037187d5c8d7cf299e
  getLogoutR :: Foundation.Handler Text.Blaze.Html.Html
  {- Arity: 2, Strictness: <S(SSLSL),1*U(U,U,U,U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Handlers.getLogoutR1
                  `cast`
                (Trans
                     (<Yesod.Core.Types.HandlerData
                         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R))
                     (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                               <Foundation.Balada>_N
                               <GHC.Types.IO>_N
                               <Text.Blaze.Html.Html>_N))) -}
e862c34298932313212ebbab22b67ad8
  getLogoutR1 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Text.Blaze.Html.Html #)
  {- Arity: 2, Strictness: <S(SSLSL),1*U(U,U,U,U,U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Yesod.Core.Types.HandlerData
                            Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case eta
                        `cast`
                      (Yesod.Core.Types.HandlerData
                         (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                   <Foundation.Balada>_N <GHC.Types.IO>_N))
                         (Sub (Yesod.Core.Types.TFCo:R:MonadRouteIO[0])))_R of wild { Yesod.Core.Types.HandlerData ds1 ds2 dt ds3 dt1 ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ Yesod.Core.Types.GHState
                        dt
                        eta2 of ds4 { (#,#) ipv ipv1 ->
                 case GHC.Prim.writeMutVar#
                        @ GHC.Prim.RealWorld
                        @ Yesod.Core.Types.GHState
                        dt
                        (Yesod.Core.Handler.deleteSession1 Handlers.getLogoutR9 ipv1)
                        ipv of s2# { DEFAULT ->
                 (Handlers.getLogoutR_k
                    `cast`
                  (Yesod.Core.Types.NTCo:HandlerT[0]
                       <Foundation.Balada>_N <GHC.Types.IO>_N <Text.Blaze.Html.Html>_N)
                    wild
                      `cast`
                    (Yesod.Core.Types.HandlerData
                       (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                            <Foundation.Balada>_N <GHC.Types.IO>_N)
                       (Sub (Sym (Yesod.Core.Types.TFCo:R:MonadRouteIO[0]))))_R)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R)
                   s2# } } }) -}
26ae1e2bb30e15abe6ccd9fc0efe470b
  getLogoutR2 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Yesod.Core.Types.GWData
             (Yesod.Routes.Class.Route
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO)))) #)
  {- Arity: 2,
     Unfolding: (\ eta2 :: Yesod.Core.Types.HandlerData
                             Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta, Handlers.getLogoutR3 #)) -}
fd4e6f0da7c41da67fdb88078ccffa76
  getLogoutR3 ::
    ((),
     Yesod.Core.Types.GWData
       (Yesod.Routes.Class.Route
          (Yesod.Core.Class.Handler.HandlerSite
             (Yesod.Core.Types.WidgetT Foundation.Balada GHC.Types.IO))))
  {- Unfolding: ((GHC.Tuple.(),
                  Handlers.getLogoutR4
                    `cast`
                  (Yesod.Core.Types.GWData
                     (Yesod.Routes.Class.Route
                        (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)))_R)_R)) -}
5183b59e278af544644d131e109ae0d7
  getLogoutR4 ::
    Yesod.Core.Types.GWData
      (Yesod.Routes.Class.Route Foundation.Balada)
  {- Unfolding: (Yesod.Core.Types.GWData
                   @ (Yesod.Routes.Class.Route Foundation.Balada)
                   Handlers.getLogoutR5
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:Body[0]
                             <Yesod.Routes.Class.Route Foundation.Balada>_R))
                   (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                     `cast`
                   (Sym (Data.Monoid.NTCo:Last[0]) <Yesod.Core.Types.Title>_N)
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Script
                           (Yesod.Routes.Class.Route Foundation.Balada)])
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                             <Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Stylesheet
                           (Yesod.Routes.Class.Route Foundation.Balada)])
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:UniqueList[0]
                             <Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.Balada)>_R))
                   (Data.Map.Base.Tip
                      @ (GHC.Base.Maybe Data.Text.Internal.Text)
                      @ ((Yesod.Routes.Class.Route Foundation.Balada
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Data.Text.Internal.Builder.Builder))
                   (GHC.Base.Nothing
                      @ ((Yesod.Routes.Class.Route Foundation.Balada
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Text.Julius.Javascript))
                   (Yesod.Core.Types.$fApplicativeWidgetT2
                      @ (Yesod.Routes.Class.Route Foundation.Balada))
                     `cast`
                   (Sym (Yesod.Core.Types.NTCo:Head[0]
                             <Yesod.Routes.Class.Route Foundation.Balada>_R))) -}
7f881c791debf5cb15390dc144b97c01
  getLogoutR5 ::
    Yesod.Core.Types.RY Foundation.Balada -> Text.Blaze.Html.Html
  {- Arity: 1,
     Unfolding: (\ ds :: Yesod.Core.Types.RY Foundation.Balada ->
                 Handlers.getLogoutR_x) -}
0bffc3caa125dd47338bcb4ffd312ac6
  getLogoutR6 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.PreEscaped
                   Handlers.getLogoutR7) -}
176ff5180bc454fd331bbad4984d34fc
  getLogoutR7 :: Text.Blaze.Internal.ChoiceString
  {- Unfolding: (Text.Blaze.Internal.Text Handlers.getLogoutR8) -}
34cd35d5dd7b2e89b8ed1d296ea4efbd
  getLogoutR8 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "<h1> ADEUS!</h1>\n"#) -}
007dd52356077d1060d4ce351b283aba
  getLogoutR9 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "_ID"#) -}
937b65d082ae5c6cd57002677df5d0da
  getLogoutR_k ::
    Yesod.Core.Types.HandlerT
      Foundation.Balada GHC.Types.IO Text.Blaze.Html.Html
  {- Unfolding: (Foundation.$fYesodBalada_$cdefaultLayout
                   Handlers.getLogoutR2
                     `cast`
                   (Trans
                        (<Yesod.Core.Types.HandlerData
                            Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0]
                                       ((<()>_R,
                                         (Yesod.Core.Types.GWData
                                            (Yesod.Routes.Class.Route
                                               (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteWidgetT[0]
                                                         <Foundation.Balada>_N
                                                         <GHC.Types.IO>_N)))_R)_R))_R))
                        (Sym (Yesod.Core.Types.NTCo:WidgetT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N <()>_N)))) -}
40f60cbcae13f7197385f8c2e271b93f
  getLogoutR_x :: Text.Blaze.Html.Html
  {- Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.getLogoutR6) -}
eb255785e5f0226f0f34fa9518df5301
  getPerfilR ::
    Foundation.PessoasId -> Foundation.Handler Text.Blaze.Html.Html
  {- Arity: 1, Strictness: <L,U> -}
813ea5bc022a9c08b398036f901ad925
  listaClassificacao ::
    (Yesod.Persist.Core.YesodPersist site,
     Yesod.Persist.Core.YesodPersistBackend site
     ~ Database.Persist.Sql.Types.SqlBackend) =>
    Yesod.Core.Types.HandlerT
      site
      GHC.Types.IO
      (Yesod.Form.Fields.OptionList
         (Database.Persist.Class.PersistEntity.Key
            Foundation.Classificacao_estab))
  {- Arity: 2, Strictness: <L,1*U(A,1*C1(U))><L,1*H>,
     Unfolding: (\ @ site
                   $dYesodPersist :: Yesod.Persist.Core.YesodPersist site
                   cobox :: Yesod.Persist.Core.YesodPersistBackend site
                            ~ Database.Persist.Sql.Types.SqlBackend ->
                 let {
                   ds :: Yesod.Core.Types.HandlerT
                           site
                           GHC.Types.IO
                           [Database.Persist.Class.PersistEntity.Entity
                              Foundation.Classificacao_estab]
                   = Yesod.Persist.Core.runDB
                       @ site
                       $dYesodPersist
                       @ [Database.Persist.Class.PersistEntity.Entity
                            Foundation.Classificacao_estab]
                       (case cobox of cobox1 { GHC.Types.Eq# cobox2 ->
                        (Handlers.listaClassificacao2 @ site)
                          `cast`
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  (Sub cobox2)
                                  <Yesod.Core.Types.HandlerT site GHC.Types.IO>_R
                                  <[Database.Persist.Class.PersistEntity.Entity
                                      Foundation.Classificacao_estab]>_N)) })
                 } in
                 (\ r :: Yesod.Core.Types.HandlerData
                           site (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case (ds
                          `cast`
                        (Yesod.Core.Types.NTCo:HandlerT[0]
                             <site>_N
                             <GHC.Types.IO>_N
                             <[Database.Persist.Class.PersistEntity.Entity
                                 Foundation.Classificacao_estab]>_N)
                          r)
                         `cast`
                       (GHC.Types.NTCo:IO[0]
                            <[Database.Persist.Class.PersistEntity.Entity
                                Foundation.Classificacao_estab]>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  ((Yesod.Form.Fields.optionsPairs
                      @ Data.Text.Internal.Text
                      @ (Database.Persist.Class.PersistEntity.Key
                           Foundation.Classificacao_estab)
                      @ (Yesod.Core.Types.HandlerT site GHC.Types.IO)
                      (Handlers.categs2 @ site)
                      (Text.Shakespeare.I18N.$fIsStringSomeMessage_$crenderMessage
                         @ site)
                        `cast`
                      (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                                (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                     <site>_N <GHC.Types.IO>_N)
                                <Data.Text.Internal.Text>_N))
                      (GHC.Base.map
                         @ (Database.Persist.Class.PersistEntity.Entity
                              Foundation.Classificacao_estab)
                         @ (Data.Text.Internal.Text,
                            Database.Persist.Class.PersistEntity.Key
                              Foundation.Classificacao_estab)
                         Handlers.listaClassificacao1
                         ipv1))
                     `cast`
                   (Yesod.Core.Types.NTCo:HandlerT[0]
                        <site>_N
                        <GHC.Types.IO>_N
                        <Yesod.Form.Fields.OptionList
                           (Database.Persist.Class.PersistEntity.Key
                              Foundation.Classificacao_estab)>_N)
                     r)
                    `cast`
                  (GHC.Types.NTCo:IO[0]
                       <Yesod.Form.Fields.OptionList
                          (Database.Persist.Class.PersistEntity.Key
                             Foundation.Classificacao_estab)>_R)
                    ipv })
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          site (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <Yesod.Form.Fields.OptionList
                                        (Database.Persist.Class.PersistEntity.Key
                                           Foundation.Classificacao_estab)>_R))
                      (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                <site>_N
                                <GHC.Types.IO>_N
                                <Yesod.Form.Fields.OptionList
                                   (Database.Persist.Class.PersistEntity.Key
                                      Foundation.Classificacao_estab)>_N)))) -}
f2ad4e5dbb8f05946610ff330bfb594e
  listaClassificacao1 ::
    Database.Persist.Class.PersistEntity.Entity
      Foundation.Classificacao_estab
    -> (Data.Text.Internal.Text,
        Database.Persist.Class.PersistEntity.Key
          Foundation.Classificacao_estab)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ ent :: Database.Persist.Class.PersistEntity.Entity
                            Foundation.Classificacao_estab ->
                 (case ent of wild { Database.Persist.Class.PersistEntity.Entity $dPersistEntity ds1 ds2 ->
                  case ds2 of wild1 { Foundation.Classificacao_estab ds4 ds5 ->
                  ds4 } },
                  Database.Persist.Class.PersistEntity.entityKey
                    @ Foundation.Classificacao_estab
                    ent)) -}
32e51d79189d87d659da1b84bb5858bd
  listaClassificacao2 ::
    Database.Persist.Sql.Types.SqlBackend
    -> Yesod.Core.Types.HandlerT
         site
         GHC.Types.IO
         [Database.Persist.Class.PersistEntity.Entity
            Foundation.Classificacao_estab]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ site r1 :: Database.Persist.Sql.Types.SqlBackend ->
                 let {
                   ds :: Yesod.Core.Types.HandlerT
                           site
                           GHC.Types.IO
                           (Data.Acquire.Internal.Acquire
                              (Data.Conduit.Internal.Conduit.Source
                                 GHC.Types.IO
                                 (Database.Persist.Class.PersistEntity.Entity
                                    Foundation.Classificacao_estab)))
                   = (Handlers.listaClassificacao_m1 @ site)
                       `cast`
                     (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                          <Database.Persist.Sql.Types.SqlBackend>_R
                          <Yesod.Core.Types.HandlerT site GHC.Types.IO>_R
                          <Data.Acquire.Internal.Acquire
                             (Data.Conduit.Internal.Conduit.Source
                                GHC.Types.IO
                                (Database.Persist.Class.PersistEntity.Entity
                                   Foundation.Classificacao_estab))>_N)
                       r1
                 } in
                 (\ r :: Yesod.Core.Types.HandlerData
                           site (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case (ds
                          `cast`
                        (Yesod.Core.Types.NTCo:HandlerT[0]
                             <site>_N
                             <GHC.Types.IO>_N
                             <Data.Acquire.Internal.Acquire
                                (Data.Conduit.Internal.Conduit.Source
                                   GHC.Types.IO
                                   (Database.Persist.Class.PersistEntity.Entity
                                      Foundation.Classificacao_estab))>_N)
                          r)
                         `cast`
                       (GHC.Types.NTCo:IO[0]
                            <Data.Acquire.Internal.Acquire
                               (Data.Conduit.Internal.Conduit.Source
                                  GHC.Types.IO
                                  (Database.Persist.Class.PersistEntity.Entity
                                     Foundation.Classificacao_estab))>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  (Data.Acquire.Internal.with
                     @ (Data.Conduit.Internal.Conduit.Source
                          GHC.Types.IO
                          (Database.Persist.Class.PersistEntity.Entity
                             Foundation.Classificacao_estab))
                     @ GHC.Types.IO
                     @ [Database.Persist.Class.PersistEntity.Entity
                          Foundation.Classificacao_estab]
                     Control.Monad.Trans.Control.$fMonadBaseControlIOIO
                     ipv1
                     (Database.Persist.Class.PersistQuery.selectList1
                        @ Foundation.Classificacao_estab)
                       `cast`
                     (<Data.Conduit.Internal.Conduit.Source
                         GHC.Types.IO
                         (Database.Persist.Class.PersistEntity.Entity
                            Foundation.Classificacao_estab)>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0]
                                    <[Database.Persist.Class.PersistEntity.Entity
                                        Foundation.Classificacao_estab]>_R)))
                    `cast`
                  (GHC.Types.NTCo:IO[0]
                       <[Database.Persist.Class.PersistEntity.Entity
                           Foundation.Classificacao_estab]>_R)
                    ipv })
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          site (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <[Database.Persist.Class.PersistEntity.Entity
                                         Foundation.Classificacao_estab]>_R))
                      (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                <site>_N
                                <GHC.Types.IO>_N
                                <[Database.Persist.Class.PersistEntity.Entity
                                    Foundation.Classificacao_estab]>_N)))) -}
11f06c78c3d7000404fdfcb03907d5e7
  listaClassificacao3 ::
    [Database.Persist.Class.PersistEntity.SelectOpt
       Foundation.Classificacao_estab]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Database.Persist.Class.PersistEntity.SelectOpt
                        Foundation.Classificacao_estab)
                   Handlers.listaClassificacao4
                   (GHC.Types.[]
                      @ (Database.Persist.Class.PersistEntity.SelectOpt
                           Foundation.Classificacao_estab))) -}
56ebbb1e9e191c26382c6ce2d6f061cb
  listaClassificacao4 ::
    Database.Persist.Class.PersistEntity.SelectOpt
      Foundation.Classificacao_estab
  {- HasNoCafRefs,
     Unfolding: (Database.Persist.Class.PersistEntity.Asc
                   @ Foundation.Classificacao_estab
                   @ Data.Text.Internal.Text
                   Handlers.listaClassificacao5
                     `cast`
                   (Sub (Sym (Foundation.TFCo:R:EntityFieldClassificacao_estabtyp[0])) <Data.Text.Internal.Text>_N)) -}
79387cbe84e9f048f7e3dd5bcc95ffe6
  listaClassificacao5 ::
    Foundation.R:EntityFieldClassificacao_estabtyp
      Data.Text.Internal.Text
  {- HasNoCafRefs,
     Unfolding: (Foundation.Classificacao_estabNome_classificacao
                   @ Data.Text.Internal.Text
                   @~ <Data.Text.Internal.Text>_N) -}
75dda298f06ac7baaa3ec348db9851d8
  listaClassificacao6 ::
    [Database.Persist.Class.PersistEntity.Filter
       Foundation.Classificacao_estab]
    -> [Database.Persist.Class.PersistEntity.SelectOpt
          Foundation.Classificacao_estab]
    -> Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT site GHC.Types.IO)
         (Data.Acquire.Internal.Acquire
            (Data.Conduit.Internal.Conduit.Source
               GHC.Types.IO
               (Database.Persist.Class.PersistEntity.Entity
                  Foundation.Classificacao_estab)))
  {- Unfolding: (\ @ site ->
                 Database.Persist.Sql.Orphan.PersistQuery.$w$cselectSourceRes
                   @ Foundation.Classificacao_estab
                   @ (Yesod.Core.Types.HandlerT site GHC.Types.IO)
                   @ GHC.Types.IO
                   Foundation.$fPersistEntityClassificacao_estab
                   (Handlers.categs8 @ site)
                   Control.Monad.IO.Class.$fMonadIOIO) -}
d32cc373e4fb55b95a4422cafffe416f
  listaClassificacao_m1 ::
    Control.Monad.Trans.Reader.ReaderT
      Database.Persist.Sql.Types.SqlBackend
      (Yesod.Core.Types.HandlerT site GHC.Types.IO)
      (Data.Acquire.Internal.Acquire
         (Data.Conduit.Internal.Conduit.Source
            GHC.Types.IO
            (Database.Persist.Class.PersistEntity.Entity
               Foundation.Classificacao_estab)))
  {- Unfolding: (\ @ site ->
                 Handlers.listaClassificacao6
                   @ site
                   (GHC.Types.[]
                      @ (Database.Persist.Class.PersistEntity.Filter
                           Foundation.Classificacao_estab))
                   Handlers.listaClassificacao3) -}
834a6b48295e2f1d4ce0afca6146560d
  listaDia ::
    (Yesod.Persist.Core.YesodPersist site,
     Yesod.Persist.Core.YesodPersistBackend site
     ~ Database.Persist.Sql.Types.SqlBackend) =>
    Yesod.Core.Types.HandlerT
      site
      GHC.Types.IO
      (Yesod.Form.Fields.OptionList
         (Database.Persist.Class.PersistEntity.Key Foundation.Dia_evento))
  {- Arity: 2, Strictness: <L,1*U(A,1*C1(U))><L,1*H>,
     Unfolding: (\ @ site
                   $dYesodPersist :: Yesod.Persist.Core.YesodPersist site
                   cobox :: Yesod.Persist.Core.YesodPersistBackend site
                            ~ Database.Persist.Sql.Types.SqlBackend ->
                 let {
                   ds :: Yesod.Core.Types.HandlerT
                           site
                           GHC.Types.IO
                           [Database.Persist.Class.PersistEntity.Entity Foundation.Dia_evento]
                   = Yesod.Persist.Core.runDB
                       @ site
                       $dYesodPersist
                       @ [Database.Persist.Class.PersistEntity.Entity
                            Foundation.Dia_evento]
                       (case cobox of cobox1 { GHC.Types.Eq# cobox2 ->
                        (Handlers.listaDia2 @ site)
                          `cast`
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  (Sub cobox2)
                                  <Yesod.Core.Types.HandlerT site GHC.Types.IO>_R
                                  <[Database.Persist.Class.PersistEntity.Entity
                                      Foundation.Dia_evento]>_N)) })
                 } in
                 (\ r :: Yesod.Core.Types.HandlerData
                           site (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case (ds
                          `cast`
                        (Yesod.Core.Types.NTCo:HandlerT[0]
                             <site>_N
                             <GHC.Types.IO>_N
                             <[Database.Persist.Class.PersistEntity.Entity
                                 Foundation.Dia_evento]>_N)
                          r)
                         `cast`
                       (GHC.Types.NTCo:IO[0]
                            <[Database.Persist.Class.PersistEntity.Entity
                                Foundation.Dia_evento]>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  ((Yesod.Form.Fields.optionsPairs
                      @ Data.Text.Internal.Text
                      @ (Database.Persist.Class.PersistEntity.Key Foundation.Dia_evento)
                      @ (Yesod.Core.Types.HandlerT site GHC.Types.IO)
                      (Handlers.categs2 @ site)
                      (Text.Shakespeare.I18N.$fIsStringSomeMessage_$crenderMessage
                         @ site)
                        `cast`
                      (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                                (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                     <site>_N <GHC.Types.IO>_N)
                                <Data.Text.Internal.Text>_N))
                      (GHC.Base.map
                         @ (Database.Persist.Class.PersistEntity.Entity
                              Foundation.Dia_evento)
                         @ (Data.Text.Internal.Text,
                            Database.Persist.Class.PersistEntity.Key Foundation.Dia_evento)
                         Handlers.listaDia1
                         ipv1))
                     `cast`
                   (Yesod.Core.Types.NTCo:HandlerT[0]
                        <site>_N
                        <GHC.Types.IO>_N
                        <Yesod.Form.Fields.OptionList
                           (Database.Persist.Class.PersistEntity.Key
                              Foundation.Dia_evento)>_N)
                     r)
                    `cast`
                  (GHC.Types.NTCo:IO[0]
                       <Yesod.Form.Fields.OptionList
                          (Database.Persist.Class.PersistEntity.Key
                             Foundation.Dia_evento)>_R)
                    ipv })
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          site (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <Yesod.Form.Fields.OptionList
                                        (Database.Persist.Class.PersistEntity.Key
                                           Foundation.Dia_evento)>_R))
                      (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                <site>_N
                                <GHC.Types.IO>_N
                                <Yesod.Form.Fields.OptionList
                                   (Database.Persist.Class.PersistEntity.Key
                                      Foundation.Dia_evento)>_N)))) -}
4e3482c8a93415f8b89802f8859fdf32
  listaDia1 ::
    Database.Persist.Class.PersistEntity.Entity Foundation.Dia_evento
    -> (Data.Text.Internal.Text,
        Database.Persist.Class.PersistEntity.Key Foundation.Dia_evento)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ ent :: Database.Persist.Class.PersistEntity.Entity
                            Foundation.Dia_evento ->
                 (case ent of wild { Database.Persist.Class.PersistEntity.Entity $dPersistEntity ds1 ds2 ->
                  case ds2 of wild1 { Foundation.Dia_evento ds4 -> ds4 } },
                  Database.Persist.Class.PersistEntity.entityKey
                    @ Foundation.Dia_evento
                    ent)) -}
c3dfb93cd2a0bd6b3513298362c88e76
  listaDia2 ::
    Database.Persist.Sql.Types.SqlBackend
    -> Yesod.Core.Types.HandlerT
         site
         GHC.Types.IO
         [Database.Persist.Class.PersistEntity.Entity Foundation.Dia_evento]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ site r1 :: Database.Persist.Sql.Types.SqlBackend ->
                 let {
                   ds :: Yesod.Core.Types.HandlerT
                           site
                           GHC.Types.IO
                           (Data.Acquire.Internal.Acquire
                              (Data.Conduit.Internal.Conduit.Source
                                 GHC.Types.IO
                                 (Database.Persist.Class.PersistEntity.Entity
                                    Foundation.Dia_evento)))
                   = (Handlers.listaDia_m1 @ site)
                       `cast`
                     (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                          <Database.Persist.Sql.Types.SqlBackend>_R
                          <Yesod.Core.Types.HandlerT site GHC.Types.IO>_R
                          <Data.Acquire.Internal.Acquire
                             (Data.Conduit.Internal.Conduit.Source
                                GHC.Types.IO
                                (Database.Persist.Class.PersistEntity.Entity
                                   Foundation.Dia_evento))>_N)
                       r1
                 } in
                 (\ r :: Yesod.Core.Types.HandlerData
                           site (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case (ds
                          `cast`
                        (Yesod.Core.Types.NTCo:HandlerT[0]
                             <site>_N
                             <GHC.Types.IO>_N
                             <Data.Acquire.Internal.Acquire
                                (Data.Conduit.Internal.Conduit.Source
                                   GHC.Types.IO
                                   (Database.Persist.Class.PersistEntity.Entity
                                      Foundation.Dia_evento))>_N)
                          r)
                         `cast`
                       (GHC.Types.NTCo:IO[0]
                            <Data.Acquire.Internal.Acquire
                               (Data.Conduit.Internal.Conduit.Source
                                  GHC.Types.IO
                                  (Database.Persist.Class.PersistEntity.Entity
                                     Foundation.Dia_evento))>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  (Data.Acquire.Internal.with
                     @ (Data.Conduit.Internal.Conduit.Source
                          GHC.Types.IO
                          (Database.Persist.Class.PersistEntity.Entity
                             Foundation.Dia_evento))
                     @ GHC.Types.IO
                     @ [Database.Persist.Class.PersistEntity.Entity
                          Foundation.Dia_evento]
                     Control.Monad.Trans.Control.$fMonadBaseControlIOIO
                     ipv1
                     (Database.Persist.Class.PersistQuery.selectList1
                        @ Foundation.Dia_evento)
                       `cast`
                     (<Data.Conduit.Internal.Conduit.Source
                         GHC.Types.IO
                         (Database.Persist.Class.PersistEntity.Entity
                            Foundation.Dia_evento)>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0]
                                    <[Database.Persist.Class.PersistEntity.Entity
                                        Foundation.Dia_evento]>_R)))
                    `cast`
                  (GHC.Types.NTCo:IO[0]
                       <[Database.Persist.Class.PersistEntity.Entity
                           Foundation.Dia_evento]>_R)
                    ipv })
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          site (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <[Database.Persist.Class.PersistEntity.Entity
                                         Foundation.Dia_evento]>_R))
                      (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                <site>_N
                                <GHC.Types.IO>_N
                                <[Database.Persist.Class.PersistEntity.Entity
                                    Foundation.Dia_evento]>_N)))) -}
c32e4dc51f2d3b75c2ce3f30388892c6
  listaDia3 ::
    [Database.Persist.Class.PersistEntity.SelectOpt
       Foundation.Dia_evento]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Database.Persist.Class.PersistEntity.SelectOpt
                        Foundation.Dia_evento)
                   Handlers.listaDia4
                   (GHC.Types.[]
                      @ (Database.Persist.Class.PersistEntity.SelectOpt
                           Foundation.Dia_evento))) -}
c969c93e2666bab64592ea2ec521b0db
  listaDia4 ::
    Database.Persist.Class.PersistEntity.SelectOpt
      Foundation.Dia_evento
  {- HasNoCafRefs,
     Unfolding: (Database.Persist.Class.PersistEntity.Asc
                   @ Foundation.Dia_evento
                   @ Data.Text.Internal.Text
                   Handlers.listaDia5
                     `cast`
                   (Sub (Sym (Foundation.TFCo:R:EntityFieldDia_eventotyp[0])) <Data.Text.Internal.Text>_N)) -}
c0b2fa85e40d8936fe128e58181917b4
  listaDia5 ::
    Foundation.R:EntityFieldDia_eventotyp Data.Text.Internal.Text
  {- HasNoCafRefs,
     Unfolding: (Foundation.Dia_eventoDc_dia
                   @ Data.Text.Internal.Text
                   @~ <Data.Text.Internal.Text>_N) -}
78959a936eabc9c9f1771472e01e7ae5
  listaDia6 ::
    [Database.Persist.Class.PersistEntity.Filter Foundation.Dia_evento]
    -> [Database.Persist.Class.PersistEntity.SelectOpt
          Foundation.Dia_evento]
    -> Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT site GHC.Types.IO)
         (Data.Acquire.Internal.Acquire
            (Data.Conduit.Internal.Conduit.Source
               GHC.Types.IO
               (Database.Persist.Class.PersistEntity.Entity
                  Foundation.Dia_evento)))
  {- Unfolding: (\ @ site ->
                 Database.Persist.Sql.Orphan.PersistQuery.$w$cselectSourceRes
                   @ Foundation.Dia_evento
                   @ (Yesod.Core.Types.HandlerT site GHC.Types.IO)
                   @ GHC.Types.IO
                   Foundation.$fPersistEntityDia_evento
                   (Handlers.categs8 @ site)
                   Control.Monad.IO.Class.$fMonadIOIO) -}
17c3c0ff6f9b9f1d6c097d65900bd3f3
  listaDia_m1 ::
    Control.Monad.Trans.Reader.ReaderT
      Database.Persist.Sql.Types.SqlBackend
      (Yesod.Core.Types.HandlerT site GHC.Types.IO)
      (Data.Acquire.Internal.Acquire
         (Data.Conduit.Internal.Conduit.Source
            GHC.Types.IO
            (Database.Persist.Class.PersistEntity.Entity
               Foundation.Dia_evento)))
  {- Unfolding: (\ @ site ->
                 Handlers.listaDia6
                   @ site
                   (GHC.Types.[]
                      @ (Database.Persist.Class.PersistEntity.Filter
                           Foundation.Dia_evento))
                   Handlers.listaDia3) -}
ce3a1a5f7165a1b788116c36d4d309dd
  listaFaixapreco ::
    (Yesod.Persist.Core.YesodPersist site,
     Yesod.Persist.Core.YesodPersistBackend site
     ~ Database.Persist.Sql.Types.SqlBackend) =>
    Yesod.Core.Types.HandlerT
      site
      GHC.Types.IO
      (Yesod.Form.Fields.OptionList
         (Database.Persist.Class.PersistEntity.Key Foundation.Faixa_preco))
  {- Arity: 2, Strictness: <L,1*U(A,1*C1(U))><L,1*H>,
     Unfolding: (\ @ site
                   $dYesodPersist :: Yesod.Persist.Core.YesodPersist site
                   cobox :: Yesod.Persist.Core.YesodPersistBackend site
                            ~ Database.Persist.Sql.Types.SqlBackend ->
                 let {
                   ds :: Yesod.Core.Types.HandlerT
                           site
                           GHC.Types.IO
                           [Database.Persist.Class.PersistEntity.Entity
                              Foundation.Faixa_preco]
                   = Yesod.Persist.Core.runDB
                       @ site
                       $dYesodPersist
                       @ [Database.Persist.Class.PersistEntity.Entity
                            Foundation.Faixa_preco]
                       (case cobox of cobox1 { GHC.Types.Eq# cobox2 ->
                        (Handlers.listaFaixapreco2 @ site)
                          `cast`
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  (Sub cobox2)
                                  <Yesod.Core.Types.HandlerT site GHC.Types.IO>_R
                                  <[Database.Persist.Class.PersistEntity.Entity
                                      Foundation.Faixa_preco]>_N)) })
                 } in
                 (\ r :: Yesod.Core.Types.HandlerData
                           site (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case (ds
                          `cast`
                        (Yesod.Core.Types.NTCo:HandlerT[0]
                             <site>_N
                             <GHC.Types.IO>_N
                             <[Database.Persist.Class.PersistEntity.Entity
                                 Foundation.Faixa_preco]>_N)
                          r)
                         `cast`
                       (GHC.Types.NTCo:IO[0]
                            <[Database.Persist.Class.PersistEntity.Entity
                                Foundation.Faixa_preco]>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  ((Yesod.Form.Fields.optionsPairs
                      @ Data.Text.Internal.Text
                      @ (Database.Persist.Class.PersistEntity.Key Foundation.Faixa_preco)
                      @ (Yesod.Core.Types.HandlerT site GHC.Types.IO)
                      (Handlers.categs2 @ site)
                      (Text.Shakespeare.I18N.$fIsStringSomeMessage_$crenderMessage
                         @ site)
                        `cast`
                      (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                                (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                     <site>_N <GHC.Types.IO>_N)
                                <Data.Text.Internal.Text>_N))
                      (GHC.Base.map
                         @ (Database.Persist.Class.PersistEntity.Entity
                              Foundation.Faixa_preco)
                         @ (Data.Text.Internal.Text,
                            Database.Persist.Class.PersistEntity.Key Foundation.Faixa_preco)
                         Handlers.listaFaixapreco1
                         ipv1))
                     `cast`
                   (Yesod.Core.Types.NTCo:HandlerT[0]
                        <site>_N
                        <GHC.Types.IO>_N
                        <Yesod.Form.Fields.OptionList
                           (Database.Persist.Class.PersistEntity.Key
                              Foundation.Faixa_preco)>_N)
                     r)
                    `cast`
                  (GHC.Types.NTCo:IO[0]
                       <Yesod.Form.Fields.OptionList
                          (Database.Persist.Class.PersistEntity.Key
                             Foundation.Faixa_preco)>_R)
                    ipv })
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          site (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <Yesod.Form.Fields.OptionList
                                        (Database.Persist.Class.PersistEntity.Key
                                           Foundation.Faixa_preco)>_R))
                      (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                <site>_N
                                <GHC.Types.IO>_N
                                <Yesod.Form.Fields.OptionList
                                   (Database.Persist.Class.PersistEntity.Key
                                      Foundation.Faixa_preco)>_N)))) -}
13ecdee5228da962f0fcea36b0bf855e
  listaFaixapreco1 ::
    Database.Persist.Class.PersistEntity.Entity Foundation.Faixa_preco
    -> (Data.Text.Internal.Text,
        Database.Persist.Class.PersistEntity.Key Foundation.Faixa_preco)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ ent :: Database.Persist.Class.PersistEntity.Entity
                            Foundation.Faixa_preco ->
                 (case ent of wild { Database.Persist.Class.PersistEntity.Entity $dPersistEntity ds1 ds2 ->
                  case ds2 of wild1 { Foundation.Faixa_preco ds4 ds5 ds3 -> ds4 } },
                  Database.Persist.Class.PersistEntity.entityKey
                    @ Foundation.Faixa_preco
                    ent)) -}
10cd15b840181ebc14c6949559f66b86
  listaFaixapreco2 ::
    Database.Persist.Sql.Types.SqlBackend
    -> Yesod.Core.Types.HandlerT
         site
         GHC.Types.IO
         [Database.Persist.Class.PersistEntity.Entity
            Foundation.Faixa_preco]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ site r1 :: Database.Persist.Sql.Types.SqlBackend ->
                 let {
                   ds :: Yesod.Core.Types.HandlerT
                           site
                           GHC.Types.IO
                           (Data.Acquire.Internal.Acquire
                              (Data.Conduit.Internal.Conduit.Source
                                 GHC.Types.IO
                                 (Database.Persist.Class.PersistEntity.Entity
                                    Foundation.Faixa_preco)))
                   = (Handlers.listaFaixapreco_m1 @ site)
                       `cast`
                     (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                          <Database.Persist.Sql.Types.SqlBackend>_R
                          <Yesod.Core.Types.HandlerT site GHC.Types.IO>_R
                          <Data.Acquire.Internal.Acquire
                             (Data.Conduit.Internal.Conduit.Source
                                GHC.Types.IO
                                (Database.Persist.Class.PersistEntity.Entity
                                   Foundation.Faixa_preco))>_N)
                       r1
                 } in
                 (\ r :: Yesod.Core.Types.HandlerData
                           site (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case (ds
                          `cast`
                        (Yesod.Core.Types.NTCo:HandlerT[0]
                             <site>_N
                             <GHC.Types.IO>_N
                             <Data.Acquire.Internal.Acquire
                                (Data.Conduit.Internal.Conduit.Source
                                   GHC.Types.IO
                                   (Database.Persist.Class.PersistEntity.Entity
                                      Foundation.Faixa_preco))>_N)
                          r)
                         `cast`
                       (GHC.Types.NTCo:IO[0]
                            <Data.Acquire.Internal.Acquire
                               (Data.Conduit.Internal.Conduit.Source
                                  GHC.Types.IO
                                  (Database.Persist.Class.PersistEntity.Entity
                                     Foundation.Faixa_preco))>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  (Data.Acquire.Internal.with
                     @ (Data.Conduit.Internal.Conduit.Source
                          GHC.Types.IO
                          (Database.Persist.Class.PersistEntity.Entity
                             Foundation.Faixa_preco))
                     @ GHC.Types.IO
                     @ [Database.Persist.Class.PersistEntity.Entity
                          Foundation.Faixa_preco]
                     Control.Monad.Trans.Control.$fMonadBaseControlIOIO
                     ipv1
                     (Database.Persist.Class.PersistQuery.selectList1
                        @ Foundation.Faixa_preco)
                       `cast`
                     (<Data.Conduit.Internal.Conduit.Source
                         GHC.Types.IO
                         (Database.Persist.Class.PersistEntity.Entity
                            Foundation.Faixa_preco)>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0]
                                    <[Database.Persist.Class.PersistEntity.Entity
                                        Foundation.Faixa_preco]>_R)))
                    `cast`
                  (GHC.Types.NTCo:IO[0]
                       <[Database.Persist.Class.PersistEntity.Entity
                           Foundation.Faixa_preco]>_R)
                    ipv })
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          site (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <[Database.Persist.Class.PersistEntity.Entity
                                         Foundation.Faixa_preco]>_R))
                      (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                <site>_N
                                <GHC.Types.IO>_N
                                <[Database.Persist.Class.PersistEntity.Entity
                                    Foundation.Faixa_preco]>_N)))) -}
396ef7f58ffd8f8cbbded6e571017675
  listaFaixapreco3 ::
    [Database.Persist.Class.PersistEntity.SelectOpt
       Foundation.Faixa_preco]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Database.Persist.Class.PersistEntity.SelectOpt
                        Foundation.Faixa_preco)
                   Handlers.listaFaixapreco4
                   (GHC.Types.[]
                      @ (Database.Persist.Class.PersistEntity.SelectOpt
                           Foundation.Faixa_preco))) -}
dd1c7a53ba40e3a328cf6e243228a838
  listaFaixapreco4 ::
    Database.Persist.Class.PersistEntity.SelectOpt
      Foundation.Faixa_preco
  {- HasNoCafRefs,
     Unfolding: (Database.Persist.Class.PersistEntity.Asc
                   @ Foundation.Faixa_preco
                   @ Data.Text.Internal.Text
                   Handlers.listaFaixapreco5
                     `cast`
                   (Sub (Sym (Foundation.TFCo:R:EntityFieldFaixa_precotyp[0])) <Data.Text.Internal.Text>_N)) -}
db8aa0e724f21151b50ca4e53264fb06
  listaFaixapreco5 ::
    Foundation.R:EntityFieldFaixa_precotyp Data.Text.Internal.Text
  {- HasNoCafRefs,
     Unfolding: (Foundation.Faixa_precoNome_faixa_preco
                   @ Data.Text.Internal.Text
                   @~ <Data.Text.Internal.Text>_N) -}
b14f80b4e14dadaf89470feb5aeb73c2
  listaFaixapreco6 ::
    [Database.Persist.Class.PersistEntity.Filter
       Foundation.Faixa_preco]
    -> [Database.Persist.Class.PersistEntity.SelectOpt
          Foundation.Faixa_preco]
    -> Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT site GHC.Types.IO)
         (Data.Acquire.Internal.Acquire
            (Data.Conduit.Internal.Conduit.Source
               GHC.Types.IO
               (Database.Persist.Class.PersistEntity.Entity
                  Foundation.Faixa_preco)))
  {- Unfolding: (\ @ site ->
                 Database.Persist.Sql.Orphan.PersistQuery.$w$cselectSourceRes
                   @ Foundation.Faixa_preco
                   @ (Yesod.Core.Types.HandlerT site GHC.Types.IO)
                   @ GHC.Types.IO
                   Foundation.$fPersistEntityFaixa_preco
                   (Handlers.categs8 @ site)
                   Control.Monad.IO.Class.$fMonadIOIO) -}
050fe67f8c63e2c80b292301b1bd52cd
  listaFaixapreco_m1 ::
    Control.Monad.Trans.Reader.ReaderT
      Database.Persist.Sql.Types.SqlBackend
      (Yesod.Core.Types.HandlerT site GHC.Types.IO)
      (Data.Acquire.Internal.Acquire
         (Data.Conduit.Internal.Conduit.Source
            GHC.Types.IO
            (Database.Persist.Class.PersistEntity.Entity
               Foundation.Faixa_preco)))
  {- Unfolding: (\ @ site ->
                 Handlers.listaFaixapreco6
                   @ site
                   (GHC.Types.[]
                      @ (Database.Persist.Class.PersistEntity.Filter
                           Foundation.Faixa_preco))
                   Handlers.listaFaixapreco3) -}
daff4d31b63f24b21d5675f5eb77f1f2
  listaSubcategoria ::
    (Yesod.Persist.Core.YesodPersist site,
     Yesod.Persist.Core.YesodPersistBackend site
     ~ Database.Persist.Sql.Types.SqlBackend) =>
    Yesod.Core.Types.HandlerT
      site
      GHC.Types.IO
      (Yesod.Form.Fields.OptionList
         (Database.Persist.Class.PersistEntity.Key
            Foundation.Sub_categ_estab))
  {- Arity: 2, Strictness: <L,1*U(A,1*C1(U))><L,1*H>,
     Unfolding: (\ @ site
                   $dYesodPersist :: Yesod.Persist.Core.YesodPersist site
                   cobox :: Yesod.Persist.Core.YesodPersistBackend site
                            ~ Database.Persist.Sql.Types.SqlBackend ->
                 let {
                   ds :: Yesod.Core.Types.HandlerT
                           site
                           GHC.Types.IO
                           [Database.Persist.Class.PersistEntity.Entity
                              Foundation.Sub_categ_estab]
                   = Yesod.Persist.Core.runDB
                       @ site
                       $dYesodPersist
                       @ [Database.Persist.Class.PersistEntity.Entity
                            Foundation.Sub_categ_estab]
                       (case cobox of cobox1 { GHC.Types.Eq# cobox2 ->
                        (Handlers.listaSubcategoria2 @ site)
                          `cast`
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  (Sub cobox2)
                                  <Yesod.Core.Types.HandlerT site GHC.Types.IO>_R
                                  <[Database.Persist.Class.PersistEntity.Entity
                                      Foundation.Sub_categ_estab]>_N)) })
                 } in
                 (\ r :: Yesod.Core.Types.HandlerData
                           site (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case (ds
                          `cast`
                        (Yesod.Core.Types.NTCo:HandlerT[0]
                             <site>_N
                             <GHC.Types.IO>_N
                             <[Database.Persist.Class.PersistEntity.Entity
                                 Foundation.Sub_categ_estab]>_N)
                          r)
                         `cast`
                       (GHC.Types.NTCo:IO[0]
                            <[Database.Persist.Class.PersistEntity.Entity
                                Foundation.Sub_categ_estab]>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  ((Yesod.Form.Fields.optionsPairs
                      @ Data.Text.Internal.Text
                      @ (Database.Persist.Class.PersistEntity.Key
                           Foundation.Sub_categ_estab)
                      @ (Yesod.Core.Types.HandlerT site GHC.Types.IO)
                      (Handlers.categs2 @ site)
                      (Text.Shakespeare.I18N.$fIsStringSomeMessage_$crenderMessage
                         @ site)
                        `cast`
                      (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                                (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                     <site>_N <GHC.Types.IO>_N)
                                <Data.Text.Internal.Text>_N))
                      (GHC.Base.map
                         @ (Database.Persist.Class.PersistEntity.Entity
                              Foundation.Sub_categ_estab)
                         @ (Data.Text.Internal.Text,
                            Database.Persist.Class.PersistEntity.Key
                              Foundation.Sub_categ_estab)
                         Handlers.listaSubcategoria1
                         ipv1))
                     `cast`
                   (Yesod.Core.Types.NTCo:HandlerT[0]
                        <site>_N
                        <GHC.Types.IO>_N
                        <Yesod.Form.Fields.OptionList
                           (Database.Persist.Class.PersistEntity.Key
                              Foundation.Sub_categ_estab)>_N)
                     r)
                    `cast`
                  (GHC.Types.NTCo:IO[0]
                       <Yesod.Form.Fields.OptionList
                          (Database.Persist.Class.PersistEntity.Key
                             Foundation.Sub_categ_estab)>_R)
                    ipv })
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          site (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <Yesod.Form.Fields.OptionList
                                        (Database.Persist.Class.PersistEntity.Key
                                           Foundation.Sub_categ_estab)>_R))
                      (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                <site>_N
                                <GHC.Types.IO>_N
                                <Yesod.Form.Fields.OptionList
                                   (Database.Persist.Class.PersistEntity.Key
                                      Foundation.Sub_categ_estab)>_N)))) -}
969d68e80690ac3216d903aa54d4cd4a
  listaSubcategoria1 ::
    Database.Persist.Class.PersistEntity.Entity
      Foundation.Sub_categ_estab
    -> (Data.Text.Internal.Text,
        Database.Persist.Class.PersistEntity.Key
          Foundation.Sub_categ_estab)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ ent :: Database.Persist.Class.PersistEntity.Entity
                            Foundation.Sub_categ_estab ->
                 (case ent of wild { Database.Persist.Class.PersistEntity.Entity $dPersistEntity ds1 ds2 ->
                  case ds2 of wild1 { Foundation.Sub_categ_estab ds4 ds5 -> ds4 } },
                  Database.Persist.Class.PersistEntity.entityKey
                    @ Foundation.Sub_categ_estab
                    ent)) -}
5d4753124a2e091a43084219d5d985e3
  listaSubcategoria2 ::
    Database.Persist.Sql.Types.SqlBackend
    -> Yesod.Core.Types.HandlerT
         site
         GHC.Types.IO
         [Database.Persist.Class.PersistEntity.Entity
            Foundation.Sub_categ_estab]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ site r1 :: Database.Persist.Sql.Types.SqlBackend ->
                 let {
                   ds :: Yesod.Core.Types.HandlerT
                           site
                           GHC.Types.IO
                           (Data.Acquire.Internal.Acquire
                              (Data.Conduit.Internal.Conduit.Source
                                 GHC.Types.IO
                                 (Database.Persist.Class.PersistEntity.Entity
                                    Foundation.Sub_categ_estab)))
                   = (Handlers.listaSubcategoria_m1 @ site)
                       `cast`
                     (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                          <Database.Persist.Sql.Types.SqlBackend>_R
                          <Yesod.Core.Types.HandlerT site GHC.Types.IO>_R
                          <Data.Acquire.Internal.Acquire
                             (Data.Conduit.Internal.Conduit.Source
                                GHC.Types.IO
                                (Database.Persist.Class.PersistEntity.Entity
                                   Foundation.Sub_categ_estab))>_N)
                       r1
                 } in
                 (\ r :: Yesod.Core.Types.HandlerData
                           site (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                    s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case (ds
                          `cast`
                        (Yesod.Core.Types.NTCo:HandlerT[0]
                             <site>_N
                             <GHC.Types.IO>_N
                             <Data.Acquire.Internal.Acquire
                                (Data.Conduit.Internal.Conduit.Source
                                   GHC.Types.IO
                                   (Database.Persist.Class.PersistEntity.Entity
                                      Foundation.Sub_categ_estab))>_N)
                          r)
                         `cast`
                       (GHC.Types.NTCo:IO[0]
                            <Data.Acquire.Internal.Acquire
                               (Data.Conduit.Internal.Conduit.Source
                                  GHC.Types.IO
                                  (Database.Persist.Class.PersistEntity.Entity
                                     Foundation.Sub_categ_estab))>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  (Data.Acquire.Internal.with
                     @ (Data.Conduit.Internal.Conduit.Source
                          GHC.Types.IO
                          (Database.Persist.Class.PersistEntity.Entity
                             Foundation.Sub_categ_estab))
                     @ GHC.Types.IO
                     @ [Database.Persist.Class.PersistEntity.Entity
                          Foundation.Sub_categ_estab]
                     Control.Monad.Trans.Control.$fMonadBaseControlIOIO
                     ipv1
                     (Database.Persist.Class.PersistQuery.selectList1
                        @ Foundation.Sub_categ_estab)
                       `cast`
                     (<Data.Conduit.Internal.Conduit.Source
                         GHC.Types.IO
                         (Database.Persist.Class.PersistEntity.Entity
                            Foundation.Sub_categ_estab)>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0]
                                    <[Database.Persist.Class.PersistEntity.Entity
                                        Foundation.Sub_categ_estab]>_R)))
                    `cast`
                  (GHC.Types.NTCo:IO[0]
                       <[Database.Persist.Class.PersistEntity.Entity
                           Foundation.Sub_categ_estab]>_R)
                    ipv })
                   `cast`
                 (Trans
                      (<Yesod.Core.Types.HandlerData
                          site (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <[Database.Persist.Class.PersistEntity.Entity
                                         Foundation.Sub_categ_estab]>_R))
                      (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                <site>_N
                                <GHC.Types.IO>_N
                                <[Database.Persist.Class.PersistEntity.Entity
                                    Foundation.Sub_categ_estab]>_N)))) -}
56077cc75fafe0a69c5b6812134828d7
  listaSubcategoria3 ::
    [Database.Persist.Class.PersistEntity.SelectOpt
       Foundation.Sub_categ_estab]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Database.Persist.Class.PersistEntity.SelectOpt
                        Foundation.Sub_categ_estab)
                   Handlers.listaSubcategoria4
                   (GHC.Types.[]
                      @ (Database.Persist.Class.PersistEntity.SelectOpt
                           Foundation.Sub_categ_estab))) -}
a0e0375b2e546cbe14a907528641ff23
  listaSubcategoria4 ::
    Database.Persist.Class.PersistEntity.SelectOpt
      Foundation.Sub_categ_estab
  {- HasNoCafRefs,
     Unfolding: (Database.Persist.Class.PersistEntity.Asc
                   @ Foundation.Sub_categ_estab
                   @ Data.Text.Internal.Text
                   Handlers.listaSubcategoria5
                     `cast`
                   (Sub (Sym (Foundation.TFCo:R:EntityFieldSub_categ_estabtyp[0])) <Data.Text.Internal.Text>_N)) -}
9edb17ac398e0c4ab9a5a64469aef841
  listaSubcategoria5 ::
    Foundation.R:EntityFieldSub_categ_estabtyp Data.Text.Internal.Text
  {- HasNoCafRefs,
     Unfolding: (Foundation.Sub_categ_estabNome_sub_categ
                   @ Data.Text.Internal.Text
                   @~ <Data.Text.Internal.Text>_N) -}
fa331fde5e94b4d4b05b505e86c05683
  listaSubcategoria6 ::
    [Database.Persist.Class.PersistEntity.Filter
       Foundation.Sub_categ_estab]
    -> [Database.Persist.Class.PersistEntity.SelectOpt
          Foundation.Sub_categ_estab]
    -> Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT site GHC.Types.IO)
         (Data.Acquire.Internal.Acquire
            (Data.Conduit.Internal.Conduit.Source
               GHC.Types.IO
               (Database.Persist.Class.PersistEntity.Entity
                  Foundation.Sub_categ_estab)))
  {- Unfolding: (\ @ site ->
                 Database.Persist.Sql.Orphan.PersistQuery.$w$cselectSourceRes
                   @ Foundation.Sub_categ_estab
                   @ (Yesod.Core.Types.HandlerT site GHC.Types.IO)
                   @ GHC.Types.IO
                   Foundation.$fPersistEntitySub_categ_estab
                   (Handlers.categs8 @ site)
                   Control.Monad.IO.Class.$fMonadIOIO) -}
29132e91b9b43f71bbd4eab88de50b7d
  listaSubcategoria_m1 ::
    Control.Monad.Trans.Reader.ReaderT
      Database.Persist.Sql.Types.SqlBackend
      (Yesod.Core.Types.HandlerT site GHC.Types.IO)
      (Data.Acquire.Internal.Acquire
         (Data.Conduit.Internal.Conduit.Source
            GHC.Types.IO
            (Database.Persist.Class.PersistEntity.Entity
               Foundation.Sub_categ_estab)))
  {- Unfolding: (\ @ site ->
                 Handlers.listaSubcategoria6
                   @ site
                   (GHC.Types.[]
                      @ (Database.Persist.Class.PersistEntity.Filter
                           Foundation.Sub_categ_estab))
                   Handlers.listaSubcategoria3) -}
41989e7b770d8de9a7edecb84624a5bb
  postCadcategoriaR :: Foundation.Handler Text.Blaze.Html.Html
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Handlers.postCadcategoriaR1
                  `cast`
                (Trans
                     (<Yesod.Core.Types.HandlerData
                         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R))
                     (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                               <Foundation.Balada>_N
                               <GHC.Types.IO>_N
                               <Text.Blaze.Html.Html>_N))) -}
dae6c45fbf72aa3473f888e166a3e600
  postCadcategoriaR1 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Text.Blaze.Html.Html #)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ r :: Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (Handlers.postCadcategoriaR5
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Foundation.Balada>_N
                            <GHC.Types.IO>_N
                            <((Yesod.Form.Types.FormResult Foundation.Categoria_estab,
                               Foundation.Widget),
                              Yesod.Form.Types.Enctype)>_N)
                         r)
                        `cast`
                      (GHC.Types.NTCo:IO[0]
                           <((Yesod.Form.Types.FormResult Foundation.Categoria_estab,
                              Foundation.Widget),
                             Yesod.Form.Types.Enctype)>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) ds ds2 ->
                 case ds of wild1 { (,) result ds3 ->
                 case result of wild2 {
                   DEFAULT
                   -> (Handlers.postCadcategoriaR4
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Foundation.Balada>_N <GHC.Types.IO>_N <Text.Blaze.Html.Html>_N)
                         r)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R)
                        ipv
                   Yesod.Form.Types.FormSuccess categoria
                   -> case (Foundation.$fYesodPersistBalada3
                              `cast`
                            (Yesod.Core.Types.NTCo:HandlerT[0]
                                 <Foundation.Balada>_N
                                 <GHC.Types.IO>_N
                                 (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N))
                              r)
                             `cast`
                           (GHC.Types.NTCo:IO[0] <Foundation.Balada>_R)
                             ipv of ds4 { (#,#) ipv2 ipv3 ->
                      case Foundation.$fYesodPersistBalada2
                             @ Database.Persist.Sql.Types.SqlBackend
                             @ (Database.Persist.Class.PersistEntity.Key
                                  Foundation.Categoria_estab)
                             (case ipv3 of wild3 { Foundation.Balada ds5 -> ds5 })
                             (Database.Persist.Sql.Run.runSqlConn
                                @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                                @ (Database.Persist.Class.PersistEntity.Key
                                     Foundation.Categoria_estab)
                                Foundation.$fYesodPersistBalada_$s$fMonadBaseControlbHandlerT
                                (Handlers.postCadcategoriaR3 categoria))
                             r
                             ipv2 of ds5 { (#,#) ipv4 ipv5 ->
                      (Handlers.postCadcategoriaR2
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Foundation.Balada>_N <GHC.Types.IO>_N <Text.Blaze.Html.Html>_N)
                         r)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R)
                        ipv4 } } } } } }) -}
1b7f202e5228330821eb6cb2f56f1cd2
  postCadcategoriaR2 ::
    Yesod.Core.Types.HandlerT
      Foundation.Balada GHC.Types.IO Text.Blaze.Html.Html
  {- Unfolding: (Yesod.Core.Handler.redirect
                   @ (Yesod.Routes.Class.Route Foundation.Balada)
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   @ Text.Blaze.Html.Html
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   (Yesod.Core.Handler.$fRedirectUrlmasterRoute_$ctoTextUrl
                      @ Foundation.Balada)
                     `cast`
                   (Sym (Yesod.Core.Handler.NTCo:RedirectUrl[0]
                             (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)
                             <Yesod.Routes.Class.Route Foundation.Balada>_N))
                   Foundation.CadcategoriaR
                     `cast`
                   (Sub (Sym (Foundation.TFCo:R:RouteBalada[0])))) -}
2a8c5597e07bab2983c41bd59b04ad10
  postCadcategoriaR3 ::
    Foundation.Categoria_estab
    -> Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
         (Database.Persist.Class.PersistEntity.Key
            Foundation.Categoria_estab)
  {- Unfolding: (Database.Persist.Sql.Orphan.PersistStore.$w$cinsert
                   @ Foundation.Categoria_estab
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   Foundation.$fYesodBalada_$s$fMonadIOHandlerT
                   Foundation.$fPersistEntityCategoria_estab) -}
0fe23c675866f6e384b10317feeb7bb9
  postCadcategoriaR4 ::
    Yesod.Core.Types.HandlerT
      Foundation.Balada GHC.Types.IO Text.Blaze.Html.Html
  {- Unfolding: (Yesod.Core.Handler.redirect
                   @ (Yesod.Routes.Class.Route Foundation.Balada)
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   @ Text.Blaze.Html.Html
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   (Yesod.Core.Handler.$fRedirectUrlmasterRoute_$ctoTextUrl
                      @ Foundation.Balada)
                     `cast`
                   (Sym (Yesod.Core.Handler.NTCo:RedirectUrl[0]
                             (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)
                             <Yesod.Routes.Class.Route Foundation.Balada>_N))
                   Foundation.ErroR
                     `cast`
                   (Sub (Sym (Foundation.TFCo:R:RouteBalada[0])))) -}
4286fdeaa8fc5dbea114540d23ff5726
  postCadcategoriaR5 ::
    Yesod.Core.Types.HandlerT
      Foundation.Balada
      GHC.Types.IO
      ((Yesod.Form.Types.FormResult Foundation.Categoria_estab,
        Foundation.Widget),
       Yesod.Form.Types.Enctype)
  {- Unfolding: (Yesod.Form.Functions.$wrunFormPost
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   @ Foundation.Categoria_estab
                   @ Foundation.Widget
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)
                             <Yesod.Form.Types.FormMessage>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formCategoria1
                     `cast`
                   (<Text.Blaze.Internal.MarkupM ()>_R
                    ->_R Sym (Control.Monad.Trans.RWS.Lazy.NTCo:RWST[0]
                                  <(GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                                    Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                                    [Text.Shakespeare.I18N.Lang])>_R
                                  <Yesod.Form.Types.Enctype>_N
                                  <Yesod.Form.Types.Ints>_N
                                  <Foundation.Handler>_R
                                  ((<Yesod.Form.Types.FormResult Foundation.Categoria_estab>_N,
                                    (Yesod.Core.Types.WidgetT
                                       (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                                 <Foundation.Balada>_N <GHC.Types.IO>_N))
                                       <GHC.Types.IO>_N
                                       <()>_N)_N))_N))) -}
7722487014e30eb8bad8a808a24f67da
  postCaddiaR :: Foundation.Handler Text.Blaze.Html.Html
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Handlers.postCaddiaR1
                  `cast`
                (Trans
                     (<Yesod.Core.Types.HandlerData
                         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R))
                     (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                               <Foundation.Balada>_N
                               <GHC.Types.IO>_N
                               <Text.Blaze.Html.Html>_N))) -}
48f7b363a2227e11eda65f021c176a27
  postCaddiaR1 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Text.Blaze.Html.Html #)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ r :: Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (Handlers.postCaddiaR4
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Foundation.Balada>_N
                            <GHC.Types.IO>_N
                            <((Yesod.Form.Types.FormResult Foundation.Dia_evento,
                               Foundation.Widget),
                              Yesod.Form.Types.Enctype)>_N)
                         r)
                        `cast`
                      (GHC.Types.NTCo:IO[0]
                           <((Yesod.Form.Types.FormResult Foundation.Dia_evento,
                              Foundation.Widget),
                             Yesod.Form.Types.Enctype)>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) ds ds2 ->
                 case ds of wild1 { (,) result ds3 ->
                 case result of wild2 {
                   DEFAULT
                   -> (Handlers.postCadcategoriaR4
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Foundation.Balada>_N <GHC.Types.IO>_N <Text.Blaze.Html.Html>_N)
                         r)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R)
                        ipv
                   Yesod.Form.Types.FormSuccess dia
                   -> case (Foundation.$fYesodPersistBalada3
                              `cast`
                            (Yesod.Core.Types.NTCo:HandlerT[0]
                                 <Foundation.Balada>_N
                                 <GHC.Types.IO>_N
                                 (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N))
                              r)
                             `cast`
                           (GHC.Types.NTCo:IO[0] <Foundation.Balada>_R)
                             ipv of ds4 { (#,#) ipv2 ipv3 ->
                      case Foundation.$fYesodPersistBalada2
                             @ Database.Persist.Sql.Types.SqlBackend
                             @ (Database.Persist.Class.PersistEntity.Key Foundation.Dia_evento)
                             (case ipv3 of wild3 { Foundation.Balada ds5 -> ds5 })
                             (Database.Persist.Sql.Run.runSqlConn
                                @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                                @ (Database.Persist.Class.PersistEntity.Key Foundation.Dia_evento)
                                Foundation.$fYesodPersistBalada_$s$fMonadBaseControlbHandlerT
                                (Handlers.postCaddiaR3 dia))
                             r
                             ipv2 of ds5 { (#,#) ipv4 ipv5 ->
                      (Handlers.postCaddiaR2
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Foundation.Balada>_N <GHC.Types.IO>_N <Text.Blaze.Html.Html>_N)
                         r)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R)
                        ipv4 } } } } } }) -}
4c8e52c4dfeadc448bbc1c9052df7aec
  postCaddiaR2 ::
    Yesod.Core.Types.HandlerT
      Foundation.Balada GHC.Types.IO Text.Blaze.Html.Html
  {- Unfolding: (Yesod.Core.Handler.redirect
                   @ (Yesod.Routes.Class.Route Foundation.Balada)
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   @ Text.Blaze.Html.Html
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   (Yesod.Core.Handler.$fRedirectUrlmasterRoute_$ctoTextUrl
                      @ Foundation.Balada)
                     `cast`
                   (Sym (Yesod.Core.Handler.NTCo:RedirectUrl[0]
                             (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)
                             <Yesod.Routes.Class.Route Foundation.Balada>_N))
                   Foundation.CadfaixaprecoR
                     `cast`
                   (Sub (Sym (Foundation.TFCo:R:RouteBalada[0])))) -}
525eb7eec36b5f0d48cd57673203d366
  postCaddiaR3 ::
    Foundation.Dia_evento
    -> Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
         (Database.Persist.Class.PersistEntity.Key Foundation.Dia_evento)
  {- Unfolding: (Database.Persist.Sql.Orphan.PersistStore.$w$cinsert
                   @ Foundation.Dia_evento
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   Foundation.$fYesodBalada_$s$fMonadIOHandlerT
                   Foundation.$fPersistEntityDia_evento) -}
f99f2d71997f1b65dcbe46999e4ec3b1
  postCaddiaR4 ::
    Yesod.Core.Types.HandlerT
      Foundation.Balada
      GHC.Types.IO
      ((Yesod.Form.Types.FormResult Foundation.Dia_evento,
        Foundation.Widget),
       Yesod.Form.Types.Enctype)
  {- Unfolding: (Yesod.Form.Functions.$wrunFormPost
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   @ Foundation.Dia_evento
                   @ Foundation.Widget
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)
                             <Yesod.Form.Types.FormMessage>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formDia1
                     `cast`
                   (<Text.Blaze.Internal.MarkupM ()>_R
                    ->_R Sym (Control.Monad.Trans.RWS.Lazy.NTCo:RWST[0]
                                  <(GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                                    Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                                    [Text.Shakespeare.I18N.Lang])>_R
                                  <Yesod.Form.Types.Enctype>_N
                                  <Yesod.Form.Types.Ints>_N
                                  <Foundation.Handler>_R
                                  ((<Yesod.Form.Types.FormResult Foundation.Dia_evento>_N,
                                    (Yesod.Core.Types.WidgetT
                                       (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                                 <Foundation.Balada>_N <GHC.Types.IO>_N))
                                       <GHC.Types.IO>_N
                                       <()>_N)_N))_N))) -}
880d9ba18fd01d3a16955ca7ed688798
  postCadestabR :: Foundation.Handler Text.Blaze.Html.Html
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Handlers.postCadestabR1
                  `cast`
                (Trans
                     (<Yesod.Core.Types.HandlerData
                         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R))
                     (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                               <Foundation.Balada>_N
                               <GHC.Types.IO>_N
                               <Text.Blaze.Html.Html>_N))) -}
5614d96d60a7fb23d208aab9b1f53a43
  postCadestabR1 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Text.Blaze.Html.Html #)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ r :: Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (Handlers.postCadestabR4
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Foundation.Balada>_N
                            <GHC.Types.IO>_N
                            <((Yesod.Form.Types.FormResult Foundation.Estabelecimento,
                               Foundation.Widget),
                              Yesod.Form.Types.Enctype)>_N)
                         r)
                        `cast`
                      (GHC.Types.NTCo:IO[0]
                           <((Yesod.Form.Types.FormResult Foundation.Estabelecimento,
                              Foundation.Widget),
                             Yesod.Form.Types.Enctype)>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) ds ds2 ->
                 case ds of wild1 { (,) result ds3 ->
                 case result of wild2 {
                   DEFAULT
                   -> (Handlers.postCadcategoriaR4
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Foundation.Balada>_N <GHC.Types.IO>_N <Text.Blaze.Html.Html>_N)
                         r)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R)
                        ipv
                   Yesod.Form.Types.FormSuccess estab
                   -> case (Foundation.$fYesodPersistBalada3
                              `cast`
                            (Yesod.Core.Types.NTCo:HandlerT[0]
                                 <Foundation.Balada>_N
                                 <GHC.Types.IO>_N
                                 (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N))
                              r)
                             `cast`
                           (GHC.Types.NTCo:IO[0] <Foundation.Balada>_R)
                             ipv of ds4 { (#,#) ipv2 ipv3 ->
                      case Foundation.$fYesodPersistBalada2
                             @ Database.Persist.Sql.Types.SqlBackend
                             @ (Database.Persist.Class.PersistEntity.Key
                                  Foundation.Estabelecimento)
                             (case ipv3 of wild3 { Foundation.Balada ds5 -> ds5 })
                             (Database.Persist.Sql.Run.runSqlConn
                                @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                                @ (Database.Persist.Class.PersistEntity.Key
                                     Foundation.Estabelecimento)
                                Foundation.$fYesodPersistBalada_$s$fMonadBaseControlbHandlerT
                                (Handlers.postCadestabR3 estab))
                             r
                             ipv2 of ds5 { (#,#) ipv4 ipv5 ->
                      (Handlers.postCadestabR2
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Foundation.Balada>_N <GHC.Types.IO>_N <Text.Blaze.Html.Html>_N)
                         r)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R)
                        ipv4 } } } } } }) -}
e3af69ca1aa48e367ca0572ad9068e96
  postCadestabR2 ::
    Yesod.Core.Types.HandlerT
      Foundation.Balada GHC.Types.IO Text.Blaze.Html.Html
  {- Unfolding: (Yesod.Core.Handler.redirect
                   @ (Yesod.Routes.Class.Route Foundation.Balada)
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   @ Text.Blaze.Html.Html
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   (Yesod.Core.Handler.$fRedirectUrlmasterRoute_$ctoTextUrl
                      @ Foundation.Balada)
                     `cast`
                   (Sym (Yesod.Core.Handler.NTCo:RedirectUrl[0]
                             (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)
                             <Yesod.Routes.Class.Route Foundation.Balada>_N))
                   Foundation.CadestabR
                     `cast`
                   (Sub (Sym (Foundation.TFCo:R:RouteBalada[0])))) -}
bb7b84d15ed025b6c996d4dc1b62e390
  postCadestabR3 ::
    Foundation.Estabelecimento
    -> Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
         (Database.Persist.Class.PersistEntity.Key
            Foundation.Estabelecimento)
  {- Unfolding: (Database.Persist.Sql.Orphan.PersistStore.$w$cinsert
                   @ Foundation.Estabelecimento
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   Foundation.$fYesodBalada_$s$fMonadIOHandlerT
                   Foundation.$fPersistEntityEstabelecimento) -}
d36b2a66e51280513602bc7569bdb248
  postCadestabR4 ::
    Yesod.Core.Types.HandlerT
      Foundation.Balada
      GHC.Types.IO
      ((Yesod.Form.Types.FormResult Foundation.Estabelecimento,
        Foundation.Widget),
       Yesod.Form.Types.Enctype)
  {- Unfolding: (Yesod.Form.Functions.$wrunFormPost
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   @ Foundation.Estabelecimento
                   @ Foundation.Widget
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)
                             <Yesod.Form.Types.FormMessage>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formEstabelecimento1
                     `cast`
                   (<Text.Blaze.Internal.MarkupM ()>_R
                    ->_R Sym (Control.Monad.Trans.RWS.Lazy.NTCo:RWST[0]
                                  <(GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                                    Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                                    [Text.Shakespeare.I18N.Lang])>_R
                                  <Yesod.Form.Types.Enctype>_N
                                  <Yesod.Form.Types.Ints>_N
                                  <Foundation.Handler>_R
                                  ((<Yesod.Form.Types.FormResult Foundation.Estabelecimento>_N,
                                    (Yesod.Core.Types.WidgetT
                                       (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                                 <Foundation.Balada>_N <GHC.Types.IO>_N))
                                       <GHC.Types.IO>_N
                                       <()>_N)_N))_N))) -}
a6c1e01085f7fe1317e1e90888ca0366
  postCadfaixaprecoR :: Foundation.Handler Text.Blaze.Html.Html
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Handlers.postCadfaixaprecoR1
                  `cast`
                (Trans
                     (<Yesod.Core.Types.HandlerData
                         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R))
                     (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                               <Foundation.Balada>_N
                               <GHC.Types.IO>_N
                               <Text.Blaze.Html.Html>_N))) -}
63561c2e4f9ed55f89b5c5cd20b2f762
  postCadfaixaprecoR1 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Text.Blaze.Html.Html #)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ r :: Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (Handlers.postCadfaixaprecoR3
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Foundation.Balada>_N
                            <GHC.Types.IO>_N
                            <((Yesod.Form.Types.FormResult Foundation.Faixa_preco,
                               Foundation.Widget),
                              Yesod.Form.Types.Enctype)>_N)
                         r)
                        `cast`
                      (GHC.Types.NTCo:IO[0]
                           <((Yesod.Form.Types.FormResult Foundation.Faixa_preco,
                              Foundation.Widget),
                             Yesod.Form.Types.Enctype)>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) ds ds2 ->
                 case ds of wild1 { (,) result ds3 ->
                 case result of wild2 {
                   DEFAULT
                   -> (Handlers.postCadcategoriaR4
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Foundation.Balada>_N <GHC.Types.IO>_N <Text.Blaze.Html.Html>_N)
                         r)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R)
                        ipv
                   Yesod.Form.Types.FormSuccess faixapreco
                   -> case (Foundation.$fYesodPersistBalada3
                              `cast`
                            (Yesod.Core.Types.NTCo:HandlerT[0]
                                 <Foundation.Balada>_N
                                 <GHC.Types.IO>_N
                                 (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N))
                              r)
                             `cast`
                           (GHC.Types.NTCo:IO[0] <Foundation.Balada>_R)
                             ipv of ds4 { (#,#) ipv2 ipv3 ->
                      case Foundation.$fYesodPersistBalada2
                             @ Database.Persist.Sql.Types.SqlBackend
                             @ (Database.Persist.Class.PersistEntity.Key Foundation.Faixa_preco)
                             (case ipv3 of wild3 { Foundation.Balada ds5 -> ds5 })
                             (Database.Persist.Sql.Run.runSqlConn
                                @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                                @ (Database.Persist.Class.PersistEntity.Key Foundation.Faixa_preco)
                                Foundation.$fYesodPersistBalada_$s$fMonadBaseControlbHandlerT
                                (Handlers.postCadfaixaprecoR2 faixapreco))
                             r
                             ipv2 of ds5 { (#,#) ipv4 ipv5 ->
                      (Handlers.postCaddiaR2
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Foundation.Balada>_N <GHC.Types.IO>_N <Text.Blaze.Html.Html>_N)
                         r)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R)
                        ipv4 } } } } } }) -}
8904308a6a92b5ac33dc24cd16594270
  postCadfaixaprecoR2 ::
    Foundation.Faixa_preco
    -> Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
         (Database.Persist.Class.PersistEntity.Key Foundation.Faixa_preco)
  {- Unfolding: (Database.Persist.Sql.Orphan.PersistStore.$w$cinsert
                   @ Foundation.Faixa_preco
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   Foundation.$fYesodBalada_$s$fMonadIOHandlerT
                   Foundation.$fPersistEntityFaixa_preco) -}
c4fa6dbc17c15952d171318e0a0bf5a5
  postCadfaixaprecoR3 ::
    Yesod.Core.Types.HandlerT
      Foundation.Balada
      GHC.Types.IO
      ((Yesod.Form.Types.FormResult Foundation.Faixa_preco,
        Foundation.Widget),
       Yesod.Form.Types.Enctype)
  {- Unfolding: (Yesod.Form.Functions.$wrunFormPost
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   @ Foundation.Faixa_preco
                   @ Foundation.Widget
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)
                             <Yesod.Form.Types.FormMessage>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formFaixapreco1
                     `cast`
                   (<Text.Blaze.Internal.MarkupM ()>_R
                    ->_R Sym (Control.Monad.Trans.RWS.Lazy.NTCo:RWST[0]
                                  <(GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                                    Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                                    [Text.Shakespeare.I18N.Lang])>_R
                                  <Yesod.Form.Types.Enctype>_N
                                  <Yesod.Form.Types.Ints>_N
                                  <Foundation.Handler>_R
                                  ((<Yesod.Form.Types.FormResult Foundation.Faixa_preco>_N,
                                    (Yesod.Core.Types.WidgetT
                                       (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                                 <Foundation.Balada>_N <GHC.Types.IO>_N))
                                       <GHC.Types.IO>_N
                                       <()>_N)_N))_N))) -}
63cf1ddd64df6e8701318865473419c1
  postCadpessoaR :: Foundation.Handler Text.Blaze.Html.Html
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Handlers.postCadpessoaR1
                  `cast`
                (Trans
                     (<Yesod.Core.Types.HandlerData
                         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R))
                     (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                               <Foundation.Balada>_N
                               <GHC.Types.IO>_N
                               <Text.Blaze.Html.Html>_N))) -}
ad38e320f3ec266cf4709a29c4bacf68
  postCadpessoaR1 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Text.Blaze.Html.Html #)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ r :: Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (Handlers.postCadpessoaR4
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Foundation.Balada>_N
                            <GHC.Types.IO>_N
                            <((Yesod.Form.Types.FormResult Foundation.Pessoas,
                               Foundation.Widget),
                              Yesod.Form.Types.Enctype)>_N)
                         r)
                        `cast`
                      (GHC.Types.NTCo:IO[0]
                           <((Yesod.Form.Types.FormResult Foundation.Pessoas,
                              Foundation.Widget),
                             Yesod.Form.Types.Enctype)>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) ds ds2 ->
                 case ds of wild1 { (,) result ds3 ->
                 case result of wild2 {
                   DEFAULT
                   -> (Handlers.postCadcategoriaR4
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Foundation.Balada>_N <GHC.Types.IO>_N <Text.Blaze.Html.Html>_N)
                         r)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R)
                        ipv
                   Yesod.Form.Types.FormSuccess pessoa
                   -> case (Foundation.$fYesodPersistBalada3
                              `cast`
                            (Yesod.Core.Types.NTCo:HandlerT[0]
                                 <Foundation.Balada>_N
                                 <GHC.Types.IO>_N
                                 (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N))
                              r)
                             `cast`
                           (GHC.Types.NTCo:IO[0] <Foundation.Balada>_R)
                             ipv of ds4 { (#,#) ipv2 ipv3 ->
                      case Foundation.$fYesodPersistBalada2
                             @ Database.Persist.Sql.Types.SqlBackend
                             @ (Database.Persist.Class.PersistEntity.Key Foundation.Pessoas)
                             (case ipv3 of wild3 { Foundation.Balada ds5 -> ds5 })
                             (Database.Persist.Sql.Run.runSqlConn
                                @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                                @ (Database.Persist.Class.PersistEntity.Key Foundation.Pessoas)
                                Foundation.$fYesodPersistBalada_$s$fMonadBaseControlbHandlerT
                                (Handlers.postCadpessoaR3 pessoa))
                             r
                             ipv2 of ds5 { (#,#) ipv4 ipv5 ->
                      (Handlers.postCadpessoaR2
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Foundation.Balada>_N <GHC.Types.IO>_N <Text.Blaze.Html.Html>_N)
                         r)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R)
                        ipv4 } } } } } }) -}
afdcb022f95d4167602fe863ff42f810
  postCadpessoaR2 ::
    Yesod.Core.Types.HandlerT
      Foundation.Balada GHC.Types.IO Text.Blaze.Html.Html
  {- Unfolding: (Yesod.Core.Handler.redirect
                   @ (Yesod.Routes.Class.Route Foundation.Balada)
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   @ Text.Blaze.Html.Html
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   (Yesod.Core.Handler.$fRedirectUrlmasterRoute_$ctoTextUrl
                      @ Foundation.Balada)
                     `cast`
                   (Sym (Yesod.Core.Handler.NTCo:RedirectUrl[0]
                             (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)
                             <Yesod.Routes.Class.Route Foundation.Balada>_N))
                   Foundation.CadpessoaR
                     `cast`
                   (Sub (Sym (Foundation.TFCo:R:RouteBalada[0])))) -}
213310464a7ac7620d951814343bc2a1
  postCadpessoaR3 ::
    Foundation.Pessoas
    -> Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
         (Database.Persist.Class.PersistEntity.Key Foundation.Pessoas)
  {- Unfolding: (Database.Persist.Sql.Orphan.PersistStore.$w$cinsert
                   @ Foundation.Pessoas
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   Foundation.$fYesodBalada_$s$fMonadIOHandlerT
                   Foundation.$fPersistEntityPessoas) -}
436a348d47cf2d657d38d40802dd264d
  postCadpessoaR4 ::
    Yesod.Core.Types.HandlerT
      Foundation.Balada
      GHC.Types.IO
      ((Yesod.Form.Types.FormResult Foundation.Pessoas,
        Foundation.Widget),
       Yesod.Form.Types.Enctype)
  {- Unfolding: (Yesod.Form.Functions.$wrunFormPost
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   @ Foundation.Pessoas
                   @ Foundation.Widget
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)
                             <Yesod.Form.Types.FormMessage>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formPessoa1
                     `cast`
                   (<Text.Blaze.Internal.MarkupM ()>_R
                    ->_R Sym (Control.Monad.Trans.RWS.Lazy.NTCo:RWST[0]
                                  <(GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                                    Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                                    [Text.Shakespeare.I18N.Lang])>_R
                                  <Yesod.Form.Types.Enctype>_N
                                  <Yesod.Form.Types.Ints>_N
                                  <Foundation.Handler>_R
                                  ((<Yesod.Form.Types.FormResult Foundation.Pessoas>_N,
                                    (Yesod.Core.Types.WidgetT
                                       (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                                 <Foundation.Balada>_N <GHC.Types.IO>_N))
                                       <GHC.Types.IO>_N
                                       <()>_N)_N))_N))) -}
7d090a3f8bd28c43a4e35b77f1b1a7a5
  postCadsubcategR :: Foundation.Handler Text.Blaze.Html.Html
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Handlers.postCadsubcategR1
                  `cast`
                (Trans
                     (<Yesod.Core.Types.HandlerData
                         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R))
                     (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                               <Foundation.Balada>_N
                               <GHC.Types.IO>_N
                               <Text.Blaze.Html.Html>_N))) -}
ff3992c52b8b283e50640f4ccbfb1713
  postCadsubcategR1 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Text.Blaze.Html.Html #)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ r :: Yesod.Core.Types.HandlerData
                          Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (Handlers.postCadsubcategR4
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Foundation.Balada>_N
                            <GHC.Types.IO>_N
                            <((Yesod.Form.Types.FormResult Foundation.Sub_categ_estab,
                               Foundation.Widget),
                              Yesod.Form.Types.Enctype)>_N)
                         r)
                        `cast`
                      (GHC.Types.NTCo:IO[0]
                           <((Yesod.Form.Types.FormResult Foundation.Sub_categ_estab,
                              Foundation.Widget),
                             Yesod.Form.Types.Enctype)>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) ds ds2 ->
                 case ds of wild1 { (,) result ds3 ->
                 case result of wild2 {
                   DEFAULT
                   -> (Handlers.postCadcategoriaR4
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Foundation.Balada>_N <GHC.Types.IO>_N <Text.Blaze.Html.Html>_N)
                         r)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R)
                        ipv
                   Yesod.Form.Types.FormSuccess subcategoria
                   -> case (Foundation.$fYesodPersistBalada3
                              `cast`
                            (Yesod.Core.Types.NTCo:HandlerT[0]
                                 <Foundation.Balada>_N
                                 <GHC.Types.IO>_N
                                 (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                      <Foundation.Balada>_N <GHC.Types.IO>_N))
                              r)
                             `cast`
                           (GHC.Types.NTCo:IO[0] <Foundation.Balada>_R)
                             ipv of ds4 { (#,#) ipv2 ipv3 ->
                      case Foundation.$fYesodPersistBalada2
                             @ Database.Persist.Sql.Types.SqlBackend
                             @ (Database.Persist.Class.PersistEntity.Key
                                  Foundation.Sub_categ_estab)
                             (case ipv3 of wild3 { Foundation.Balada ds5 -> ds5 })
                             (Database.Persist.Sql.Run.runSqlConn
                                @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                                @ (Database.Persist.Class.PersistEntity.Key
                                     Foundation.Sub_categ_estab)
                                Foundation.$fYesodPersistBalada_$s$fMonadBaseControlbHandlerT
                                (Handlers.postCadsubcategR3 subcategoria))
                             r
                             ipv2 of ds5 { (#,#) ipv4 ipv5 ->
                      (Handlers.postCadsubcategR2
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Foundation.Balada>_N <GHC.Types.IO>_N <Text.Blaze.Html.Html>_N)
                         r)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R)
                        ipv4 } } } } } }) -}
899acc8b311236c2b75be5997e0ba30b
  postCadsubcategR2 ::
    Yesod.Core.Types.HandlerT
      Foundation.Balada GHC.Types.IO Text.Blaze.Html.Html
  {- Unfolding: (Yesod.Core.Handler.redirect
                   @ (Yesod.Routes.Class.Route Foundation.Balada)
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   @ Text.Blaze.Html.Html
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   (Yesod.Core.Handler.$fRedirectUrlmasterRoute_$ctoTextUrl
                      @ Foundation.Balada)
                     `cast`
                   (Sym (Yesod.Core.Handler.NTCo:RedirectUrl[0]
                             (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)
                             <Yesod.Routes.Class.Route Foundation.Balada>_N))
                   Foundation.CadsubcategR
                     `cast`
                   (Sub (Sym (Foundation.TFCo:R:RouteBalada[0])))) -}
b339a13efe662aaa19a96a7097936165
  postCadsubcategR3 ::
    Foundation.Sub_categ_estab
    -> Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
         (Database.Persist.Class.PersistEntity.Key
            Foundation.Sub_categ_estab)
  {- Unfolding: (Database.Persist.Sql.Orphan.PersistStore.$w$cinsert
                   @ Foundation.Sub_categ_estab
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   Foundation.$fYesodBalada_$s$fMonadIOHandlerT
                   Foundation.$fPersistEntitySub_categ_estab) -}
a61f23f9460a7adeaa29a890cab797ee
  postCadsubcategR4 ::
    Yesod.Core.Types.HandlerT
      Foundation.Balada
      GHC.Types.IO
      ((Yesod.Form.Types.FormResult Foundation.Sub_categ_estab,
        Foundation.Widget),
       Yesod.Form.Types.Enctype)
  {- Unfolding: (Yesod.Form.Functions.$wrunFormPost
                   @ (Yesod.Core.Types.HandlerT Foundation.Balada GHC.Types.IO)
                   @ Foundation.Sub_categ_estab
                   @ Foundation.Widget
                   Foundation.$fRenderMessageBaladaFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.NTCo:RenderMessage[0]
                             (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                  <Foundation.Balada>_N <GHC.Types.IO>_N)
                             <Yesod.Form.Types.FormMessage>_N))
                   Foundation.$fYesodBalada_$s$fMonadHandlerHandlerT
                   Handlers.formSubcategoria1
                     `cast`
                   (<Text.Blaze.Internal.MarkupM ()>_R
                    ->_R Sym (Control.Monad.Trans.RWS.Lazy.NTCo:RWST[0]
                                  <(GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                                    Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                                    [Text.Shakespeare.I18N.Lang])>_R
                                  <Yesod.Form.Types.Enctype>_N
                                  <Yesod.Form.Types.Ints>_N
                                  <Foundation.Handler>_R
                                  ((<Yesod.Form.Types.FormResult Foundation.Sub_categ_estab>_N,
                                    (Yesod.Core.Types.WidgetT
                                       (Sym (Yesod.Core.Class.Handler.TFCo:R:HandlerSiteHandlerT[0]
                                                 <Foundation.Balada>_N <GHC.Types.IO>_N))
                                       <GHC.Types.IO>_N
                                       <()>_N)_N))_N))) -}
df6c64ec6f00f8e7b6a112c875355ef4
  postLoginR :: Foundation.Handler Text.Blaze.Html.Html
  {- Arity: 2, Strictness: <L,U(U,U,U,U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Handlers.postLoginR1
                  `cast`
                (Trans
                     (<Yesod.Core.Types.HandlerData
                         Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Text.Blaze.Html.Html>_R))
                     (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                               <Foundation.Balada>_N
                               <GHC.Types.IO>_N
                               <Text.Blaze.Html.Html>_N))) -}
207ff90838a707ee7da275e365eafd7c
  postLoginR1 ::
    Yesod.Core.Types.HandlerData
      Foundation.Balada (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Text.Blaze.Html.Html #)
  {- Arity: 2, Strictness: <L,U(U,U,U,U,U)><L,U> -}
instance Yesod.Core.Class.Dispatch.YesodDispatch [Foundation.Balada]
  = Handlers.$fYesodDispatchBalada
"SPEC/Handlers $fApplicativeWidgetT @ Balada @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                  (Yesod.Core.Types.WidgetT
                                                                                     Foundation.Balada
                                                                                     GHC.Types.IO)
                                                                   $dMonad :: GHC.Base.Monad
                                                                                GHC.Types.IO
  Yesod.Core.Types.$fApplicativeWidgetT @ Foundation.Balada
                                        @ GHC.Types.IO
                                        $dFunctor
                                        $dMonad
  = Handlers.$s$fApplicativeWidgetT
"SPEC/Handlers $fApplicativeWidgetT_$c*> @ Balada @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                       (Yesod.Core.Types.WidgetT
                                                                                          Foundation.Balada
                                                                                          GHC.Types.IO)
                                                                        $dMonad :: GHC.Base.Monad
                                                                                     GHC.Types.IO
  Yesod.Core.Types.$fApplicativeWidgetT_$c*> @ Foundation.Balada
                                             @ GHC.Types.IO
                                             $dFunctor
                                             $dMonad
  = Handlers.$s$fApplicativeWidgetT_$s$fApplicativeWidgetT_$c*>
"SPEC/Handlers $fApplicativeWidgetT_$c<* @ Balada @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                       (Yesod.Core.Types.WidgetT
                                                                                          Foundation.Balada
                                                                                          GHC.Types.IO)
                                                                        $dMonad :: GHC.Base.Monad
                                                                                     GHC.Types.IO
  Yesod.Core.Types.$fApplicativeWidgetT_$c<* @ Foundation.Balada
                                             @ GHC.Types.IO
                                             $dFunctor
                                             $dMonad
  = Handlers.$s$fApplicativeWidgetT_$s$fApplicativeWidgetT_$c<*
"SPEC/Handlers $fApplicativeWidgetT_$cpure @ Balada @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                         (Yesod.Core.Types.WidgetT
                                                                                            Foundation.Balada
                                                                                            GHC.Types.IO)
                                                                          $dMonad :: GHC.Base.Monad
                                                                                       GHC.Types.IO
  Yesod.Core.Types.$fApplicativeWidgetT_$cpure @ Foundation.Balada
                                               @ GHC.Types.IO
                                               $dFunctor
                                               $dMonad
  = Handlers.$s$fApplicativeWidgetT_$s$fApplicativeWidgetT_$cpure
"SPEC/Handlers $fMonadBasebWidgetT @ IO @ Balada @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                          GHC.Types.IO
                                                                       $dApplicative1 :: GHC.Base.Applicative
                                                                                           (Yesod.Core.Types.WidgetT
                                                                                              Foundation.Balada
                                                                                              GHC.Types.IO)
                                                                       $dMonad :: GHC.Base.Monad
                                                                                    GHC.Types.IO
                                                                       $dMonad1 :: GHC.Base.Monad
                                                                                     (Yesod.Core.Types.WidgetT
                                                                                        Foundation.Balada
                                                                                        GHC.Types.IO)
                                                                       $dMonadBase :: Control.Monad.Base.MonadBase
                                                                                        GHC.Types.IO
                                                                                        GHC.Types.IO
  Yesod.Core.Types.$fMonadBasebWidgetT @ GHC.Types.IO
                                       @ Foundation.Balada
                                       @ GHC.Types.IO
                                       $dApplicative
                                       $dApplicative1
                                       $dMonad
                                       $dMonad1
                                       $dMonadBase
  = Handlers.$s$fMonadBasebWidgetT
"SPEC/Handlers $fMonadHandlerWidgetT @ Balada @ IO" [ALWAYS] forall $dMonadResource :: Control.Monad.Trans.Resource.Internal.MonadResource
                                                                                         (Yesod.Core.Types.WidgetT
                                                                                            Foundation.Balada
                                                                                            GHC.Types.IO)
                                                                    tup :: Control.Monad.Trans.Resource.MonadResourceBase
                                                                             GHC.Types.IO
  Yesod.Core.Class.Handler.$fMonadHandlerWidgetT @ Foundation.Balada
                                                 @ GHC.Types.IO
                                                 $dMonadResource
                                                 tup
  = Handlers.$s$fMonadHandlerWidgetT
"SPEC/Handlers $fMonadIOWidgetT @ Balada @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                            (Yesod.Core.Types.WidgetT
                                                                               Foundation.Balada
                                                                               GHC.Types.IO)
                                                               $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                              GHC.Types.IO
  Yesod.Core.Types.$fMonadIOWidgetT @ Foundation.Balada
                                    @ GHC.Types.IO
                                    $dMonad
                                    $dMonadIO
  = Handlers.$s$fMonadHandlerWidgetT_$s$fMonadIOWidgetT
"SPEC/Handlers $fMonadResourceWidgetT @ Balada @ IO" [ALWAYS] forall $dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                                       (Yesod.Core.Types.WidgetT
                                                                                          Foundation.Balada
                                                                                          GHC.Types.IO)
                                                                     $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                    (Yesod.Core.Types.WidgetT
                                                                                       Foundation.Balada
                                                                                       GHC.Types.IO)
                                                                     $dApplicative :: GHC.Base.Applicative
                                                                                        (Yesod.Core.Types.WidgetT
                                                                                           Foundation.Balada
                                                                                           GHC.Types.IO)
                                                                     $dMonadBase :: Control.Monad.Base.MonadBase
                                                                                      GHC.Types.IO
                                                                                      (Yesod.Core.Types.WidgetT
                                                                                         Foundation.Balada
                                                                                         GHC.Types.IO)
                                                                     $dApplicative1 :: GHC.Base.Applicative
                                                                                         GHC.Types.IO
                                                                     $dMonadIO1 :: Control.Monad.IO.Class.MonadIO
                                                                                     GHC.Types.IO
                                                                     $dMonadBase1 :: Control.Monad.Base.MonadBase
                                                                                       GHC.Types.IO
                                                                                       GHC.Types.IO
                                                                     $dMonadThrow1 :: Control.Monad.Catch.MonadThrow
                                                                                        GHC.Types.IO
  Yesod.Core.Types.$fMonadResourceWidgetT @ Foundation.Balada
                                          @ GHC.Types.IO
                                          $dMonadThrow
                                          $dMonadIO
                                          $dApplicative
                                          $dMonadBase
                                          $dApplicative1
                                          $dMonadIO1
                                          $dMonadBase1
                                          $dMonadThrow1
  = Handlers.$s$fMonadHandlerWidgetT_$s$fMonadResourceWidgetT
"SPEC/Handlers $fMonadThrowWidgetT @ Balada @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                               (Yesod.Core.Types.WidgetT
                                                                                  Foundation.Balada
                                                                                  GHC.Types.IO)
                                                                  $dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                                    GHC.Types.IO
  Yesod.Core.Types.$fMonadThrowWidgetT @ Foundation.Balada
                                       @ GHC.Types.IO
                                       $dMonad
                                       $dMonadThrow
  = Handlers.$s$fMonadHandlerWidgetT_$s$fMonadThrowWidgetT
"SPEC/Handlers $fMonadWidgetT @ Balada @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                (Yesod.Core.Types.WidgetT
                                                                                   Foundation.Balada
                                                                                   GHC.Types.IO)
                                                             $dMonad :: GHC.Base.Monad GHC.Types.IO
  Yesod.Core.Types.$fMonadWidgetT @ Foundation.Balada
                                  @ GHC.Types.IO
                                  $dApplicative
                                  $dMonad
  = Handlers.$s$fMonadBasebWidgetT_$s$fMonadWidgetT
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

